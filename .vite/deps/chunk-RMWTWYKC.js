import {
  require_events
} from "./chunk-JLS7QRTL.js";
import {
  BaseError,
  LruMap,
  checksumAddress,
  concat,
  defineFormatter,
  from,
  fromBoolean,
  fromBytes,
  fromNumber,
  fromString,
  fromString2,
  hexToBigInt,
  hexToNumber,
  isHex,
  keccak256,
  numberToHex,
  padLeft,
  padRight,
  size,
  size2,
  toHex
} from "./chunk-VTHNKRVG.js";
import {
  css,
  unsafeCSS
} from "./chunk-366LDVMV.js";
import {
  formatUnits
} from "./chunk-SM5OAV2N.js";
import {
  keccak_256
} from "./chunk-5XBGTDLQ.js";
import {
  __commonJS,
  __esm,
  __export,
  __reExport,
  __toCommonJS,
  __toESM
} from "./chunk-OS7ZSSJM.js";

// node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS({
  "node_modules/dayjs/dayjs.min.js"(exports, module) {
    !function(t2, e3) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e3() : "function" == typeof define && define.amd ? define(e3) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).dayjs = e3();
    }(exports, function() {
      "use strict";
      var t2 = 1e3, e3 = 6e4, n6 = 36e5, r4 = "millisecond", i6 = "second", s4 = "minute", u5 = "hour", a4 = "day", o6 = "week", c8 = "month", f9 = "quarter", h7 = "year", d6 = "date", l9 = "Invalid Date", $4 = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y7 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M6 = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t3) {
        var e4 = ["th", "st", "nd", "rd"], n7 = t3 % 100;
        return "[" + t3 + (e4[(n7 - 20) % 10] || e4[n7] || e4[0]) + "]";
      } }, m4 = function(t3, e4, n7) {
        var r5 = String(t3);
        return !r5 || r5.length >= e4 ? t3 : "" + Array(e4 + 1 - r5.length).join(n7) + t3;
      }, v6 = { s: m4, z: function(t3) {
        var e4 = -t3.utcOffset(), n7 = Math.abs(e4), r5 = Math.floor(n7 / 60), i7 = n7 % 60;
        return (e4 <= 0 ? "+" : "-") + m4(r5, 2, "0") + ":" + m4(i7, 2, "0");
      }, m: function t3(e4, n7) {
        if (e4.date() < n7.date()) return -t3(n7, e4);
        var r5 = 12 * (n7.year() - e4.year()) + (n7.month() - e4.month()), i7 = e4.clone().add(r5, c8), s5 = n7 - i7 < 0, u6 = e4.clone().add(r5 + (s5 ? -1 : 1), c8);
        return +(-(r5 + (n7 - i7) / (s5 ? i7 - u6 : u6 - i7)) || 0);
      }, a: function(t3) {
        return t3 < 0 ? Math.ceil(t3) || 0 : Math.floor(t3);
      }, p: function(t3) {
        return { M: c8, y: h7, w: o6, d: a4, D: d6, h: u5, m: s4, s: i6, ms: r4, Q: f9 }[t3] || String(t3 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t3) {
        return void 0 === t3;
      } }, g4 = "en", D3 = {};
      D3[g4] = M6;
      var p6 = "$isDayjsObject", S5 = function(t3) {
        return t3 instanceof _3 || !(!t3 || !t3[p6]);
      }, w6 = function t3(e4, n7, r5) {
        var i7;
        if (!e4) return g4;
        if ("string" == typeof e4) {
          var s5 = e4.toLowerCase();
          D3[s5] && (i7 = s5), n7 && (D3[s5] = n7, i7 = s5);
          var u6 = e4.split("-");
          if (!i7 && u6.length > 1) return t3(u6[0]);
        } else {
          var a5 = e4.name;
          D3[a5] = e4, i7 = a5;
        }
        return !r5 && i7 && (g4 = i7), i7 || !r5 && g4;
      }, O7 = function(t3, e4) {
        if (S5(t3)) return t3.clone();
        var n7 = "object" == typeof e4 ? e4 : {};
        return n7.date = t3, n7.args = arguments, new _3(n7);
      }, b6 = v6;
      b6.l = w6, b6.i = S5, b6.w = function(t3, e4) {
        return O7(t3, { locale: e4.$L, utc: e4.$u, x: e4.$x, $offset: e4.$offset });
      };
      var _3 = function() {
        function M7(t3) {
          this.$L = w6(t3.locale, null, true), this.parse(t3), this.$x = this.$x || t3.x || {}, this[p6] = true;
        }
        var m5 = M7.prototype;
        return m5.parse = function(t3) {
          this.$d = function(t4) {
            var e4 = t4.date, n7 = t4.utc;
            if (null === e4) return /* @__PURE__ */ new Date(NaN);
            if (b6.u(e4)) return /* @__PURE__ */ new Date();
            if (e4 instanceof Date) return new Date(e4);
            if ("string" == typeof e4 && !/Z$/i.test(e4)) {
              var r5 = e4.match($4);
              if (r5) {
                var i7 = r5[2] - 1 || 0, s5 = (r5[7] || "0").substring(0, 3);
                return n7 ? new Date(Date.UTC(r5[1], i7, r5[3] || 1, r5[4] || 0, r5[5] || 0, r5[6] || 0, s5)) : new Date(r5[1], i7, r5[3] || 1, r5[4] || 0, r5[5] || 0, r5[6] || 0, s5);
              }
            }
            return new Date(e4);
          }(t3), this.init();
        }, m5.init = function() {
          var t3 = this.$d;
          this.$y = t3.getFullYear(), this.$M = t3.getMonth(), this.$D = t3.getDate(), this.$W = t3.getDay(), this.$H = t3.getHours(), this.$m = t3.getMinutes(), this.$s = t3.getSeconds(), this.$ms = t3.getMilliseconds();
        }, m5.$utils = function() {
          return b6;
        }, m5.isValid = function() {
          return !(this.$d.toString() === l9);
        }, m5.isSame = function(t3, e4) {
          var n7 = O7(t3);
          return this.startOf(e4) <= n7 && n7 <= this.endOf(e4);
        }, m5.isAfter = function(t3, e4) {
          return O7(t3) < this.startOf(e4);
        }, m5.isBefore = function(t3, e4) {
          return this.endOf(e4) < O7(t3);
        }, m5.$g = function(t3, e4, n7) {
          return b6.u(t3) ? this[e4] : this.set(n7, t3);
        }, m5.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m5.valueOf = function() {
          return this.$d.getTime();
        }, m5.startOf = function(t3, e4) {
          var n7 = this, r5 = !!b6.u(e4) || e4, f10 = b6.p(t3), l10 = function(t4, e5) {
            var i7 = b6.w(n7.$u ? Date.UTC(n7.$y, e5, t4) : new Date(n7.$y, e5, t4), n7);
            return r5 ? i7 : i7.endOf(a4);
          }, $5 = function(t4, e5) {
            return b6.w(n7.toDate()[t4].apply(n7.toDate("s"), (r5 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e5)), n7);
          }, y8 = this.$W, M8 = this.$M, m6 = this.$D, v7 = "set" + (this.$u ? "UTC" : "");
          switch (f10) {
            case h7:
              return r5 ? l10(1, 0) : l10(31, 11);
            case c8:
              return r5 ? l10(1, M8) : l10(0, M8 + 1);
            case o6:
              var g5 = this.$locale().weekStart || 0, D4 = (y8 < g5 ? y8 + 7 : y8) - g5;
              return l10(r5 ? m6 - D4 : m6 + (6 - D4), M8);
            case a4:
            case d6:
              return $5(v7 + "Hours", 0);
            case u5:
              return $5(v7 + "Minutes", 1);
            case s4:
              return $5(v7 + "Seconds", 2);
            case i6:
              return $5(v7 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m5.endOf = function(t3) {
          return this.startOf(t3, false);
        }, m5.$set = function(t3, e4) {
          var n7, o7 = b6.p(t3), f10 = "set" + (this.$u ? "UTC" : ""), l10 = (n7 = {}, n7[a4] = f10 + "Date", n7[d6] = f10 + "Date", n7[c8] = f10 + "Month", n7[h7] = f10 + "FullYear", n7[u5] = f10 + "Hours", n7[s4] = f10 + "Minutes", n7[i6] = f10 + "Seconds", n7[r4] = f10 + "Milliseconds", n7)[o7], $5 = o7 === a4 ? this.$D + (e4 - this.$W) : e4;
          if (o7 === c8 || o7 === h7) {
            var y8 = this.clone().set(d6, 1);
            y8.$d[l10]($5), y8.init(), this.$d = y8.set(d6, Math.min(this.$D, y8.daysInMonth())).$d;
          } else l10 && this.$d[l10]($5);
          return this.init(), this;
        }, m5.set = function(t3, e4) {
          return this.clone().$set(t3, e4);
        }, m5.get = function(t3) {
          return this[b6.p(t3)]();
        }, m5.add = function(r5, f10) {
          var d7, l10 = this;
          r5 = Number(r5);
          var $5 = b6.p(f10), y8 = function(t3) {
            var e4 = O7(l10);
            return b6.w(e4.date(e4.date() + Math.round(t3 * r5)), l10);
          };
          if ($5 === c8) return this.set(c8, this.$M + r5);
          if ($5 === h7) return this.set(h7, this.$y + r5);
          if ($5 === a4) return y8(1);
          if ($5 === o6) return y8(7);
          var M8 = (d7 = {}, d7[s4] = e3, d7[u5] = n6, d7[i6] = t2, d7)[$5] || 1, m6 = this.$d.getTime() + r5 * M8;
          return b6.w(m6, this);
        }, m5.subtract = function(t3, e4) {
          return this.add(-1 * t3, e4);
        }, m5.format = function(t3) {
          var e4 = this, n7 = this.$locale();
          if (!this.isValid()) return n7.invalidDate || l9;
          var r5 = t3 || "YYYY-MM-DDTHH:mm:ssZ", i7 = b6.z(this), s5 = this.$H, u6 = this.$m, a5 = this.$M, o7 = n7.weekdays, c9 = n7.months, f10 = n7.meridiem, h8 = function(t4, n8, i8, s6) {
            return t4 && (t4[n8] || t4(e4, r5)) || i8[n8].slice(0, s6);
          }, d7 = function(t4) {
            return b6.s(s5 % 12 || 12, t4, "0");
          }, $5 = f10 || function(t4, e5, n8) {
            var r6 = t4 < 12 ? "AM" : "PM";
            return n8 ? r6.toLowerCase() : r6;
          };
          return r5.replace(y7, function(t4, r6) {
            return r6 || function(t5) {
              switch (t5) {
                case "YY":
                  return String(e4.$y).slice(-2);
                case "YYYY":
                  return b6.s(e4.$y, 4, "0");
                case "M":
                  return a5 + 1;
                case "MM":
                  return b6.s(a5 + 1, 2, "0");
                case "MMM":
                  return h8(n7.monthsShort, a5, c9, 3);
                case "MMMM":
                  return h8(c9, a5);
                case "D":
                  return e4.$D;
                case "DD":
                  return b6.s(e4.$D, 2, "0");
                case "d":
                  return String(e4.$W);
                case "dd":
                  return h8(n7.weekdaysMin, e4.$W, o7, 2);
                case "ddd":
                  return h8(n7.weekdaysShort, e4.$W, o7, 3);
                case "dddd":
                  return o7[e4.$W];
                case "H":
                  return String(s5);
                case "HH":
                  return b6.s(s5, 2, "0");
                case "h":
                  return d7(1);
                case "hh":
                  return d7(2);
                case "a":
                  return $5(s5, u6, true);
                case "A":
                  return $5(s5, u6, false);
                case "m":
                  return String(u6);
                case "mm":
                  return b6.s(u6, 2, "0");
                case "s":
                  return String(e4.$s);
                case "ss":
                  return b6.s(e4.$s, 2, "0");
                case "SSS":
                  return b6.s(e4.$ms, 3, "0");
                case "Z":
                  return i7;
              }
              return null;
            }(t4) || i7.replace(":", "");
          });
        }, m5.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m5.diff = function(r5, d7, l10) {
          var $5, y8 = this, M8 = b6.p(d7), m6 = O7(r5), v7 = (m6.utcOffset() - this.utcOffset()) * e3, g5 = this - m6, D4 = function() {
            return b6.m(y8, m6);
          };
          switch (M8) {
            case h7:
              $5 = D4() / 12;
              break;
            case c8:
              $5 = D4();
              break;
            case f9:
              $5 = D4() / 3;
              break;
            case o6:
              $5 = (g5 - v7) / 6048e5;
              break;
            case a4:
              $5 = (g5 - v7) / 864e5;
              break;
            case u5:
              $5 = g5 / n6;
              break;
            case s4:
              $5 = g5 / e3;
              break;
            case i6:
              $5 = g5 / t2;
              break;
            default:
              $5 = g5;
          }
          return l10 ? $5 : b6.a($5);
        }, m5.daysInMonth = function() {
          return this.endOf(c8).$D;
        }, m5.$locale = function() {
          return D3[this.$L];
        }, m5.locale = function(t3, e4) {
          if (!t3) return this.$L;
          var n7 = this.clone(), r5 = w6(t3, e4, true);
          return r5 && (n7.$L = r5), n7;
        }, m5.clone = function() {
          return b6.w(this.$d, this);
        }, m5.toDate = function() {
          return new Date(this.valueOf());
        }, m5.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m5.toISOString = function() {
          return this.$d.toISOString();
        }, m5.toString = function() {
          return this.$d.toUTCString();
        }, M7;
      }(), k7 = _3.prototype;
      return O7.prototype = k7, [["$ms", r4], ["$s", i6], ["$m", s4], ["$H", u5], ["$W", a4], ["$M", c8], ["$y", h7], ["$D", d6]].forEach(function(t3) {
        k7[t3[1]] = function(e4) {
          return this.$g(e4, t3[0], t3[1]);
        };
      }), O7.extend = function(t3, e4) {
        return t3.$i || (t3(e4, _3, O7), t3.$i = true), O7;
      }, O7.locale = w6, O7.isDayjs = S5, O7.unix = function(t3) {
        return O7(1e3 * t3);
      }, O7.en = D3[g4], O7.Ls = D3, O7.p = {}, O7;
    });
  }
});

// node_modules/dayjs/locale/en.js
var require_en = __commonJS({
  "node_modules/dayjs/locale/en.js"(exports, module) {
    !function(e3, n6) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n6() : "function" == typeof define && define.amd ? define(n6) : (e3 = "undefined" != typeof globalThis ? globalThis : e3 || self).dayjs_locale_en = n6();
    }(exports, function() {
      "use strict";
      return { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(e3) {
        var n6 = ["th", "st", "nd", "rd"], t2 = e3 % 100;
        return "[" + e3 + (n6[(t2 - 20) % 10] || n6[t2] || n6[0]) + "]";
      } };
    });
  }
});

// node_modules/dayjs/plugin/relativeTime.js
var require_relativeTime = __commonJS({
  "node_modules/dayjs/plugin/relativeTime.js"(exports, module) {
    !function(r4, e3) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e3() : "function" == typeof define && define.amd ? define(e3) : (r4 = "undefined" != typeof globalThis ? globalThis : r4 || self).dayjs_plugin_relativeTime = e3();
    }(exports, function() {
      "use strict";
      return function(r4, e3, t2) {
        r4 = r4 || {};
        var n6 = e3.prototype, o6 = { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" };
        function i6(r5, e4, t3, o7) {
          return n6.fromToBase(r5, e4, t3, o7);
        }
        t2.en.relativeTime = o6, n6.fromToBase = function(e4, n7, i7, d7, u5) {
          for (var f9, a4, s4, l9 = i7.$locale().relativeTime || o6, h7 = r4.thresholds || [{ l: "s", r: 44, d: "second" }, { l: "m", r: 89 }, { l: "mm", r: 44, d: "minute" }, { l: "h", r: 89 }, { l: "hh", r: 21, d: "hour" }, { l: "d", r: 35 }, { l: "dd", r: 25, d: "day" }, { l: "M", r: 45 }, { l: "MM", r: 10, d: "month" }, { l: "y", r: 17 }, { l: "yy", d: "year" }], m4 = h7.length, c8 = 0; c8 < m4; c8 += 1) {
            var y7 = h7[c8];
            y7.d && (f9 = d7 ? t2(e4).diff(i7, y7.d, true) : i7.diff(e4, y7.d, true));
            var p6 = (r4.rounding || Math.round)(Math.abs(f9));
            if (s4 = f9 > 0, p6 <= y7.r || !y7.r) {
              p6 <= 1 && c8 > 0 && (y7 = h7[c8 - 1]);
              var v6 = l9[y7.l];
              u5 && (p6 = u5("" + p6)), a4 = "string" == typeof v6 ? v6.replace("%d", p6) : v6(p6, n7, y7.l, s4);
              break;
            }
          }
          if (n7) return a4;
          var M6 = s4 ? l9.future : l9.past;
          return "function" == typeof M6 ? M6(a4) : M6.replace("%s", a4);
        }, n6.to = function(r5, e4) {
          return i6(r5, e4, this, true);
        }, n6.from = function(r5, e4) {
          return i6(r5, e4, this);
        };
        var d6 = function(r5) {
          return r5.$u ? t2.utc() : t2();
        };
        n6.toNow = function(r5) {
          return this.to(d6(this), r5);
        }, n6.fromNow = function(r5) {
          return this.from(d6(this), r5);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/updateLocale.js
var require_updateLocale = __commonJS({
  "node_modules/dayjs/plugin/updateLocale.js"(exports, module) {
    !function(e3, n6) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n6() : "function" == typeof define && define.amd ? define(n6) : (e3 = "undefined" != typeof globalThis ? globalThis : e3 || self).dayjs_plugin_updateLocale = n6();
    }(exports, function() {
      "use strict";
      return function(e3, n6, t2) {
        t2.updateLocale = function(e4, n7) {
          var o6 = t2.Ls[e4];
          if (o6) return (n7 ? Object.keys(n7) : []).forEach(function(e5) {
            o6[e5] = n7[e5];
          }), o6;
        };
      };
    });
  }
});

// node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d6, b6) {
  extendStatics(d6, b6);
  function __() {
    this.constructor = d6;
  }
  d6.prototype = b6 === null ? Object.create(b6) : (__.prototype = b6.prototype, new __());
}
function __rest(s4, e3) {
  var t2 = {};
  for (var p6 in s4) if (Object.prototype.hasOwnProperty.call(s4, p6) && e3.indexOf(p6) < 0)
    t2[p6] = s4[p6];
  if (s4 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i6 = 0, p6 = Object.getOwnPropertySymbols(s4); i6 < p6.length; i6++) {
      if (e3.indexOf(p6[i6]) < 0 && Object.prototype.propertyIsEnumerable.call(s4, p6[i6]))
        t2[p6[i6]] = s4[p6[i6]];
    }
  return t2;
}
function __decorate(decorators, target, key, desc) {
  var c8 = arguments.length, r4 = c8 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d6;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r4 = Reflect.decorate(decorators, target, key, desc);
  else for (var i6 = decorators.length - 1; i6 >= 0; i6--) if (d6 = decorators[i6]) r4 = (c8 < 3 ? d6(r4) : c8 > 3 ? d6(target, key, r4) : d6(target, key)) || r4;
  return c8 > 3 && r4 && Object.defineProperty(target, key, r4), r4;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P6, generator) {
  function adopt(value) {
    return value instanceof P6 ? value : new P6(function(resolve) {
      resolve(value);
    });
  }
  return new (P6 || (P6 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _3 = { label: 0, sent: function() {
    if (t2[0] & 1) throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f9, y7, t2, g4;
  return g4 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g4[Symbol.iterator] = function() {
    return this;
  }), g4;
  function verb(n6) {
    return function(v6) {
      return step([n6, v6]);
    };
  }
  function step(op) {
    if (f9) throw new TypeError("Generator is already executing.");
    while (_3) try {
      if (f9 = 1, y7 && (t2 = op[0] & 2 ? y7["return"] : op[0] ? y7["throw"] || ((t2 = y7["return"]) && t2.call(y7), 0) : y7.next) && !(t2 = t2.call(y7, op[1])).done) return t2;
      if (y7 = 0, t2) op = [op[0] & 2, t2.value];
      switch (op[0]) {
        case 0:
        case 1:
          t2 = op;
          break;
        case 4:
          _3.label++;
          return { value: op[1], done: false };
        case 5:
          _3.label++;
          y7 = op[1];
          op = [0];
          continue;
        case 7:
          op = _3.ops.pop();
          _3.trys.pop();
          continue;
        default:
          if (!(t2 = _3.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _3 = 0;
            continue;
          }
          if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
            _3.label = op[1];
            break;
          }
          if (op[0] === 6 && _3.label < t2[1]) {
            _3.label = t2[1];
            t2 = op;
            break;
          }
          if (t2 && _3.label < t2[2]) {
            _3.label = t2[2];
            _3.ops.push(op);
            break;
          }
          if (t2[2]) _3.ops.pop();
          _3.trys.pop();
          continue;
      }
      op = body.call(thisArg, _3);
    } catch (e3) {
      op = [6, e3];
      y7 = 0;
    } finally {
      f9 = t2 = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding(o6, m4, k7, k22) {
  if (k22 === void 0) k22 = k7;
  o6[k22] = m4[k7];
}
function __exportStar(m4, exports) {
  for (var p6 in m4) if (p6 !== "default" && !exports.hasOwnProperty(p6)) exports[p6] = m4[p6];
}
function __values(o6) {
  var s4 = typeof Symbol === "function" && Symbol.iterator, m4 = s4 && o6[s4], i6 = 0;
  if (m4) return m4.call(o6);
  if (o6 && typeof o6.length === "number") return {
    next: function() {
      if (o6 && i6 >= o6.length) o6 = void 0;
      return { value: o6 && o6[i6++], done: !o6 };
    }
  };
  throw new TypeError(s4 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o6, n6) {
  var m4 = typeof Symbol === "function" && o6[Symbol.iterator];
  if (!m4) return o6;
  var i6 = m4.call(o6), r4, ar3 = [], e3;
  try {
    while ((n6 === void 0 || n6-- > 0) && !(r4 = i6.next()).done) ar3.push(r4.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r4 && !r4.done && (m4 = i6["return"])) m4.call(i6);
    } finally {
      if (e3) throw e3.error;
    }
  }
  return ar3;
}
function __spread() {
  for (var ar3 = [], i6 = 0; i6 < arguments.length; i6++)
    ar3 = ar3.concat(__read(arguments[i6]));
  return ar3;
}
function __spreadArrays() {
  for (var s4 = 0, i6 = 0, il = arguments.length; i6 < il; i6++) s4 += arguments[i6].length;
  for (var r4 = Array(s4), k7 = 0, i6 = 0; i6 < il; i6++)
    for (var a4 = arguments[i6], j5 = 0, jl = a4.length; j5 < jl; j5++, k7++)
      r4[k7] = a4[j5];
  return r4;
}
function __await(v6) {
  return this instanceof __await ? (this.v = v6, this) : new __await(v6);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g4 = generator.apply(thisArg, _arguments || []), i6, q2 = [];
  return i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
    return this;
  }, i6;
  function verb(n6) {
    if (g4[n6]) i6[n6] = function(v6) {
      return new Promise(function(a4, b6) {
        q2.push([n6, v6, a4, b6]) > 1 || resume(n6, v6);
      });
    };
  }
  function resume(n6, v6) {
    try {
      step(g4[n6](v6));
    } catch (e3) {
      settle(q2[0][3], e3);
    }
  }
  function step(r4) {
    r4.value instanceof __await ? Promise.resolve(r4.value.v).then(fulfill, reject) : settle(q2[0][2], r4);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f9, v6) {
    if (f9(v6), q2.shift(), q2.length) resume(q2[0][0], q2[0][1]);
  }
}
function __asyncDelegator(o6) {
  var i6, p6;
  return i6 = {}, verb("next"), verb("throw", function(e3) {
    throw e3;
  }), verb("return"), i6[Symbol.iterator] = function() {
    return this;
  }, i6;
  function verb(n6, f9) {
    i6[n6] = o6[n6] ? function(v6) {
      return (p6 = !p6) ? { value: __await(o6[n6](v6)), done: n6 === "return" } : f9 ? f9(v6) : v6;
    } : f9;
  }
}
function __asyncValues(o6) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m4 = o6[Symbol.asyncIterator], i6;
  return m4 ? m4.call(o6) : (o6 = typeof __values === "function" ? __values(o6) : o6[Symbol.iterator](), i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
    return this;
  }, i6);
  function verb(n6) {
    i6[n6] = o6[n6] && function(v6) {
      return new Promise(function(resolve, reject) {
        v6 = o6[n6](v6), settle(resolve, reject, v6.done, v6.value);
      });
    };
  }
  function settle(resolve, reject, d6, v6) {
    Promise.resolve(v6).then(function(v7) {
      resolve({ value: v7, done: d6 });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) {
    for (var k7 in mod) if (Object.hasOwnProperty.call(mod, k7)) result[k7] = mod[k7];
  }
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics, __assign;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.js"() {
    extendStatics = function(d6, b6) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d7, b7) {
        d7.__proto__ = b7;
      } || function(d7, b7) {
        for (var p6 in b7) if (b7.hasOwnProperty(p6)) d7[p6] = b7[p6];
      };
      return extendStatics(d6, b6);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t2) {
        for (var s4, i6 = 1, n6 = arguments.length; i6 < n6; i6++) {
          s4 = arguments[i6];
          for (var p6 in s4) if (Object.prototype.hasOwnProperty.call(s4, p6)) t2[p6] = s4[p6];
        }
        return t2;
      };
      return __assign.apply(this, arguments);
    };
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/delay.js
var require_delay = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/delay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delay = void 0;
    function delay(timeout) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve(true);
        }, timeout);
      });
    }
    exports.delay = delay;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/misc.js
var require_misc = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/misc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;
    exports.ONE_HUNDRED = 100;
    exports.ONE_THOUSAND = 1e3;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/time.js
var require_time = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/time.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;
    exports.ONE_SECOND = 1;
    exports.FIVE_SECONDS = 5;
    exports.TEN_SECONDS = 10;
    exports.THIRTY_SECONDS = 30;
    exports.SIXTY_SECONDS = 60;
    exports.ONE_MINUTE = exports.SIXTY_SECONDS;
    exports.FIVE_MINUTES = exports.ONE_MINUTE * 5;
    exports.TEN_MINUTES = exports.ONE_MINUTE * 10;
    exports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;
    exports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;
    exports.ONE_HOUR = exports.SIXTY_MINUTES;
    exports.THREE_HOURS = exports.ONE_HOUR * 3;
    exports.SIX_HOURS = exports.ONE_HOUR * 6;
    exports.TWELVE_HOURS = exports.ONE_HOUR * 12;
    exports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;
    exports.ONE_DAY = exports.TWENTY_FOUR_HOURS;
    exports.THREE_DAYS = exports.ONE_DAY * 3;
    exports.FIVE_DAYS = exports.ONE_DAY * 5;
    exports.SEVEN_DAYS = exports.ONE_DAY * 7;
    exports.THIRTY_DAYS = exports.ONE_DAY * 30;
    exports.ONE_WEEK = exports.SEVEN_DAYS;
    exports.TWO_WEEKS = exports.ONE_WEEK * 2;
    exports.THREE_WEEKS = exports.ONE_WEEK * 3;
    exports.FOUR_WEEKS = exports.ONE_WEEK * 4;
    exports.ONE_YEAR = exports.ONE_DAY * 365;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/index.js
var require_constants = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_misc(), exports);
    tslib_1.__exportStar(require_time(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/convert.js
var require_convert = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/convert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromMiliseconds = exports.toMiliseconds = void 0;
    var constants_1 = require_constants();
    function toMiliseconds(seconds) {
      return seconds * constants_1.ONE_THOUSAND;
    }
    exports.toMiliseconds = toMiliseconds;
    function fromMiliseconds(miliseconds) {
      return Math.floor(miliseconds / constants_1.ONE_THOUSAND);
    }
    exports.fromMiliseconds = fromMiliseconds;
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_delay(), exports);
    tslib_1.__exportStar(require_convert(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/watch.js
var require_watch = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Watch = void 0;
    var Watch = class {
      constructor() {
        this.timestamps = /* @__PURE__ */ new Map();
      }
      start(label) {
        if (this.timestamps.has(label)) {
          throw new Error(`Watch already started for label: ${label}`);
        }
        this.timestamps.set(label, { started: Date.now() });
      }
      stop(label) {
        const timestamp = this.get(label);
        if (typeof timestamp.elapsed !== "undefined") {
          throw new Error(`Watch already stopped for label: ${label}`);
        }
        const elapsed = Date.now() - timestamp.started;
        this.timestamps.set(label, { started: timestamp.started, elapsed });
      }
      get(label) {
        const timestamp = this.timestamps.get(label);
        if (typeof timestamp === "undefined") {
          throw new Error(`No timestamp found for label: ${label}`);
        }
        return timestamp;
      }
      elapsed(label) {
        const timestamp = this.get(label);
        const elapsed = timestamp.elapsed || Date.now() - timestamp.started;
        return elapsed;
      }
    };
    exports.Watch = Watch;
    exports.default = Watch;
  }
});

// node_modules/@walletconnect/time/dist/cjs/types/watch.js
var require_watch2 = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/types/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IWatch = void 0;
    var IWatch = class {
    };
    exports.IWatch = IWatch;
  }
});

// node_modules/@walletconnect/time/dist/cjs/types/index.js
var require_types = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_watch2(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_utils(), exports);
    tslib_1.__exportStar(require_watch(), exports);
    tslib_1.__exportStar(require_types(), exports);
    tslib_1.__exportStar(require_constants(), exports);
  }
});

// node_modules/quick-format-unescaped/index.js
var require_quick_format_unescaped = __commonJS({
  "node_modules/quick-format-unescaped/index.js"(exports, module) {
    "use strict";
    function tryStringify(o6) {
      try {
        return JSON.stringify(o6);
      } catch (e3) {
        return '"[Circular]"';
      }
    }
    module.exports = format;
    function format(f9, args, opts) {
      var ss2 = opts && opts.stringify || tryStringify;
      var offset = 1;
      if (typeof f9 === "object" && f9 !== null) {
        var len = args.length + offset;
        if (len === 1) return f9;
        var objects = new Array(len);
        objects[0] = ss2(f9);
        for (var index = 1; index < len; index++) {
          objects[index] = ss2(args[index]);
        }
        return objects.join(" ");
      }
      if (typeof f9 !== "string") {
        return f9;
      }
      var argLen = args.length;
      if (argLen === 0) return f9;
      var str = "";
      var a4 = 1 - offset;
      var lastPos = -1;
      var flen = f9 && f9.length || 0;
      for (var i6 = 0; i6 < flen; ) {
        if (f9.charCodeAt(i6) === 37 && i6 + 1 < flen) {
          lastPos = lastPos > -1 ? lastPos : 0;
          switch (f9.charCodeAt(i6 + 1)) {
            case 100:
            case 102:
              if (a4 >= argLen)
                break;
              if (args[a4] == null) break;
              if (lastPos < i6)
                str += f9.slice(lastPos, i6);
              str += Number(args[a4]);
              lastPos = i6 + 2;
              i6++;
              break;
            case 105:
              if (a4 >= argLen)
                break;
              if (args[a4] == null) break;
              if (lastPos < i6)
                str += f9.slice(lastPos, i6);
              str += Math.floor(Number(args[a4]));
              lastPos = i6 + 2;
              i6++;
              break;
            case 79:
            case 111:
            case 106:
              if (a4 >= argLen)
                break;
              if (args[a4] === void 0) break;
              if (lastPos < i6)
                str += f9.slice(lastPos, i6);
              var type = typeof args[a4];
              if (type === "string") {
                str += "'" + args[a4] + "'";
                lastPos = i6 + 2;
                i6++;
                break;
              }
              if (type === "function") {
                str += args[a4].name || "<anonymous>";
                lastPos = i6 + 2;
                i6++;
                break;
              }
              str += ss2(args[a4]);
              lastPos = i6 + 2;
              i6++;
              break;
            case 115:
              if (a4 >= argLen)
                break;
              if (lastPos < i6)
                str += f9.slice(lastPos, i6);
              str += String(args[a4]);
              lastPos = i6 + 2;
              i6++;
              break;
            case 37:
              if (lastPos < i6)
                str += f9.slice(lastPos, i6);
              str += "%";
              lastPos = i6 + 2;
              i6++;
              a4--;
              break;
          }
          ++a4;
        }
        ++i6;
      }
      if (lastPos === -1)
        return f9;
      else if (lastPos < flen) {
        str += f9.slice(lastPos);
      }
      return str;
    }
  }
});

// node_modules/pino/browser.js
var require_browser = __commonJS({
  "node_modules/pino/browser.js"(exports, module) {
    "use strict";
    var format = require_quick_format_unescaped();
    module.exports = pino;
    var _console = pfGlobalThisOrFallback().console || {};
    var stdSerializers = {
      mapHttpRequest: mock,
      mapHttpResponse: mock,
      wrapRequestSerializer: passthrough,
      wrapResponseSerializer: passthrough,
      wrapErrorSerializer: passthrough,
      req: mock,
      res: mock,
      err: asErrValue
    };
    function shouldSerialize(serialize, serializers) {
      if (Array.isArray(serialize)) {
        const hasToFilter = serialize.filter(function(k7) {
          return k7 !== "!stdSerializers.err";
        });
        return hasToFilter;
      } else if (serialize === true) {
        return Object.keys(serializers);
      }
      return false;
    }
    function pino(opts) {
      opts = opts || {};
      opts.browser = opts.browser || {};
      const transmit2 = opts.browser.transmit;
      if (transmit2 && typeof transmit2.send !== "function") {
        throw Error("pino: transmit option must have a send function");
      }
      const proto = opts.browser.write || _console;
      if (opts.browser.write) opts.browser.asObject = true;
      const serializers = opts.serializers || {};
      const serialize = shouldSerialize(opts.browser.serialize, serializers);
      let stdErrSerialize = opts.browser.serialize;
      if (Array.isArray(opts.browser.serialize) && opts.browser.serialize.indexOf("!stdSerializers.err") > -1) stdErrSerialize = false;
      const levels = ["error", "fatal", "warn", "info", "debug", "trace"];
      if (typeof proto === "function") {
        proto.error = proto.fatal = proto.warn = proto.info = proto.debug = proto.trace = proto;
      }
      if (opts.enabled === false) opts.level = "silent";
      const level = opts.level || "info";
      const logger = Object.create(proto);
      if (!logger.log) logger.log = noop;
      Object.defineProperty(logger, "levelVal", {
        get: getLevelVal
      });
      Object.defineProperty(logger, "level", {
        get: getLevel,
        set: setLevel
      });
      const setOpts = {
        transmit: transmit2,
        serialize,
        asObject: opts.browser.asObject,
        levels,
        timestamp: getTimeFunction(opts)
      };
      logger.levels = pino.levels;
      logger.level = level;
      logger.setMaxListeners = logger.getMaxListeners = logger.emit = logger.addListener = logger.on = logger.prependListener = logger.once = logger.prependOnceListener = logger.removeListener = logger.removeAllListeners = logger.listeners = logger.listenerCount = logger.eventNames = logger.write = logger.flush = noop;
      logger.serializers = serializers;
      logger._serialize = serialize;
      logger._stdErrSerialize = stdErrSerialize;
      logger.child = child;
      if (transmit2) logger._logEvent = createLogEventShape();
      function getLevelVal() {
        return this.level === "silent" ? Infinity : this.levels.values[this.level];
      }
      function getLevel() {
        return this._level;
      }
      function setLevel(level2) {
        if (level2 !== "silent" && !this.levels.values[level2]) {
          throw Error("unknown level " + level2);
        }
        this._level = level2;
        set2(setOpts, logger, "error", "log");
        set2(setOpts, logger, "fatal", "error");
        set2(setOpts, logger, "warn", "error");
        set2(setOpts, logger, "info", "log");
        set2(setOpts, logger, "debug", "log");
        set2(setOpts, logger, "trace", "log");
      }
      function child(bindings, childOptions) {
        if (!bindings) {
          throw new Error("missing bindings for child Pino");
        }
        childOptions = childOptions || {};
        if (serialize && bindings.serializers) {
          childOptions.serializers = bindings.serializers;
        }
        const childOptionsSerializers = childOptions.serializers;
        if (serialize && childOptionsSerializers) {
          var childSerializers = Object.assign({}, serializers, childOptionsSerializers);
          var childSerialize = opts.browser.serialize === true ? Object.keys(childSerializers) : serialize;
          delete bindings.serializers;
          applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize);
        }
        function Child(parent) {
          this._childLevel = (parent._childLevel | 0) + 1;
          this.error = bind(parent, bindings, "error");
          this.fatal = bind(parent, bindings, "fatal");
          this.warn = bind(parent, bindings, "warn");
          this.info = bind(parent, bindings, "info");
          this.debug = bind(parent, bindings, "debug");
          this.trace = bind(parent, bindings, "trace");
          if (childSerializers) {
            this.serializers = childSerializers;
            this._serialize = childSerialize;
          }
          if (transmit2) {
            this._logEvent = createLogEventShape(
              [].concat(parent._logEvent.bindings, bindings)
            );
          }
        }
        Child.prototype = this;
        return new Child(this);
      }
      return logger;
    }
    pino.levels = {
      values: {
        fatal: 60,
        error: 50,
        warn: 40,
        info: 30,
        debug: 20,
        trace: 10
      },
      labels: {
        10: "trace",
        20: "debug",
        30: "info",
        40: "warn",
        50: "error",
        60: "fatal"
      }
    };
    pino.stdSerializers = stdSerializers;
    pino.stdTimeFunctions = Object.assign({}, { nullTime, epochTime, unixTime, isoTime });
    function set2(opts, logger, level, fallback2) {
      const proto = Object.getPrototypeOf(logger);
      logger[level] = logger.levelVal > logger.levels.values[level] ? noop : proto[level] ? proto[level] : _console[level] || _console[fallback2] || noop;
      wrap(opts, logger, level);
    }
    function wrap(opts, logger, level) {
      if (!opts.transmit && logger[level] === noop) return;
      logger[level] = /* @__PURE__ */ function(write) {
        return function LOG() {
          const ts3 = opts.timestamp();
          const args = new Array(arguments.length);
          const proto = Object.getPrototypeOf && Object.getPrototypeOf(this) === _console ? _console : this;
          for (var i6 = 0; i6 < args.length; i6++) args[i6] = arguments[i6];
          if (opts.serialize && !opts.asObject) {
            applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize);
          }
          if (opts.asObject) write.call(proto, asObject(this, level, args, ts3));
          else write.apply(proto, args);
          if (opts.transmit) {
            const transmitLevel = opts.transmit.level || logger.level;
            const transmitValue = pino.levels.values[transmitLevel];
            const methodValue = pino.levels.values[level];
            if (methodValue < transmitValue) return;
            transmit(this, {
              ts: ts3,
              methodLevel: level,
              methodValue,
              transmitLevel,
              transmitValue: pino.levels.values[opts.transmit.level || logger.level],
              send: opts.transmit.send,
              val: logger.levelVal
            }, args);
          }
        };
      }(logger[level]);
    }
    function asObject(logger, level, args, ts3) {
      if (logger._serialize) applySerializers(args, logger._serialize, logger.serializers, logger._stdErrSerialize);
      const argsCloned = args.slice();
      let msg = argsCloned[0];
      const o6 = {};
      if (ts3) {
        o6.time = ts3;
      }
      o6.level = pino.levels.values[level];
      let lvl = (logger._childLevel | 0) + 1;
      if (lvl < 1) lvl = 1;
      if (msg !== null && typeof msg === "object") {
        while (lvl-- && typeof argsCloned[0] === "object") {
          Object.assign(o6, argsCloned.shift());
        }
        msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : void 0;
      } else if (typeof msg === "string") msg = format(argsCloned.shift(), argsCloned);
      if (msg !== void 0) o6.msg = msg;
      return o6;
    }
    function applySerializers(args, serialize, serializers, stdErrSerialize) {
      for (const i6 in args) {
        if (stdErrSerialize && args[i6] instanceof Error) {
          args[i6] = pino.stdSerializers.err(args[i6]);
        } else if (typeof args[i6] === "object" && !Array.isArray(args[i6])) {
          for (const k7 in args[i6]) {
            if (serialize && serialize.indexOf(k7) > -1 && k7 in serializers) {
              args[i6][k7] = serializers[k7](args[i6][k7]);
            }
          }
        }
      }
    }
    function bind(parent, bindings, level) {
      return function() {
        const args = new Array(1 + arguments.length);
        args[0] = bindings;
        for (var i6 = 1; i6 < args.length; i6++) {
          args[i6] = arguments[i6 - 1];
        }
        return parent[level].apply(this, args);
      };
    }
    function transmit(logger, opts, args) {
      const send = opts.send;
      const ts3 = opts.ts;
      const methodLevel = opts.methodLevel;
      const methodValue = opts.methodValue;
      const val = opts.val;
      const bindings = logger._logEvent.bindings;
      applySerializers(
        args,
        logger._serialize || Object.keys(logger.serializers),
        logger.serializers,
        logger._stdErrSerialize === void 0 ? true : logger._stdErrSerialize
      );
      logger._logEvent.ts = ts3;
      logger._logEvent.messages = args.filter(function(arg) {
        return bindings.indexOf(arg) === -1;
      });
      logger._logEvent.level.label = methodLevel;
      logger._logEvent.level.value = methodValue;
      send(methodLevel, logger._logEvent, val);
      logger._logEvent = createLogEventShape(bindings);
    }
    function createLogEventShape(bindings) {
      return {
        ts: 0,
        messages: [],
        bindings: bindings || [],
        level: { label: "", value: 0 }
      };
    }
    function asErrValue(err) {
      const obj = {
        type: err.constructor.name,
        msg: err.message,
        stack: err.stack
      };
      for (const key in err) {
        if (obj[key] === void 0) {
          obj[key] = err[key];
        }
      }
      return obj;
    }
    function getTimeFunction(opts) {
      if (typeof opts.timestamp === "function") {
        return opts.timestamp;
      }
      if (opts.timestamp === false) {
        return nullTime;
      }
      return epochTime;
    }
    function mock() {
      return {};
    }
    function passthrough(a4) {
      return a4;
    }
    function noop() {
    }
    function nullTime() {
      return false;
    }
    function epochTime() {
      return Date.now();
    }
    function unixTime() {
      return Math.round(Date.now() / 1e3);
    }
    function isoTime() {
      return new Date(Date.now()).toISOString();
    }
    function pfGlobalThisOrFallback() {
      function defd(o6) {
        return typeof o6 !== "undefined" && o6;
      }
      try {
        if (typeof globalThis !== "undefined") return globalThis;
        Object.defineProperty(Object.prototype, "globalThis", {
          get: function() {
            delete Object.prototype.globalThis;
            return this.globalThis = this;
          },
          configurable: true
        });
        return globalThis;
      } catch (e3) {
        return defd(self) || defd(window) || defd(this) || {};
      }
    }
  }
});

// node_modules/@walletconnect/window-getters/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow(name2) {
      let res = void 0;
      if (typeof window !== "undefined" && typeof window[name2] !== "undefined") {
        res = window[name2];
      }
      return res;
    }
    exports.getFromWindow = getFromWindow;
    function getFromWindowOrThrow(name2) {
      const res = getFromWindow(name2);
      if (!res) {
        throw new Error(`${name2} is not defined in Window`);
      }
      return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow;
    function getDocumentOrThrow() {
      return getFromWindowOrThrow("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow;
    function getDocument() {
      return getFromWindow("document");
    }
    exports.getDocument = getDocument;
    function getNavigatorOrThrow() {
      return getFromWindowOrThrow("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow;
    function getNavigator() {
      return getFromWindow("navigator");
    }
    exports.getNavigator = getNavigator;
    function getLocationOrThrow() {
      return getFromWindowOrThrow("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow;
    function getLocation() {
      return getFromWindow("location");
    }
    exports.getLocation = getLocation;
    function getCryptoOrThrow() {
      return getFromWindowOrThrow("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow;
    function getCrypto() {
      return getFromWindow("crypto");
    }
    exports.getCrypto = getCrypto;
    function getLocalStorageOrThrow() {
      return getFromWindowOrThrow("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow;
    function getLocalStorage() {
      return getFromWindow("localStorage");
    }
    exports.getLocalStorage = getLocalStorage;
  }
});

// node_modules/@walletconnect/window-metadata/dist/cjs/index.js
var require_cjs3 = __commonJS({
  "node_modules/@walletconnect/window-metadata/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWindowMetadata = void 0;
    var window_getters_1 = require_cjs2();
    function getWindowMetadata() {
      let doc;
      let loc;
      try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
      } catch (e3) {
        return null;
      }
      function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons2 = [];
        for (let i6 = 0; i6 < links.length; i6++) {
          const link = links[i6];
          const rel = link.getAttribute("rel");
          if (rel) {
            if (rel.toLowerCase().indexOf("icon") > -1) {
              const href = link.getAttribute("href");
              if (href) {
                if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
                  let absoluteHref = loc.protocol + "//" + loc.host;
                  if (href.indexOf("/") === 0) {
                    absoluteHref += href;
                  } else {
                    const path = loc.pathname.split("/");
                    path.pop();
                    const finalPath = path.join("/");
                    absoluteHref += finalPath + "/" + href;
                  }
                  icons2.push(absoluteHref);
                } else if (href.indexOf("//") === 0) {
                  const absoluteUrl = loc.protocol + href;
                  icons2.push(absoluteUrl);
                } else {
                  icons2.push(href);
                }
              }
            }
          }
        }
        return icons2;
      }
      function getWindowMetadataOfAny(...args) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i6 = 0; i6 < metaTags.length; i6++) {
          const tag = metaTags[i6];
          const attributes = ["itemprop", "property", "name"].map((target) => tag.getAttribute(target)).filter((attr) => {
            if (attr) {
              return args.includes(attr);
            }
            return false;
          });
          if (attributes.length && attributes) {
            const content = tag.getAttribute("content");
            if (content) {
              return content;
            }
          }
        }
        return "";
      }
      function getName() {
        let name3 = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name3) {
          name3 = doc.title;
        }
        return name3;
      }
      function getDescription() {
        const description2 = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description2;
      }
      const name2 = getName();
      const description = getDescription();
      const url = loc.origin;
      const icons = getIcons();
      const meta = {
        description,
        url,
        icons,
        name: name2
      };
      return meta;
    }
    exports.getWindowMetadata = getWindowMetadata;
  }
});

// node_modules/blakejs/util.js
var require_util = __commonJS({
  "node_modules/blakejs/util.js"(exports, module) {
    var ERROR_MSG_INPUT = "Input must be an string, Buffer or Uint8Array";
    function normalizeInput(input) {
      let ret;
      if (input instanceof Uint8Array) {
        ret = input;
      } else if (typeof input === "string") {
        const encoder = new TextEncoder();
        ret = encoder.encode(input);
      } else {
        throw new Error(ERROR_MSG_INPUT);
      }
      return ret;
    }
    function toHex3(bytes) {
      return Array.prototype.map.call(bytes, function(n6) {
        return (n6 < 16 ? "0" : "") + n6.toString(16);
      }).join("");
    }
    function uint32ToHex(val) {
      return (4294967296 + val).toString(16).substring(1);
    }
    function debugPrint(label, arr, size4) {
      let msg = "\n" + label + " = ";
      for (let i6 = 0; i6 < arr.length; i6 += 2) {
        if (size4 === 32) {
          msg += uint32ToHex(arr[i6]).toUpperCase();
          msg += " ";
          msg += uint32ToHex(arr[i6 + 1]).toUpperCase();
        } else if (size4 === 64) {
          msg += uint32ToHex(arr[i6 + 1]).toUpperCase();
          msg += uint32ToHex(arr[i6]).toUpperCase();
        } else throw new Error("Invalid size " + size4);
        if (i6 % 6 === 4) {
          msg += "\n" + new Array(label.length + 4).join(" ");
        } else if (i6 < arr.length - 2) {
          msg += " ";
        }
      }
      console.log(msg);
    }
    function testSpeed(hashFn, N13, M6) {
      let startMs = (/* @__PURE__ */ new Date()).getTime();
      const input = new Uint8Array(N13);
      for (let i6 = 0; i6 < N13; i6++) {
        input[i6] = i6 % 256;
      }
      const genMs = (/* @__PURE__ */ new Date()).getTime();
      console.log("Generated random input in " + (genMs - startMs) + "ms");
      startMs = genMs;
      for (let i6 = 0; i6 < M6; i6++) {
        const hashHex = hashFn(input);
        const hashMs = (/* @__PURE__ */ new Date()).getTime();
        const ms3 = hashMs - startMs;
        startMs = hashMs;
        console.log("Hashed in " + ms3 + "ms: " + hashHex.substring(0, 20) + "...");
        console.log(
          Math.round(N13 / (1 << 20) / (ms3 / 1e3) * 100) / 100 + " MB PER SECOND"
        );
      }
    }
    module.exports = {
      normalizeInput,
      toHex: toHex3,
      debugPrint,
      testSpeed
    };
  }
});

// node_modules/blakejs/blake2b.js
var require_blake2b = __commonJS({
  "node_modules/blakejs/blake2b.js"(exports, module) {
    var util = require_util();
    function ADD64AA(v7, a4, b6) {
      const o0 = v7[a4] + v7[b6];
      let o1 = v7[a4 + 1] + v7[b6 + 1];
      if (o0 >= 4294967296) {
        o1++;
      }
      v7[a4] = o0;
      v7[a4 + 1] = o1;
    }
    function ADD64AC(v7, a4, b0, b1) {
      let o0 = v7[a4] + b0;
      if (b0 < 0) {
        o0 += 4294967296;
      }
      let o1 = v7[a4 + 1] + b1;
      if (o0 >= 4294967296) {
        o1++;
      }
      v7[a4] = o0;
      v7[a4 + 1] = o1;
    }
    function B2B_GET32(arr, i6) {
      return arr[i6] ^ arr[i6 + 1] << 8 ^ arr[i6 + 2] << 16 ^ arr[i6 + 3] << 24;
    }
    function B2B_G(a4, b6, c8, d6, ix, iy) {
      const x0 = m4[ix];
      const x1 = m4[ix + 1];
      const y0 = m4[iy];
      const y1 = m4[iy + 1];
      ADD64AA(v6, a4, b6);
      ADD64AC(v6, a4, x0, x1);
      let xor0 = v6[d6] ^ v6[a4];
      let xor1 = v6[d6 + 1] ^ v6[a4 + 1];
      v6[d6] = xor1;
      v6[d6 + 1] = xor0;
      ADD64AA(v6, c8, d6);
      xor0 = v6[b6] ^ v6[c8];
      xor1 = v6[b6 + 1] ^ v6[c8 + 1];
      v6[b6] = xor0 >>> 24 ^ xor1 << 8;
      v6[b6 + 1] = xor1 >>> 24 ^ xor0 << 8;
      ADD64AA(v6, a4, b6);
      ADD64AC(v6, a4, y0, y1);
      xor0 = v6[d6] ^ v6[a4];
      xor1 = v6[d6 + 1] ^ v6[a4 + 1];
      v6[d6] = xor0 >>> 16 ^ xor1 << 16;
      v6[d6 + 1] = xor1 >>> 16 ^ xor0 << 16;
      ADD64AA(v6, c8, d6);
      xor0 = v6[b6] ^ v6[c8];
      xor1 = v6[b6 + 1] ^ v6[c8 + 1];
      v6[b6] = xor1 >>> 31 ^ xor0 << 1;
      v6[b6 + 1] = xor0 >>> 31 ^ xor1 << 1;
    }
    var BLAKE2B_IV32 = new Uint32Array([
      4089235720,
      1779033703,
      2227873595,
      3144134277,
      4271175723,
      1013904242,
      1595750129,
      2773480762,
      2917565137,
      1359893119,
      725511199,
      2600822924,
      4215389547,
      528734635,
      327033209,
      1541459225
    ]);
    var SIGMA8 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3
    ];
    var SIGMA82 = new Uint8Array(
      SIGMA8.map(function(x6) {
        return x6 * 2;
      })
    );
    var v6 = new Uint32Array(32);
    var m4 = new Uint32Array(32);
    function blake2bCompress(ctx, last) {
      let i6 = 0;
      for (i6 = 0; i6 < 16; i6++) {
        v6[i6] = ctx.h[i6];
        v6[i6 + 16] = BLAKE2B_IV32[i6];
      }
      v6[24] = v6[24] ^ ctx.t;
      v6[25] = v6[25] ^ ctx.t / 4294967296;
      if (last) {
        v6[28] = ~v6[28];
        v6[29] = ~v6[29];
      }
      for (i6 = 0; i6 < 32; i6++) {
        m4[i6] = B2B_GET32(ctx.b, 4 * i6);
      }
      for (i6 = 0; i6 < 12; i6++) {
        B2B_G(0, 8, 16, 24, SIGMA82[i6 * 16 + 0], SIGMA82[i6 * 16 + 1]);
        B2B_G(2, 10, 18, 26, SIGMA82[i6 * 16 + 2], SIGMA82[i6 * 16 + 3]);
        B2B_G(4, 12, 20, 28, SIGMA82[i6 * 16 + 4], SIGMA82[i6 * 16 + 5]);
        B2B_G(6, 14, 22, 30, SIGMA82[i6 * 16 + 6], SIGMA82[i6 * 16 + 7]);
        B2B_G(0, 10, 20, 30, SIGMA82[i6 * 16 + 8], SIGMA82[i6 * 16 + 9]);
        B2B_G(2, 12, 22, 24, SIGMA82[i6 * 16 + 10], SIGMA82[i6 * 16 + 11]);
        B2B_G(4, 14, 16, 26, SIGMA82[i6 * 16 + 12], SIGMA82[i6 * 16 + 13]);
        B2B_G(6, 8, 18, 28, SIGMA82[i6 * 16 + 14], SIGMA82[i6 * 16 + 15]);
      }
      for (i6 = 0; i6 < 16; i6++) {
        ctx.h[i6] = ctx.h[i6] ^ v6[i6] ^ v6[i6 + 16];
      }
    }
    var parameterBlock = new Uint8Array([
      0,
      0,
      0,
      0,
      //  0: outlen, keylen, fanout, depth
      0,
      0,
      0,
      0,
      //  4: leaf length, sequential mode
      0,
      0,
      0,
      0,
      //  8: node offset
      0,
      0,
      0,
      0,
      // 12: node offset
      0,
      0,
      0,
      0,
      // 16: node depth, inner length, rfu
      0,
      0,
      0,
      0,
      // 20: rfu
      0,
      0,
      0,
      0,
      // 24: rfu
      0,
      0,
      0,
      0,
      // 28: rfu
      0,
      0,
      0,
      0,
      // 32: salt
      0,
      0,
      0,
      0,
      // 36: salt
      0,
      0,
      0,
      0,
      // 40: salt
      0,
      0,
      0,
      0,
      // 44: salt
      0,
      0,
      0,
      0,
      // 48: personal
      0,
      0,
      0,
      0,
      // 52: personal
      0,
      0,
      0,
      0,
      // 56: personal
      0,
      0,
      0,
      0
      // 60: personal
    ]);
    function blake2bInit(outlen, key, salt, personal) {
      if (outlen === 0 || outlen > 64) {
        throw new Error("Illegal output length, expected 0 < length <= 64");
      }
      if (key && key.length > 64) {
        throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");
      }
      if (salt && salt.length !== 16) {
        throw new Error("Illegal salt, expected Uint8Array with length is 16");
      }
      if (personal && personal.length !== 16) {
        throw new Error("Illegal personal, expected Uint8Array with length is 16");
      }
      const ctx = {
        b: new Uint8Array(128),
        h: new Uint32Array(16),
        t: 0,
        // input count
        c: 0,
        // pointer within buffer
        outlen
        // output length in bytes
      };
      parameterBlock.fill(0);
      parameterBlock[0] = outlen;
      if (key) parameterBlock[1] = key.length;
      parameterBlock[2] = 1;
      parameterBlock[3] = 1;
      if (salt) parameterBlock.set(salt, 32);
      if (personal) parameterBlock.set(personal, 48);
      for (let i6 = 0; i6 < 16; i6++) {
        ctx.h[i6] = BLAKE2B_IV32[i6] ^ B2B_GET32(parameterBlock, i6 * 4);
      }
      if (key) {
        blake2bUpdate(ctx, key);
        ctx.c = 128;
      }
      return ctx;
    }
    function blake2bUpdate(ctx, input) {
      for (let i6 = 0; i6 < input.length; i6++) {
        if (ctx.c === 128) {
          ctx.t += ctx.c;
          blake2bCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i6];
      }
    }
    function blake2bFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 128) {
        ctx.b[ctx.c++] = 0;
      }
      blake2bCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i6 = 0; i6 < ctx.outlen; i6++) {
        out[i6] = ctx.h[i6 >> 2] >> 8 * (i6 & 3);
      }
      return out;
    }
    function blake2b(input, key, outlen, salt, personal) {
      outlen = outlen || 64;
      input = util.normalizeInput(input);
      if (salt) {
        salt = util.normalizeInput(salt);
      }
      if (personal) {
        personal = util.normalizeInput(personal);
      }
      const ctx = blake2bInit(outlen, key, salt, personal);
      blake2bUpdate(ctx, input);
      return blake2bFinal(ctx);
    }
    function blake2bHex(input, key, outlen, salt, personal) {
      const output = blake2b(input, key, outlen, salt, personal);
      return util.toHex(output);
    }
    module.exports = {
      blake2b,
      blake2bHex,
      blake2bInit,
      blake2bUpdate,
      blake2bFinal
    };
  }
});

// node_modules/blakejs/blake2s.js
var require_blake2s = __commonJS({
  "node_modules/blakejs/blake2s.js"(exports, module) {
    var util = require_util();
    function B2S_GET32(v7, i6) {
      return v7[i6] ^ v7[i6 + 1] << 8 ^ v7[i6 + 2] << 16 ^ v7[i6 + 3] << 24;
    }
    function B2S_G(a4, b6, c8, d6, x6, y7) {
      v6[a4] = v6[a4] + v6[b6] + x6;
      v6[d6] = ROTR32(v6[d6] ^ v6[a4], 16);
      v6[c8] = v6[c8] + v6[d6];
      v6[b6] = ROTR32(v6[b6] ^ v6[c8], 12);
      v6[a4] = v6[a4] + v6[b6] + y7;
      v6[d6] = ROTR32(v6[d6] ^ v6[a4], 8);
      v6[c8] = v6[c8] + v6[d6];
      v6[b6] = ROTR32(v6[b6] ^ v6[c8], 7);
    }
    function ROTR32(x6, y7) {
      return x6 >>> y7 ^ x6 << 32 - y7;
    }
    var BLAKE2S_IV = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SIGMA = new Uint8Array([
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0
    ]);
    var v6 = new Uint32Array(16);
    var m4 = new Uint32Array(16);
    function blake2sCompress(ctx, last) {
      let i6 = 0;
      for (i6 = 0; i6 < 8; i6++) {
        v6[i6] = ctx.h[i6];
        v6[i6 + 8] = BLAKE2S_IV[i6];
      }
      v6[12] ^= ctx.t;
      v6[13] ^= ctx.t / 4294967296;
      if (last) {
        v6[14] = ~v6[14];
      }
      for (i6 = 0; i6 < 16; i6++) {
        m4[i6] = B2S_GET32(ctx.b, 4 * i6);
      }
      for (i6 = 0; i6 < 10; i6++) {
        B2S_G(0, 4, 8, 12, m4[SIGMA[i6 * 16 + 0]], m4[SIGMA[i6 * 16 + 1]]);
        B2S_G(1, 5, 9, 13, m4[SIGMA[i6 * 16 + 2]], m4[SIGMA[i6 * 16 + 3]]);
        B2S_G(2, 6, 10, 14, m4[SIGMA[i6 * 16 + 4]], m4[SIGMA[i6 * 16 + 5]]);
        B2S_G(3, 7, 11, 15, m4[SIGMA[i6 * 16 + 6]], m4[SIGMA[i6 * 16 + 7]]);
        B2S_G(0, 5, 10, 15, m4[SIGMA[i6 * 16 + 8]], m4[SIGMA[i6 * 16 + 9]]);
        B2S_G(1, 6, 11, 12, m4[SIGMA[i6 * 16 + 10]], m4[SIGMA[i6 * 16 + 11]]);
        B2S_G(2, 7, 8, 13, m4[SIGMA[i6 * 16 + 12]], m4[SIGMA[i6 * 16 + 13]]);
        B2S_G(3, 4, 9, 14, m4[SIGMA[i6 * 16 + 14]], m4[SIGMA[i6 * 16 + 15]]);
      }
      for (i6 = 0; i6 < 8; i6++) {
        ctx.h[i6] ^= v6[i6] ^ v6[i6 + 8];
      }
    }
    function blake2sInit(outlen, key) {
      if (!(outlen > 0 && outlen <= 32)) {
        throw new Error("Incorrect output length, should be in [1, 32]");
      }
      const keylen = key ? key.length : 0;
      if (key && !(keylen > 0 && keylen <= 32)) {
        throw new Error("Incorrect key length, should be in [1, 32]");
      }
      const ctx = {
        h: new Uint32Array(BLAKE2S_IV),
        // hash state
        b: new Uint8Array(64),
        // input block
        c: 0,
        // pointer within block
        t: 0,
        // input count
        outlen
        // output length in bytes
      };
      ctx.h[0] ^= 16842752 ^ keylen << 8 ^ outlen;
      if (keylen > 0) {
        blake2sUpdate(ctx, key);
        ctx.c = 64;
      }
      return ctx;
    }
    function blake2sUpdate(ctx, input) {
      for (let i6 = 0; i6 < input.length; i6++) {
        if (ctx.c === 64) {
          ctx.t += ctx.c;
          blake2sCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i6];
      }
    }
    function blake2sFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 64) {
        ctx.b[ctx.c++] = 0;
      }
      blake2sCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i6 = 0; i6 < ctx.outlen; i6++) {
        out[i6] = ctx.h[i6 >> 2] >> 8 * (i6 & 3) & 255;
      }
      return out;
    }
    function blake2s(input, key, outlen) {
      outlen = outlen || 32;
      input = util.normalizeInput(input);
      const ctx = blake2sInit(outlen, key);
      blake2sUpdate(ctx, input);
      return blake2sFinal(ctx);
    }
    function blake2sHex(input, key, outlen) {
      const output = blake2s(input, key, outlen);
      return util.toHex(output);
    }
    module.exports = {
      blake2s,
      blake2sHex,
      blake2sInit,
      blake2sUpdate,
      blake2sFinal
    };
  }
});

// node_modules/blakejs/index.js
var require_blakejs = __commonJS({
  "node_modules/blakejs/index.js"(exports, module) {
    var b2b = require_blake2b();
    var b2s = require_blake2s();
    module.exports = {
      blake2b: b2b.blake2b,
      blake2bHex: b2b.blake2bHex,
      blake2bInit: b2b.blake2bInit,
      blake2bUpdate: b2b.blake2bUpdate,
      blake2bFinal: b2b.blake2bFinal,
      blake2s: b2s.blake2s,
      blake2sHex: b2s.blake2sHex,
      blake2sInit: b2s.blake2sInit,
      blake2sUpdate: b2s.blake2sUpdate,
      blake2sFinal: b2s.blake2sFinal
    };
  }
});

// node_modules/@walletconnect/environment/dist/cjs/crypto.js
var require_crypto = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;
    function getBrowerCrypto() {
      return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};
    }
    exports.getBrowerCrypto = getBrowerCrypto;
    function getSubtleCrypto() {
      const browserCrypto = getBrowerCrypto();
      return browserCrypto.subtle || browserCrypto.webkitSubtle;
    }
    exports.getSubtleCrypto = getSubtleCrypto;
    function isBrowserCryptoAvailable() {
      return !!getBrowerCrypto() && !!getSubtleCrypto();
    }
    exports.isBrowserCryptoAvailable = isBrowserCryptoAvailable;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/env.js
var require_env = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/env.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowser = exports.isNode = exports.isReactNative = void 0;
    function isReactNative() {
      return typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative";
    }
    exports.isReactNative = isReactNative;
    function isNode2() {
      return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    }
    exports.isNode = isNode2;
    function isBrowser() {
      return !isReactNative() && !isNode2();
    }
    exports.isBrowser = isBrowser;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/index.js
var require_cjs4 = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_crypto(), exports);
    tslib_1.__exportStar(require_env(), exports);
  }
});

// node_modules/ws/browser.js
var require_browser2 = __commonJS({
  "node_modules/ws/browser.js"(exports, module) {
    "use strict";
    module.exports = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
  }
});

// node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
    var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global !== "undefined" && global;
    var __globalThis__ = function() {
      function F4() {
        this.fetch = false;
        this.DOMException = __global__.DOMException;
      }
      F4.prototype = __global__;
      return new F4();
    }();
    (function(globalThis2) {
      var irrelevant = function(exports2) {
        var g4 = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
        typeof global !== "undefined" && global || {};
        var support = {
          searchParams: "URLSearchParams" in g4,
          iterable: "Symbol" in g4 && "iterator" in Symbol,
          blob: "FileReader" in g4 && "Blob" in g4 && function() {
            try {
              new Blob();
              return true;
            } catch (e3) {
              return false;
            }
          }(),
          formData: "FormData" in g4,
          arrayBuffer: "ArrayBuffer" in g4
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name2) {
          if (typeof name2 !== "string") {
            name2 = String(name2);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name2) || name2 === "") {
            throw new TypeError('Invalid character in header field name: "' + name2 + '"');
          }
          return name2.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers(headers) {
          this.map = {};
          if (headers instanceof Headers) {
            headers.forEach(function(value, name2) {
              this.append(name2, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              if (header.length != 2) {
                throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
              }
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name2) {
              this.append(name2, headers[name2]);
            }, this);
          }
        }
        Headers.prototype.append = function(name2, value) {
          name2 = normalizeName(name2);
          value = normalizeValue(value);
          var oldValue = this.map[name2];
          this.map[name2] = oldValue ? oldValue + ", " + value : value;
        };
        Headers.prototype["delete"] = function(name2) {
          delete this.map[normalizeName(name2)];
        };
        Headers.prototype.get = function(name2) {
          name2 = normalizeName(name2);
          return this.has(name2) ? this.map[name2] : null;
        };
        Headers.prototype.has = function(name2) {
          return this.map.hasOwnProperty(normalizeName(name2));
        };
        Headers.prototype.set = function(name2, value) {
          this.map[normalizeName(name2)] = normalizeValue(value);
        };
        Headers.prototype.forEach = function(callback, thisArg) {
          for (var name2 in this.map) {
            if (this.map.hasOwnProperty(name2)) {
              callback.call(thisArg, this.map[name2], name2, this);
            }
          }
        };
        Headers.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name2) {
            items.push(name2);
          });
          return iteratorFor(items);
        };
        Headers.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name2) {
            items.push([name2, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        }
        function consumed(body) {
          if (body._noBody) return;
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
          var encoding = match ? match[1] : "utf-8";
          reader.readAsText(blob, encoding);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i6 = 0; i6 < view.length; i6++) {
            chars[i6] = String.fromCharCode(view[i6]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
              this._noBody = true;
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
          }
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              var isConsumed = consumed(this);
              if (isConsumed) {
                return isConsumed;
              } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                return Promise.resolve(
                  this._bodyArrayBuffer.buffer.slice(
                    this._bodyArrayBuffer.byteOffset,
                    this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                  )
                );
              } else {
                return Promise.resolve(this._bodyArrayBuffer);
              }
            } else if (support.blob) {
              return this.blob().then(readBlobAsArrayBuffer);
            } else {
              throw new Error("could not read as ArrayBuffer");
            }
          };
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode8);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request2(input, options) {
          if (!(this instanceof Request2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          options = options || {};
          var body = options.body;
          if (input instanceof Request2) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal || function() {
            if ("AbortController" in g4) {
              var ctrl = new AbortController();
              return ctrl.signal;
            }
          }();
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
          if (this.method === "GET" || this.method === "HEAD") {
            if (options.cache === "no-store" || options.cache === "no-cache") {
              var reParamSearch = /([?&])_=[^&]*/;
              if (reParamSearch.test(this.url)) {
                this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
              } else {
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
              }
            }
          }
        }
        Request2.prototype.clone = function() {
          return new Request2(this, { body: this._bodyInit });
        };
        function decode8(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name2 = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name2), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split("\r").map(function(header) {
            return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
          }).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              try {
                headers.append(key, value);
              } catch (error) {
                console.warn("Response " + error.message);
              }
            }
          });
          return headers;
        }
        Body.call(Request2.prototype);
        function Response2(bodyInit, options) {
          if (!(this instanceof Response2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
          }
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
          this.headers = new Headers(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response2.prototype);
        Response2.prototype.clone = function() {
          return new Response2(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          });
        };
        Response2.error = function() {
          var response = new Response2(null, { status: 200, statusText: "" });
          response.ok = false;
          response.status = 0;
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response2.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response2(null, { status, headers: { location: url } });
        };
        exports2.DOMException = g4.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name2) {
            this.message = message;
            this.name = name2;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request2(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              if (request.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
                options.status = 200;
              } else {
                options.status = xhr.status;
              }
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              setTimeout(function() {
                resolve(new Response2(body, options));
              }, 0);
            };
            xhr.onerror = function() {
              setTimeout(function() {
                reject(new TypeError("Network request failed"));
              }, 0);
            };
            xhr.ontimeout = function() {
              setTimeout(function() {
                reject(new TypeError("Network request timed out"));
              }, 0);
            };
            xhr.onabort = function() {
              setTimeout(function() {
                reject(new exports2.DOMException("Aborted", "AbortError"));
              }, 0);
            };
            function fixUrl(url) {
              try {
                return url === "" && g4.location.href ? g4.location.href : url;
              } catch (e3) {
                return url;
              }
            }
            xhr.open(request.method, fixUrl(request.url), true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr) {
              if (support.blob) {
                xhr.responseType = "blob";
              } else if (support.arrayBuffer) {
                xhr.responseType = "arraybuffer";
              }
            }
            if (init && typeof init.headers === "object" && !(init.headers instanceof Headers || g4.Headers && init.headers instanceof g4.Headers)) {
              var names = [];
              Object.getOwnPropertyNames(init.headers).forEach(function(name2) {
                names.push(normalizeName(name2));
                xhr.setRequestHeader(name2, normalizeValue(init.headers[name2]));
              });
              request.headers.forEach(function(value, name2) {
                if (names.indexOf(name2) === -1) {
                  xhr.setRequestHeader(name2, value);
                }
              });
            } else {
              request.headers.forEach(function(value, name2) {
                xhr.setRequestHeader(name2, value);
              });
            }
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!g4.fetch) {
          g4.fetch = fetch2;
          g4.Headers = Headers;
          g4.Request = Request2;
          g4.Response = Response2;
        }
        exports2.Headers = Headers;
        exports2.Request = Request2;
        exports2.Response = Response2;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(__globalThis__);
    __globalThis__.fetch.ponyfill = true;
    delete __globalThis__.fetch.polyfill;
    var ctx = __global__.fetch ? __global__ : __globalThis__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
  }
});

// node_modules/@reown/appkit-common/dist/esm/src/utils/DateUtil.js
var import_dayjs = __toESM(require_dayjs_min(), 1);
var import_en = __toESM(require_en(), 1);
var import_relativeTime = __toESM(require_relativeTime(), 1);
var import_updateLocale = __toESM(require_updateLocale(), 1);
import_dayjs.default.extend(import_relativeTime.default);
import_dayjs.default.extend(import_updateLocale.default);
var localeObject = {
  ...import_en.default,
  name: "en-web3-modal",
  relativeTime: {
    future: "in %s",
    past: "%s ago",
    s: "%d sec",
    m: "1 min",
    mm: "%d min",
    h: "1 hr",
    hh: "%d hrs",
    d: "1 d",
    dd: "%d d",
    M: "1 mo",
    MM: "%d mo",
    y: "1 yr",
    yy: "%d yr"
  }
};
var MONTH_NAMES = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December"
];
import_dayjs.default.locale("en-web3-modal", localeObject);
var DateUtil = {
  getMonthNameByIndex(monthIndex) {
    return MONTH_NAMES[monthIndex];
  },
  getYear(date = (/* @__PURE__ */ new Date()).toISOString()) {
    return (0, import_dayjs.default)(date).year();
  },
  getRelativeDateFromNow(date) {
    return (0, import_dayjs.default)(date).locale("en-web3-modal").fromNow(true);
  },
  formatDate(date, format = "DD MMM") {
    return (0, import_dayjs.default)(date).format(format);
  }
};

// node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js
var ConstantsUtil = {
  WC_NAME_SUFFIX: ".reown.id",
  WC_NAME_SUFFIX_LEGACY: ".wcn.id",
  BLOCKCHAIN_API_RPC_URL: "https://rpc.walletconnect.org",
  PULSE_API_URL: "https://pulse.walletconnect.org",
  W3M_API_URL: "https://api.web3modal.org",
  CONNECTOR_ID: {
    WALLET_CONNECT: "walletConnect",
    INJECTED: "injected",
    WALLET_STANDARD: "announced",
    COINBASE: "coinbaseWallet",
    COINBASE_SDK: "coinbaseWalletSDK",
    SAFE: "safe",
    LEDGER: "ledger",
    OKX: "okx",
    EIP6963: "eip6963",
    AUTH: "ID_AUTH"
  },
  CONNECTOR_NAMES: {
    AUTH: "Auth"
  },
  AUTH_CONNECTOR_SUPPORTED_CHAINS: ["eip155", "solana"],
  LIMITS: {
    PENDING_TRANSACTIONS: 99
  },
  CHAIN: {
    EVM: "eip155",
    SOLANA: "solana",
    POLKADOT: "polkadot",
    BITCOIN: "bip122"
  },
  CHAIN_NAME_MAP: {
    eip155: "EVM Networks",
    solana: "Solana",
    polkadot: "Polkadot",
    bip122: "Bitcoin",
    cosmos: "Cosmos"
  },
  ADAPTER_TYPES: {
    BITCOIN: "bitcoin",
    SOLANA: "solana",
    WAGMI: "wagmi",
    ETHERS: "ethers",
    ETHERS5: "ethers5"
  },
  USDT_CONTRACT_ADDRESSES: [
    "0xdac17f958d2ee523a2206206994597c13d831ec7",
    "0xc2132d05d31c914a87c6611c10748aeb04b58e8f",
    "0x9702230a8ea53601f5cd2dc00fdbc13d4df4a8c7",
    "0x919C1c267BC06a7039e03fcc2eF738525769109c",
    "0x48065fbBE25f71C9282ddf5e1cD6D6A887483D5e",
    "0x55d398326f99059fF775485246999027B3197955",
    "0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9"
  ],
  HTTP_STATUS_CODES: {
    SERVER_ERROR: 500,
    TOO_MANY_REQUESTS: 429,
    SERVICE_UNAVAILABLE: 503,
    FORBIDDEN: 403
  },
  UNSUPPORTED_NETWORK_NAME: "Unknown Network",
  SECURE_SITE_SDK_ORIGIN: (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_ORIGIN"] : void 0) || "https://secure.walletconnect.org",
  REMOTE_FEATURES_ALERTS: {
    MULTI_WALLET_NOT_ENABLED: {
      DEFAULT: {
        shortMessage: "Multi-Wallet Not Enabled",
        longMessage: "Multi-wallet support is not enabled. Please enable it in your AppKit configuration at cloud.reown.com."
      },
      CONNECTIONS_HOOK: {
        shortMessage: "Multi-Wallet Not Enabled",
        longMessage: "Multi-wallet support is not enabled. Please enable it in your AppKit configuration at cloud.reown.com to use the useAppKitConnections hook."
      },
      CONNECTION_HOOK: {
        shortMessage: "Multi-Wallet Not Enabled",
        longMessage: "Multi-wallet support is not enabled. Please enable it in your AppKit configuration at cloud.reown.com to use the useAppKitConnection hook."
      }
    }
  }
};

// node_modules/@reown/appkit-common/dist/esm/src/utils/NetworkUtil.js
var NetworkUtil = {
  caipNetworkIdToNumber(caipnetworkId) {
    return caipnetworkId ? Number(caipnetworkId.split(":")[1]) : void 0;
  },
  parseEvmChainId(chainId) {
    return typeof chainId === "string" ? this.caipNetworkIdToNumber(chainId) : chainId;
  },
  getNetworksByNamespace(networks, namespace) {
    return (networks == null ? void 0 : networks.filter((network) => network.chainNamespace === namespace)) || [];
  },
  getFirstNetworkByNamespace(networks, namespace) {
    return this.getNetworksByNamespace(networks, namespace)[0];
  },
  getNetworkNameByCaipNetworkId(caipNetworks, caipNetworkId) {
    var _a2;
    if (!caipNetworkId) {
      return void 0;
    }
    const caipNetwork = caipNetworks.find((network) => network.caipNetworkId === caipNetworkId);
    if (caipNetwork) {
      return caipNetwork.name;
    }
    const [namespace] = caipNetworkId.split(":");
    return ((_a2 = ConstantsUtil.CHAIN_NAME_MAP) == null ? void 0 : _a2[namespace]) || void 0;
  }
};

// node_modules/big.js/big.mjs
var DP = 20;
var RM = 1;
var MAX_DP = 1e6;
var MAX_POWER = 1e6;
var NE = -7;
var PE = 21;
var STRICT = false;
var NAME = "[big.js] ";
var INVALID = NAME + "Invalid ";
var INVALID_DP = INVALID + "decimal places";
var INVALID_RM = INVALID + "rounding mode";
var DIV_BY_ZERO = NAME + "Division by zero";
var P = {};
var UNDEFINED = void 0;
var NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
function _Big_() {
  function Big2(n6) {
    var x6 = this;
    if (!(x6 instanceof Big2)) return n6 === UNDEFINED ? _Big_() : new Big2(n6);
    if (n6 instanceof Big2) {
      x6.s = n6.s;
      x6.e = n6.e;
      x6.c = n6.c.slice();
    } else {
      if (typeof n6 !== "string") {
        if (Big2.strict === true && typeof n6 !== "bigint") {
          throw TypeError(INVALID + "value");
        }
        n6 = n6 === 0 && 1 / n6 < 0 ? "-0" : String(n6);
      }
      parse(x6, n6);
    }
    x6.constructor = Big2;
  }
  Big2.prototype = P;
  Big2.DP = DP;
  Big2.RM = RM;
  Big2.NE = NE;
  Big2.PE = PE;
  Big2.strict = STRICT;
  Big2.roundDown = 0;
  Big2.roundHalfUp = 1;
  Big2.roundHalfEven = 2;
  Big2.roundUp = 3;
  return Big2;
}
function parse(x6, n6) {
  var e3, i6, nl;
  if (!NUMERIC.test(n6)) {
    throw Error(INVALID + "number");
  }
  x6.s = n6.charAt(0) == "-" ? (n6 = n6.slice(1), -1) : 1;
  if ((e3 = n6.indexOf(".")) > -1) n6 = n6.replace(".", "");
  if ((i6 = n6.search(/e/i)) > 0) {
    if (e3 < 0) e3 = i6;
    e3 += +n6.slice(i6 + 1);
    n6 = n6.substring(0, i6);
  } else if (e3 < 0) {
    e3 = n6.length;
  }
  nl = n6.length;
  for (i6 = 0; i6 < nl && n6.charAt(i6) == "0"; ) ++i6;
  if (i6 == nl) {
    x6.c = [x6.e = 0];
  } else {
    for (; nl > 0 && n6.charAt(--nl) == "0"; ) ;
    x6.e = e3 - i6 - 1;
    x6.c = [];
    for (e3 = 0; i6 <= nl; ) x6.c[e3++] = +n6.charAt(i6++);
  }
  return x6;
}
function round(x6, sd, rm, more) {
  var xc2 = x6.c;
  if (rm === UNDEFINED) rm = x6.constructor.RM;
  if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
    throw Error(INVALID_RM);
  }
  if (sd < 1) {
    more = rm === 3 && (more || !!xc2[0]) || sd === 0 && (rm === 1 && xc2[0] >= 5 || rm === 2 && (xc2[0] > 5 || xc2[0] === 5 && (more || xc2[1] !== UNDEFINED)));
    xc2.length = 1;
    if (more) {
      x6.e = x6.e - sd + 1;
      xc2[0] = 1;
    } else {
      xc2[0] = x6.e = 0;
    }
  } else if (sd < xc2.length) {
    more = rm === 1 && xc2[sd] >= 5 || rm === 2 && (xc2[sd] > 5 || xc2[sd] === 5 && (more || xc2[sd + 1] !== UNDEFINED || xc2[sd - 1] & 1)) || rm === 3 && (more || !!xc2[0]);
    xc2.length = sd;
    if (more) {
      for (; ++xc2[--sd] > 9; ) {
        xc2[sd] = 0;
        if (sd === 0) {
          ++x6.e;
          xc2.unshift(1);
          break;
        }
      }
    }
    for (sd = xc2.length; !xc2[--sd]; ) xc2.pop();
  }
  return x6;
}
function stringify(x6, doExponential, isNonzero) {
  var e3 = x6.e, s4 = x6.c.join(""), n6 = s4.length;
  if (doExponential) {
    s4 = s4.charAt(0) + (n6 > 1 ? "." + s4.slice(1) : "") + (e3 < 0 ? "e" : "e+") + e3;
  } else if (e3 < 0) {
    for (; ++e3; ) s4 = "0" + s4;
    s4 = "0." + s4;
  } else if (e3 > 0) {
    if (++e3 > n6) {
      for (e3 -= n6; e3--; ) s4 += "0";
    } else if (e3 < n6) {
      s4 = s4.slice(0, e3) + "." + s4.slice(e3);
    }
  } else if (n6 > 1) {
    s4 = s4.charAt(0) + "." + s4.slice(1);
  }
  return x6.s < 0 && isNonzero ? "-" + s4 : s4;
}
P.abs = function() {
  var x6 = new this.constructor(this);
  x6.s = 1;
  return x6;
};
P.cmp = function(y7) {
  var isneg, x6 = this, xc2 = x6.c, yc2 = (y7 = new x6.constructor(y7)).c, i6 = x6.s, j5 = y7.s, k7 = x6.e, l9 = y7.e;
  if (!xc2[0] || !yc2[0]) return !xc2[0] ? !yc2[0] ? 0 : -j5 : i6;
  if (i6 != j5) return i6;
  isneg = i6 < 0;
  if (k7 != l9) return k7 > l9 ^ isneg ? 1 : -1;
  j5 = (k7 = xc2.length) < (l9 = yc2.length) ? k7 : l9;
  for (i6 = -1; ++i6 < j5; ) {
    if (xc2[i6] != yc2[i6]) return xc2[i6] > yc2[i6] ^ isneg ? 1 : -1;
  }
  return k7 == l9 ? 0 : k7 > l9 ^ isneg ? 1 : -1;
};
P.div = function(y7) {
  var x6 = this, Big2 = x6.constructor, a4 = x6.c, b6 = (y7 = new Big2(y7)).c, k7 = x6.s == y7.s ? 1 : -1, dp = Big2.DP;
  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
    throw Error(INVALID_DP);
  }
  if (!b6[0]) {
    throw Error(DIV_BY_ZERO);
  }
  if (!a4[0]) {
    y7.s = k7;
    y7.c = [y7.e = 0];
    return y7;
  }
  var bl, bt4, n6, cmp, ri3, bz = b6.slice(), ai3 = bl = b6.length, al = a4.length, r4 = a4.slice(0, bl), rl = r4.length, q2 = y7, qc2 = q2.c = [], qi3 = 0, p6 = dp + (q2.e = x6.e - y7.e) + 1;
  q2.s = k7;
  k7 = p6 < 0 ? 0 : p6;
  bz.unshift(0);
  for (; rl++ < bl; ) r4.push(0);
  do {
    for (n6 = 0; n6 < 10; n6++) {
      if (bl != (rl = r4.length)) {
        cmp = bl > rl ? 1 : -1;
      } else {
        for (ri3 = -1, cmp = 0; ++ri3 < bl; ) {
          if (b6[ri3] != r4[ri3]) {
            cmp = b6[ri3] > r4[ri3] ? 1 : -1;
            break;
          }
        }
      }
      if (cmp < 0) {
        for (bt4 = rl == bl ? b6 : bz; rl; ) {
          if (r4[--rl] < bt4[rl]) {
            ri3 = rl;
            for (; ri3 && !r4[--ri3]; ) r4[ri3] = 9;
            --r4[ri3];
            r4[rl] += 10;
          }
          r4[rl] -= bt4[rl];
        }
        for (; !r4[0]; ) r4.shift();
      } else {
        break;
      }
    }
    qc2[qi3++] = cmp ? n6 : ++n6;
    if (r4[0] && cmp) r4[rl] = a4[ai3] || 0;
    else r4 = [a4[ai3]];
  } while ((ai3++ < al || r4[0] !== UNDEFINED) && k7--);
  if (!qc2[0] && qi3 != 1) {
    qc2.shift();
    q2.e--;
    p6--;
  }
  if (qi3 > p6) round(q2, p6, Big2.RM, r4[0] !== UNDEFINED);
  return q2;
};
P.eq = function(y7) {
  return this.cmp(y7) === 0;
};
P.gt = function(y7) {
  return this.cmp(y7) > 0;
};
P.gte = function(y7) {
  return this.cmp(y7) > -1;
};
P.lt = function(y7) {
  return this.cmp(y7) < 0;
};
P.lte = function(y7) {
  return this.cmp(y7) < 1;
};
P.minus = P.sub = function(y7) {
  var i6, j5, t2, xlty, x6 = this, Big2 = x6.constructor, a4 = x6.s, b6 = (y7 = new Big2(y7)).s;
  if (a4 != b6) {
    y7.s = -b6;
    return x6.plus(y7);
  }
  var xc2 = x6.c.slice(), xe4 = x6.e, yc2 = y7.c, ye5 = y7.e;
  if (!xc2[0] || !yc2[0]) {
    if (yc2[0]) {
      y7.s = -b6;
    } else if (xc2[0]) {
      y7 = new Big2(x6);
    } else {
      y7.s = 1;
    }
    return y7;
  }
  if (a4 = xe4 - ye5) {
    if (xlty = a4 < 0) {
      a4 = -a4;
      t2 = xc2;
    } else {
      ye5 = xe4;
      t2 = yc2;
    }
    t2.reverse();
    for (b6 = a4; b6--; ) t2.push(0);
    t2.reverse();
  } else {
    j5 = ((xlty = xc2.length < yc2.length) ? xc2 : yc2).length;
    for (a4 = b6 = 0; b6 < j5; b6++) {
      if (xc2[b6] != yc2[b6]) {
        xlty = xc2[b6] < yc2[b6];
        break;
      }
    }
  }
  if (xlty) {
    t2 = xc2;
    xc2 = yc2;
    yc2 = t2;
    y7.s = -y7.s;
  }
  if ((b6 = (j5 = yc2.length) - (i6 = xc2.length)) > 0) for (; b6--; ) xc2[i6++] = 0;
  for (b6 = i6; j5 > a4; ) {
    if (xc2[--j5] < yc2[j5]) {
      for (i6 = j5; i6 && !xc2[--i6]; ) xc2[i6] = 9;
      --xc2[i6];
      xc2[j5] += 10;
    }
    xc2[j5] -= yc2[j5];
  }
  for (; xc2[--b6] === 0; ) xc2.pop();
  for (; xc2[0] === 0; ) {
    xc2.shift();
    --ye5;
  }
  if (!xc2[0]) {
    y7.s = 1;
    xc2 = [ye5 = 0];
  }
  y7.c = xc2;
  y7.e = ye5;
  return y7;
};
P.mod = function(y7) {
  var ygtx, x6 = this, Big2 = x6.constructor, a4 = x6.s, b6 = (y7 = new Big2(y7)).s;
  if (!y7.c[0]) {
    throw Error(DIV_BY_ZERO);
  }
  x6.s = y7.s = 1;
  ygtx = y7.cmp(x6) == 1;
  x6.s = a4;
  y7.s = b6;
  if (ygtx) return new Big2(x6);
  a4 = Big2.DP;
  b6 = Big2.RM;
  Big2.DP = Big2.RM = 0;
  x6 = x6.div(y7);
  Big2.DP = a4;
  Big2.RM = b6;
  return this.minus(x6.times(y7));
};
P.neg = function() {
  var x6 = new this.constructor(this);
  x6.s = -x6.s;
  return x6;
};
P.plus = P.add = function(y7) {
  var e3, k7, t2, x6 = this, Big2 = x6.constructor;
  y7 = new Big2(y7);
  if (x6.s != y7.s) {
    y7.s = -y7.s;
    return x6.minus(y7);
  }
  var xe4 = x6.e, xc2 = x6.c, ye5 = y7.e, yc2 = y7.c;
  if (!xc2[0] || !yc2[0]) {
    if (!yc2[0]) {
      if (xc2[0]) {
        y7 = new Big2(x6);
      } else {
        y7.s = x6.s;
      }
    }
    return y7;
  }
  xc2 = xc2.slice();
  if (e3 = xe4 - ye5) {
    if (e3 > 0) {
      ye5 = xe4;
      t2 = yc2;
    } else {
      e3 = -e3;
      t2 = xc2;
    }
    t2.reverse();
    for (; e3--; ) t2.push(0);
    t2.reverse();
  }
  if (xc2.length - yc2.length < 0) {
    t2 = yc2;
    yc2 = xc2;
    xc2 = t2;
  }
  e3 = yc2.length;
  for (k7 = 0; e3; xc2[e3] %= 10) k7 = (xc2[--e3] = xc2[e3] + yc2[e3] + k7) / 10 | 0;
  if (k7) {
    xc2.unshift(k7);
    ++ye5;
  }
  for (e3 = xc2.length; xc2[--e3] === 0; ) xc2.pop();
  y7.c = xc2;
  y7.e = ye5;
  return y7;
};
P.pow = function(n6) {
  var x6 = this, one = new x6.constructor("1"), y7 = one, isneg = n6 < 0;
  if (n6 !== ~~n6 || n6 < -MAX_POWER || n6 > MAX_POWER) {
    throw Error(INVALID + "exponent");
  }
  if (isneg) n6 = -n6;
  for (; ; ) {
    if (n6 & 1) y7 = y7.times(x6);
    n6 >>= 1;
    if (!n6) break;
    x6 = x6.times(x6);
  }
  return isneg ? one.div(y7) : y7;
};
P.prec = function(sd, rm) {
  if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
    throw Error(INVALID + "precision");
  }
  return round(new this.constructor(this), sd, rm);
};
P.round = function(dp, rm) {
  if (dp === UNDEFINED) dp = 0;
  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
    throw Error(INVALID_DP);
  }
  return round(new this.constructor(this), dp + this.e + 1, rm);
};
P.sqrt = function() {
  var r4, c8, t2, x6 = this, Big2 = x6.constructor, s4 = x6.s, e3 = x6.e, half = new Big2("0.5");
  if (!x6.c[0]) return new Big2(x6);
  if (s4 < 0) {
    throw Error(NAME + "No square root");
  }
  s4 = Math.sqrt(+stringify(x6, true, true));
  if (s4 === 0 || s4 === 1 / 0) {
    c8 = x6.c.join("");
    if (!(c8.length + e3 & 1)) c8 += "0";
    s4 = Math.sqrt(c8);
    e3 = ((e3 + 1) / 2 | 0) - (e3 < 0 || e3 & 1);
    r4 = new Big2((s4 == 1 / 0 ? "5e" : (s4 = s4.toExponential()).slice(0, s4.indexOf("e") + 1)) + e3);
  } else {
    r4 = new Big2(s4 + "");
  }
  e3 = r4.e + (Big2.DP += 4);
  do {
    t2 = r4;
    r4 = half.times(t2.plus(x6.div(t2)));
  } while (t2.c.slice(0, e3).join("") !== r4.c.slice(0, e3).join(""));
  return round(r4, (Big2.DP -= 4) + r4.e + 1, Big2.RM);
};
P.times = P.mul = function(y7) {
  var c8, x6 = this, Big2 = x6.constructor, xc2 = x6.c, yc2 = (y7 = new Big2(y7)).c, a4 = xc2.length, b6 = yc2.length, i6 = x6.e, j5 = y7.e;
  y7.s = x6.s == y7.s ? 1 : -1;
  if (!xc2[0] || !yc2[0]) {
    y7.c = [y7.e = 0];
    return y7;
  }
  y7.e = i6 + j5;
  if (a4 < b6) {
    c8 = xc2;
    xc2 = yc2;
    yc2 = c8;
    j5 = a4;
    a4 = b6;
    b6 = j5;
  }
  for (c8 = new Array(j5 = a4 + b6); j5--; ) c8[j5] = 0;
  for (i6 = b6; i6--; ) {
    b6 = 0;
    for (j5 = a4 + i6; j5 > i6; ) {
      b6 = c8[j5] + yc2[i6] * xc2[j5 - i6 - 1] + b6;
      c8[j5--] = b6 % 10;
      b6 = b6 / 10 | 0;
    }
    c8[j5] = b6;
  }
  if (b6) ++y7.e;
  else c8.shift();
  for (i6 = c8.length; !c8[--i6]; ) c8.pop();
  y7.c = c8;
  return y7;
};
P.toExponential = function(dp, rm) {
  var x6 = this, n6 = x6.c[0];
  if (dp !== UNDEFINED) {
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }
    x6 = round(new x6.constructor(x6), ++dp, rm);
    for (; x6.c.length < dp; ) x6.c.push(0);
  }
  return stringify(x6, true, !!n6);
};
P.toFixed = function(dp, rm) {
  var x6 = this, n6 = x6.c[0];
  if (dp !== UNDEFINED) {
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }
    x6 = round(new x6.constructor(x6), dp + x6.e + 1, rm);
    for (dp = dp + x6.e + 1; x6.c.length < dp; ) x6.c.push(0);
  }
  return stringify(x6, false, !!n6);
};
P[Symbol.for("nodejs.util.inspect.custom")] = P.toJSON = P.toString = function() {
  var x6 = this, Big2 = x6.constructor;
  return stringify(x6, x6.e <= Big2.NE || x6.e >= Big2.PE, !!x6.c[0]);
};
P.toNumber = function() {
  var n6 = +stringify(this, true, true);
  if (this.constructor.strict === true && !this.eq(n6.toString())) {
    throw Error(NAME + "Imprecise conversion");
  }
  return n6;
};
P.toPrecision = function(sd, rm) {
  var x6 = this, Big2 = x6.constructor, n6 = x6.c[0];
  if (sd !== UNDEFINED) {
    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
      throw Error(INVALID + "precision");
    }
    x6 = round(new Big2(x6), sd, rm);
    for (; x6.c.length < sd; ) x6.c.push(0);
  }
  return stringify(x6, sd <= x6.e || x6.e <= Big2.NE || x6.e >= Big2.PE, !!n6);
};
P.valueOf = function() {
  var x6 = this, Big2 = x6.constructor;
  if (Big2.strict === true) {
    throw Error(NAME + "valueOf disallowed");
  }
  return stringify(x6, x6.e <= Big2.NE || x6.e >= Big2.PE, true);
};
var Big = _Big_();
var big_default = Big;

// node_modules/@reown/appkit-common/dist/esm/src/utils/NumberUtil.js
var NumberUtil = {
  bigNumber(value) {
    if (!value) {
      return new big_default(0);
    }
    return new big_default(value);
  },
  multiply(a4, b6) {
    if (a4 === void 0 || b6 === void 0) {
      return new big_default(0);
    }
    const aBigNumber = new big_default(a4);
    const bBigNumber = new big_default(b6);
    return aBigNumber.times(bBigNumber);
  },
  formatNumberToLocalString(value, decimals = 2) {
    if (value === void 0) {
      return "0.00";
    }
    if (typeof value === "number") {
      return value.toLocaleString("en-US", {
        maximumFractionDigits: decimals,
        minimumFractionDigits: decimals
      });
    }
    return parseFloat(value).toLocaleString("en-US", {
      maximumFractionDigits: decimals,
      minimumFractionDigits: decimals
    });
  },
  parseLocalStringToNumber(value) {
    if (value === void 0) {
      return 0;
    }
    return parseFloat(value.replace(/,/gu, ""));
  }
};

// node_modules/@reown/appkit-common/dist/esm/src/utils/InputUtil.js
var InputUtil = {
  numericInputKeyDown(event, currentValue, onChange) {
    const allowedKeys = [
      "Backspace",
      "Meta",
      "Ctrl",
      "a",
      "A",
      "c",
      "C",
      "x",
      "X",
      "v",
      "V",
      "ArrowLeft",
      "ArrowRight",
      "Tab"
    ];
    const controlPressed = event.metaKey || event.ctrlKey;
    const eventKey = event.key;
    const lowercaseEventKey = eventKey.toLocaleLowerCase();
    const selectAll = lowercaseEventKey === "a";
    const copyKey = lowercaseEventKey === "c";
    const pasteKey = lowercaseEventKey === "v";
    const cutKey = lowercaseEventKey === "x";
    const isComma = eventKey === ",";
    const isDot = eventKey === ".";
    const isNumericKey = eventKey >= "0" && eventKey <= "9";
    if (!controlPressed && (selectAll || copyKey || pasteKey || cutKey)) {
      event.preventDefault();
    }
    if (currentValue === "0" && !isComma && !isDot && eventKey === "0") {
      event.preventDefault();
    }
    if (currentValue === "0" && isNumericKey) {
      onChange(eventKey);
      event.preventDefault();
    }
    if (isComma || isDot) {
      if (!currentValue) {
        onChange("0.");
        event.preventDefault();
      }
      if ((currentValue == null ? void 0 : currentValue.includes(".")) || (currentValue == null ? void 0 : currentValue.includes(","))) {
        event.preventDefault();
      }
    }
    if (!isNumericKey && !allowedKeys.includes(eventKey) && !isDot && !isComma) {
      event.preventDefault();
    }
  }
};

// node_modules/@reown/appkit-common/dist/esm/src/contracts/erc20.js
var erc20ABI = [
  {
    type: "function",
    name: "transfer",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "_to",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ]
  },
  {
    type: "function",
    name: "transferFrom",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "_from",
        type: "address"
      },
      {
        name: "_to",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ]
  }
];

// node_modules/@reown/appkit-common/dist/esm/src/contracts/swap.js
var swapABI = [
  {
    type: "function",
    name: "approve",
    stateMutability: "nonpayable",
    inputs: [
      { name: "spender", type: "address" },
      { name: "amount", type: "uint256" }
    ],
    outputs: [{ type: "bool" }]
  }
];

// node_modules/@reown/appkit-common/dist/esm/src/contracts/usdt.js
var usdtABI = [
  {
    type: "function",
    name: "transfer",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "recipient",
        type: "address"
      },
      {
        name: "amount",
        type: "uint256"
      }
    ],
    outputs: []
  },
  {
    type: "function",
    name: "transferFrom",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "sender",
        type: "address"
      },
      {
        name: "recipient",
        type: "address"
      },
      {
        name: "amount",
        type: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ]
  }
];

// node_modules/@reown/appkit-common/dist/esm/src/utils/ContractUtil.js
var ContractUtil = {
  getERC20Abi: (tokenAddress) => {
    if (ConstantsUtil.USDT_CONTRACT_ADDRESSES.includes(tokenAddress)) {
      return usdtABI;
    }
    return erc20ABI;
  },
  getSwapAbi: () => swapABI
};

// node_modules/@reown/appkit-common/dist/esm/src/utils/NavigationUtil.js
var NavigationUtil = {
  URLS: {
    FAQ: "https://walletconnect.com/faq"
  }
};

// node_modules/@reown/appkit-common/dist/esm/src/utils/EmitterUtil.js
var Emitter = class _Emitter {
  on(eventName, callback) {
    var _a2;
    if (!_Emitter.eventListeners.has(eventName)) {
      _Emitter.eventListeners.set(eventName, /* @__PURE__ */ new Set());
    }
    (_a2 = _Emitter.eventListeners.get(eventName)) == null ? void 0 : _a2.add(callback);
  }
  off(eventName, callback) {
    const listeners = _Emitter.eventListeners.get(eventName);
    if (listeners) {
      listeners.delete(callback);
    }
  }
  emit(eventName, data) {
    const listeners = _Emitter.eventListeners.get(eventName);
    if (listeners) {
      listeners.forEach((callback) => callback(data));
    }
  }
  clear(eventName) {
    _Emitter.eventListeners.delete(eventName);
  }
  clearAll() {
    _Emitter.eventListeners.clear();
  }
};
Emitter.eventListeners = /* @__PURE__ */ new Map();

// node_modules/@reown/appkit-common/dist/esm/src/utils/ParseUtil.js
var ParseUtil = {
  validateCaipAddress(address) {
    var _a2;
    if (((_a2 = address.split(":")) == null ? void 0 : _a2.length) !== 3) {
      throw new Error("Invalid CAIP Address");
    }
    return address;
  },
  parseCaipAddress(caipAddress) {
    const parts = caipAddress.split(":");
    if (parts.length !== 3) {
      throw new Error(`Invalid CAIP-10 address: ${caipAddress}`);
    }
    const [chainNamespace, chainId, address] = parts;
    if (!chainNamespace || !chainId || !address) {
      throw new Error(`Invalid CAIP-10 address: ${caipAddress}`);
    }
    return {
      chainNamespace,
      chainId,
      address
    };
  },
  parseCaipNetworkId(caipNetworkId) {
    const parts = caipNetworkId.split(":");
    if (parts.length !== 2) {
      throw new Error(`Invalid CAIP-2 network id: ${caipNetworkId}`);
    }
    const [chainNamespace, chainId] = parts;
    if (!chainNamespace || !chainId) {
      throw new Error(`Invalid CAIP-2 network id: ${caipNetworkId}`);
    }
    return {
      chainNamespace,
      chainId
    };
  }
};

// node_modules/@reown/appkit-common/dist/esm/src/utils/SafeLocalStorage.js
var SafeLocalStorageKeys = {
  WALLET_ID: "@appkit/wallet_id",
  WALLET_NAME: "@appkit/wallet_name",
  SOLANA_WALLET: "@appkit/solana_wallet",
  SOLANA_CAIP_CHAIN: "@appkit/solana_caip_chain",
  ACTIVE_CAIP_NETWORK_ID: "@appkit/active_caip_network_id",
  CONNECTED_SOCIAL: "@appkit/connected_social",
  CONNECTED_SOCIAL_USERNAME: "@appkit-wallet/SOCIAL_USERNAME",
  RECENT_WALLETS: "@appkit/recent_wallets",
  DEEPLINK_CHOICE: "WALLETCONNECT_DEEPLINK_CHOICE",
  ACTIVE_NAMESPACE: "@appkit/active_namespace",
  CONNECTED_NAMESPACES: "@appkit/connected_namespaces",
  CONNECTION_STATUS: "@appkit/connection_status",
  SIWX_AUTH_TOKEN: "@appkit/siwx-auth-token",
  SIWX_NONCE_TOKEN: "@appkit/siwx-nonce-token",
  TELEGRAM_SOCIAL_PROVIDER: "@appkit/social_provider",
  NATIVE_BALANCE_CACHE: "@appkit/native_balance_cache",
  PORTFOLIO_CACHE: "@appkit/portfolio_cache",
  ENS_CACHE: "@appkit/ens_cache",
  IDENTITY_CACHE: "@appkit/identity_cache",
  PREFERRED_ACCOUNT_TYPES: "@appkit/preferred_account_types",
  CONNECTIONS: "@appkit/connections",
  DISCONNECTED_CONNECTOR_IDS: "@appkit/disconnected_connector_ids"
};
function getSafeConnectorIdKey(namespace) {
  if (!namespace) {
    throw new Error("Namespace is required for CONNECTED_CONNECTOR_ID");
  }
  return `@appkit/${namespace}:connected_connector_id`;
}
var SafeLocalStorage = {
  setItem(key, value) {
    if (isSafe() && value !== void 0) {
      localStorage.setItem(key, value);
    }
  },
  getItem(key) {
    if (isSafe()) {
      return localStorage.getItem(key) || void 0;
    }
    return void 0;
  },
  removeItem(key) {
    if (isSafe()) {
      localStorage.removeItem(key);
    }
  },
  clear() {
    if (isSafe()) {
      localStorage.clear();
    }
  }
};
function isSafe() {
  return typeof window !== "undefined" && typeof localStorage !== "undefined";
}

// node_modules/@reown/appkit-common/dist/esm/src/utils/ThemeUtil.js
function getW3mThemeVariables(themeVariables, themeType) {
  if (themeType === "light") {
    return {
      "--w3m-accent": (themeVariables == null ? void 0 : themeVariables["--w3m-accent"]) || "hsla(231, 100%, 70%, 1)",
      "--w3m-background": "#fff"
    };
  }
  return {
    "--w3m-accent": (themeVariables == null ? void 0 : themeVariables["--w3m-accent"]) || "hsla(230, 100%, 67%, 1)",
    "--w3m-background": "#121313"
  };
}

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConstantsUtil.js
var SECURE_SITE = (
  // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
  (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_ORIGIN"] : void 0) || "https://secure.walletconnect.org"
);
var ONRAMP_PROVIDERS = [
  {
    label: "Meld.io",
    name: "meld",
    feeRange: "1-2%",
    url: "https://meldcrypto.com",
    supportedChains: ["eip155", "solana"]
  },
  {
    label: "Coinbase",
    name: "coinbase",
    feeRange: "1-2%",
    url: "",
    supportedChains: ["eip155"]
  }
];
var MELD_PUBLIC_KEY = "WXETMuFUQmqqybHuRkSgxv:25B8LJHSfpG6LVjR2ytU5Cwh7Z4Sch2ocoU";
var ConstantsUtil2 = {
  FOUR_MINUTES_MS: 24e4,
  TEN_SEC_MS: 1e4,
  FIVE_SEC_MS: 5e3,
  THREE_SEC_MS: 3e3,
  ONE_SEC_MS: 1e3,
  SECURE_SITE,
  SECURE_SITE_DASHBOARD: `${SECURE_SITE}/dashboard`,
  SECURE_SITE_FAVICON: `${SECURE_SITE}/images/favicon.png`,
  RESTRICTED_TIMEZONES: [
    "ASIA/SHANGHAI",
    "ASIA/URUMQI",
    "ASIA/CHONGQING",
    "ASIA/HARBIN",
    "ASIA/KASHGAR",
    "ASIA/MACAU",
    "ASIA/HONG_KONG",
    "ASIA/MACAO",
    "ASIA/BEIJING",
    "ASIA/HARBIN"
  ],
  /**
   * Network name to Coinbase Pay SDK chain name map object
   * @see supported chain names on Coinbase for Pay SDK: https://github.com/coinbase/cbpay-js/blob/d4bda2c05c4d5917c8db6a05476b603546046394/src/types/onramp.ts
   */
  WC_COINBASE_PAY_SDK_CHAINS: [
    "ethereum",
    "arbitrum",
    "polygon",
    "berachain",
    "avalanche-c-chain",
    "optimism",
    "celo",
    "base"
  ],
  WC_COINBASE_PAY_SDK_FALLBACK_CHAIN: "ethereum",
  WC_COINBASE_PAY_SDK_CHAIN_NAME_MAP: {
    Ethereum: "ethereum",
    "Arbitrum One": "arbitrum",
    Polygon: "polygon",
    Berachain: "berachain",
    Avalanche: "avalanche-c-chain",
    "OP Mainnet": "optimism",
    Celo: "celo",
    Base: "base"
  },
  WC_COINBASE_ONRAMP_APP_ID: "bf18c88d-495a-463b-b249-0b9d3656cf5e",
  SWAP_SUGGESTED_TOKENS: [
    "ETH",
    "UNI",
    "1INCH",
    "AAVE",
    "SOL",
    "ADA",
    "AVAX",
    "DOT",
    "LINK",
    "NITRO",
    "GAIA",
    "MILK",
    "TRX",
    "NEAR",
    "GNO",
    "WBTC",
    "DAI",
    "WETH",
    "USDC",
    "USDT",
    "ARB",
    "BAL",
    "BICO",
    "CRV",
    "ENS",
    "MATIC",
    "OP"
  ],
  SWAP_POPULAR_TOKENS: [
    "ETH",
    "UNI",
    "1INCH",
    "AAVE",
    "SOL",
    "ADA",
    "AVAX",
    "DOT",
    "LINK",
    "NITRO",
    "GAIA",
    "MILK",
    "TRX",
    "NEAR",
    "GNO",
    "WBTC",
    "DAI",
    "WETH",
    "USDC",
    "USDT",
    "ARB",
    "BAL",
    "BICO",
    "CRV",
    "ENS",
    "MATIC",
    "OP",
    "METAL",
    "DAI",
    "CHAMP",
    "WOLF",
    "SALE",
    "BAL",
    "BUSD",
    "MUST",
    "BTCpx",
    "ROUTE",
    "HEX",
    "WELT",
    "amDAI",
    "VSQ",
    "VISION",
    "AURUM",
    "pSP",
    "SNX",
    "VC",
    "LINK",
    "CHP",
    "amUSDT",
    "SPHERE",
    "FOX",
    "GIDDY",
    "GFC",
    "OMEN",
    "OX_OLD",
    "DE",
    "WNT"
  ],
  BALANCE_SUPPORTED_CHAINS: ["eip155", "solana"],
  SWAP_SUPPORTED_NETWORKS: [
    // Ethereum'
    "eip155:1",
    // Arbitrum One'
    "eip155:42161",
    // Optimism'
    "eip155:10",
    // ZKSync Era'
    "eip155:324",
    // Base'
    "eip155:8453",
    // BNB Smart Chain'
    "eip155:56",
    // Polygon'
    "eip155:137",
    // Gnosis'
    "eip155:100",
    // Avalanche'
    "eip155:43114",
    // Fantom'
    "eip155:250",
    // Klaytn'
    "eip155:8217",
    // Aurora
    "eip155:1313161554"
  ],
  NAMES_SUPPORTED_CHAIN_NAMESPACES: ["eip155"],
  ONRAMP_SUPPORTED_CHAIN_NAMESPACES: ["eip155", "solana"],
  ACTIVITY_ENABLED_CHAIN_NAMESPACES: ["eip155"],
  NATIVE_TOKEN_ADDRESS: {
    eip155: "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
    solana: "So11111111111111111111111111111111111111111",
    polkadot: "0x",
    bip122: "0x",
    cosmos: "0x"
  },
  CONVERT_SLIPPAGE_TOLERANCE: 1,
  CONNECT_LABELS: {
    MOBILE: "Open and continue in the wallet app",
    WEB: "Open and continue in the wallet app"
  },
  SEND_SUPPORTED_NAMESPACES: ["eip155", "solana"],
  DEFAULT_REMOTE_FEATURES: {
    swaps: ["1inch"],
    onramp: ["meld", "coinbase"],
    email: true,
    socials: [
      "google",
      "x",
      "discord",
      "farcaster",
      "github",
      "apple",
      "facebook"
    ],
    activity: true,
    reownBranding: true,
    multiWallet: false
  },
  DEFAULT_REMOTE_FEATURES_DISABLED: {
    email: false,
    socials: false,
    swaps: false,
    onramp: false,
    activity: false,
    reownBranding: false
  },
  DEFAULT_FEATURES: {
    receive: true,
    send: true,
    emailShowWallets: true,
    connectorTypeOrder: [
      "walletConnect",
      "recent",
      "injected",
      "featured",
      "custom",
      "external",
      "recommended"
    ],
    analytics: true,
    allWallets: true,
    legalCheckbox: false,
    smartSessions: false,
    collapseWallets: false,
    walletFeaturesOrder: ["onramp", "swaps", "receive", "send"],
    connectMethodsOrder: void 0,
    pay: false
  },
  DEFAULT_SOCIALS: [
    "google",
    "x",
    "farcaster",
    "discord",
    "apple",
    "github",
    "facebook"
  ],
  DEFAULT_ACCOUNT_TYPES: {
    bip122: "payment",
    eip155: "smartAccount",
    polkadot: "eoa",
    solana: "eoa"
  },
  ADAPTER_TYPES: {
    UNIVERSAL: "universal",
    SOLANA: "solana",
    WAGMI: "wagmi",
    ETHERS: "ethers",
    ETHERS5: "ethers5",
    BITCOIN: "bitcoin"
  },
  SIWX_DEFAULTS: {
    signOutOnDisconnect: true
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/StorageUtil.js
var StorageUtil = {
  // Cache expiry in milliseconds
  cacheExpiry: {
    portfolio: 3e4,
    nativeBalance: 3e4,
    ens: 3e5,
    identity: 3e5
  },
  isCacheExpired(timestamp, cacheExpiry) {
    return Date.now() - timestamp > cacheExpiry;
  },
  getActiveNetworkProps() {
    const namespace = StorageUtil.getActiveNamespace();
    const caipNetworkId = StorageUtil.getActiveCaipNetworkId();
    const stringChainId = caipNetworkId ? caipNetworkId.split(":")[1] : void 0;
    const chainId = stringChainId ? isNaN(Number(stringChainId)) ? stringChainId : Number(stringChainId) : void 0;
    return {
      namespace,
      caipNetworkId,
      chainId
    };
  },
  setWalletConnectDeepLink({ name: name2, href }) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.DEEPLINK_CHOICE, JSON.stringify({ href, name: name2 }));
    } catch {
      console.info("Unable to set WalletConnect deep link");
    }
  },
  getWalletConnectDeepLink() {
    try {
      const deepLink = SafeLocalStorage.getItem(SafeLocalStorageKeys.DEEPLINK_CHOICE);
      if (deepLink) {
        return JSON.parse(deepLink);
      }
    } catch {
      console.info("Unable to get WalletConnect deep link");
    }
    return void 0;
  },
  deleteWalletConnectDeepLink() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.DEEPLINK_CHOICE);
    } catch {
      console.info("Unable to delete WalletConnect deep link");
    }
  },
  setActiveNamespace(namespace) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ACTIVE_NAMESPACE, namespace);
    } catch {
      console.info("Unable to set active namespace");
    }
  },
  setActiveCaipNetworkId(caipNetworkId) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID, caipNetworkId);
      StorageUtil.setActiveNamespace(caipNetworkId.split(":")[0]);
    } catch {
      console.info("Unable to set active caip network id");
    }
  },
  getActiveCaipNetworkId() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);
    } catch {
      console.info("Unable to get active caip network id");
      return void 0;
    }
  },
  deleteActiveCaipNetworkId() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);
    } catch {
      console.info("Unable to delete active caip network id");
    }
  },
  deleteConnectedConnectorId(namespace) {
    try {
      const key = getSafeConnectorIdKey(namespace);
      SafeLocalStorage.removeItem(key);
    } catch {
      console.info("Unable to delete connected connector id");
    }
  },
  setAppKitRecent(wallet) {
    try {
      const recentWallets = StorageUtil.getRecentWallets();
      const exists = recentWallets.find((w6) => w6.id === wallet.id);
      if (!exists) {
        recentWallets.unshift(wallet);
        if (recentWallets.length > 2) {
          recentWallets.pop();
        }
        SafeLocalStorage.setItem(SafeLocalStorageKeys.RECENT_WALLETS, JSON.stringify(recentWallets));
      }
    } catch {
      console.info("Unable to set AppKit recent");
    }
  },
  getRecentWallets() {
    try {
      const recent = SafeLocalStorage.getItem(SafeLocalStorageKeys.RECENT_WALLETS);
      return recent ? JSON.parse(recent) : [];
    } catch {
      console.info("Unable to get AppKit recent");
    }
    return [];
  },
  setConnectedConnectorId(namespace, connectorId) {
    try {
      const key = getSafeConnectorIdKey(namespace);
      SafeLocalStorage.setItem(key, connectorId);
    } catch {
      console.info("Unable to set Connected Connector Id");
    }
  },
  getActiveNamespace() {
    try {
      const activeNamespace = SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_NAMESPACE);
      return activeNamespace;
    } catch {
      console.info("Unable to get active namespace");
    }
    return void 0;
  },
  getConnectedConnectorId(namespace) {
    if (!namespace) {
      return void 0;
    }
    try {
      const key = getSafeConnectorIdKey(namespace);
      return SafeLocalStorage.getItem(key);
    } catch (e3) {
      console.info("Unable to get connected connector id in namespace", namespace);
    }
    return void 0;
  },
  setConnectedSocialProvider(socialProvider) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTED_SOCIAL, socialProvider);
    } catch {
      console.info("Unable to set connected social provider");
    }
  },
  getConnectedSocialProvider() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_SOCIAL);
    } catch {
      console.info("Unable to get connected social provider");
    }
    return void 0;
  },
  deleteConnectedSocialProvider() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.CONNECTED_SOCIAL);
    } catch {
      console.info("Unable to delete connected social provider");
    }
  },
  getConnectedSocialUsername() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_SOCIAL_USERNAME);
    } catch {
      console.info("Unable to get connected social username");
    }
    return void 0;
  },
  getStoredActiveCaipNetworkId() {
    var _a2;
    const storedCaipNetworkId = SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);
    const networkId = (_a2 = storedCaipNetworkId == null ? void 0 : storedCaipNetworkId.split(":")) == null ? void 0 : _a2[1];
    return networkId;
  },
  setConnectionStatus(status) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTION_STATUS, status);
    } catch {
      console.info("Unable to set connection status");
    }
  },
  getConnectionStatus() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTION_STATUS);
    } catch {
      return void 0;
    }
  },
  getConnectedNamespaces() {
    try {
      const namespaces = SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_NAMESPACES);
      if (!(namespaces == null ? void 0 : namespaces.length)) {
        return [];
      }
      return namespaces.split(",");
    } catch {
      return [];
    }
  },
  setConnectedNamespaces(namespaces) {
    try {
      const uniqueNamespaces = Array.from(new Set(namespaces));
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTED_NAMESPACES, uniqueNamespaces.join(","));
    } catch {
      console.info("Unable to set namespaces in storage");
    }
  },
  addConnectedNamespace(namespace) {
    try {
      const namespaces = StorageUtil.getConnectedNamespaces();
      if (!namespaces.includes(namespace)) {
        namespaces.push(namespace);
        StorageUtil.setConnectedNamespaces(namespaces);
      }
    } catch {
      console.info("Unable to add connected namespace");
    }
  },
  removeConnectedNamespace(namespace) {
    try {
      const namespaces = StorageUtil.getConnectedNamespaces();
      const index = namespaces.indexOf(namespace);
      if (index > -1) {
        namespaces.splice(index, 1);
        StorageUtil.setConnectedNamespaces(namespaces);
      }
    } catch {
      console.info("Unable to remove connected namespace");
    }
  },
  getTelegramSocialProvider() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER);
    } catch {
      console.info("Unable to get telegram social provider");
      return null;
    }
  },
  setTelegramSocialProvider(socialProvider) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER, socialProvider);
    } catch {
      console.info("Unable to set telegram social provider");
    }
  },
  removeTelegramSocialProvider() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER);
    } catch {
      console.info("Unable to remove telegram social provider");
    }
  },
  getBalanceCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.PORTFOLIO_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get balance cache");
    }
    return cache;
  },
  removeAddressFromBalanceCache(caipAddress) {
    try {
      const cache = StorageUtil.getBalanceCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.PORTFOLIO_CACHE, JSON.stringify({ ...cache, [caipAddress]: void 0 }));
    } catch {
      console.info("Unable to remove address from balance cache", caipAddress);
    }
  },
  getBalanceCacheForCaipAddress(caipAddress) {
    try {
      const cache = StorageUtil.getBalanceCache();
      const balanceCache = cache[caipAddress];
      if (balanceCache && !this.isCacheExpired(balanceCache.timestamp, this.cacheExpiry.portfolio)) {
        return balanceCache.balance;
      }
      StorageUtil.removeAddressFromBalanceCache(caipAddress);
    } catch {
      console.info("Unable to get balance cache for address", caipAddress);
    }
    return void 0;
  },
  updateBalanceCache(params) {
    try {
      const cache = StorageUtil.getBalanceCache();
      cache[params.caipAddress] = params;
      SafeLocalStorage.setItem(SafeLocalStorageKeys.PORTFOLIO_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update balance cache", params);
    }
  },
  getNativeBalanceCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get balance cache");
    }
    return cache;
  },
  removeAddressFromNativeBalanceCache(caipAddress) {
    try {
      const cache = StorageUtil.getBalanceCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE, JSON.stringify({ ...cache, [caipAddress]: void 0 }));
    } catch {
      console.info("Unable to remove address from balance cache", caipAddress);
    }
  },
  getNativeBalanceCacheForCaipAddress(caipAddress) {
    try {
      const cache = StorageUtil.getNativeBalanceCache();
      const nativeBalanceCache = cache[caipAddress];
      if (nativeBalanceCache && !this.isCacheExpired(nativeBalanceCache.timestamp, this.cacheExpiry.nativeBalance)) {
        return nativeBalanceCache;
      }
      console.info("Discarding cache for address", caipAddress);
      StorageUtil.removeAddressFromBalanceCache(caipAddress);
    } catch {
      console.info("Unable to get balance cache for address", caipAddress);
    }
    return void 0;
  },
  updateNativeBalanceCache(params) {
    try {
      const cache = StorageUtil.getNativeBalanceCache();
      cache[params.caipAddress] = params;
      SafeLocalStorage.setItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update balance cache", params);
    }
  },
  getEnsCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.ENS_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get ens name cache");
    }
    return cache;
  },
  getEnsFromCacheForAddress(address) {
    try {
      const cache = StorageUtil.getEnsCache();
      const ensCache = cache[address];
      if (ensCache && !this.isCacheExpired(ensCache.timestamp, this.cacheExpiry.ens)) {
        return ensCache.ens;
      }
      StorageUtil.removeEnsFromCache(address);
    } catch {
      console.info("Unable to get ens name from cache", address);
    }
    return void 0;
  },
  updateEnsCache(params) {
    try {
      const cache = StorageUtil.getEnsCache();
      cache[params.address] = params;
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ENS_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update ens name cache", params);
    }
  },
  removeEnsFromCache(address) {
    try {
      const cache = StorageUtil.getEnsCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ENS_CACHE, JSON.stringify({ ...cache, [address]: void 0 }));
    } catch {
      console.info("Unable to remove ens name from cache", address);
    }
  },
  getIdentityCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.IDENTITY_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get identity cache");
    }
    return cache;
  },
  getIdentityFromCacheForAddress(address) {
    try {
      const cache = StorageUtil.getIdentityCache();
      const identityCache = cache[address];
      if (identityCache && !this.isCacheExpired(identityCache.timestamp, this.cacheExpiry.identity)) {
        return identityCache.identity;
      }
      StorageUtil.removeIdentityFromCache(address);
    } catch {
      console.info("Unable to get identity from cache", address);
    }
    return void 0;
  },
  updateIdentityCache(params) {
    try {
      const cache = StorageUtil.getIdentityCache();
      cache[params.address] = {
        identity: params.identity,
        timestamp: params.timestamp
      };
      SafeLocalStorage.setItem(SafeLocalStorageKeys.IDENTITY_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update identity cache", params);
    }
  },
  removeIdentityFromCache(address) {
    try {
      const cache = StorageUtil.getIdentityCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.IDENTITY_CACHE, JSON.stringify({ ...cache, [address]: void 0 }));
    } catch {
      console.info("Unable to remove identity from cache", address);
    }
  },
  clearAddressCache() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.PORTFOLIO_CACHE);
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE);
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.ENS_CACHE);
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.IDENTITY_CACHE);
    } catch {
      console.info("Unable to clear address cache");
    }
  },
  setPreferredAccountTypes(accountTypes) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.PREFERRED_ACCOUNT_TYPES, JSON.stringify(accountTypes));
    } catch {
      console.info("Unable to set preferred account types", accountTypes);
    }
  },
  getPreferredAccountTypes() {
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.PREFERRED_ACCOUNT_TYPES);
      if (!result) {
        return {};
      }
      return JSON.parse(result);
    } catch {
      console.info("Unable to get preferred account types");
    }
    return {};
  },
  setConnections(connections, chainNamespace) {
    try {
      const existingConnections = StorageUtil.getConnections();
      const existing = existingConnections[chainNamespace] ?? [];
      const connectorConnectionMap = /* @__PURE__ */ new Map();
      for (const conn of existing) {
        connectorConnectionMap.set(conn.connectorId, { ...conn });
      }
      for (const conn of connections) {
        const existingConn = connectorConnectionMap.get(conn.connectorId);
        const isAuth = conn.connectorId === ConstantsUtil.CONNECTOR_ID.AUTH;
        if (existingConn && !isAuth) {
          const existingAddrs = new Set(existingConn.accounts.map((a4) => a4.address.toLowerCase()));
          const newAccounts = conn.accounts.filter((a4) => !existingAddrs.has(a4.address.toLowerCase()));
          existingConn.accounts.push(...newAccounts);
        } else {
          connectorConnectionMap.set(conn.connectorId, { ...conn });
        }
      }
      const dedupedConnections = {
        ...existingConnections,
        [chainNamespace]: Array.from(connectorConnectionMap.values())
      };
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTIONS, JSON.stringify(dedupedConnections));
    } catch (error) {
      console.error("Unable to sync connections to storage", error);
    }
  },
  getConnections() {
    try {
      const connectionsStorage = SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTIONS);
      if (!connectionsStorage) {
        return {};
      }
      return JSON.parse(connectionsStorage);
    } catch (error) {
      console.error("Unable to get connections from storage", error);
      return {};
    }
  },
  deleteAddressFromConnection({ connectorId, address, namespace }) {
    try {
      const connections = StorageUtil.getConnections();
      const namespaceConnections = connections[namespace] ?? [];
      const connectionMap = new Map(namespaceConnections.map((conn) => [conn.connectorId, conn]));
      const connector = connectionMap.get(connectorId);
      if (connector) {
        const updatedAccounts = connector.accounts.filter((acc) => acc.address.toLowerCase() !== address.toLowerCase());
        if (updatedAccounts.length === 0) {
          connectionMap.delete(connectorId);
        } else {
          connectionMap.set(connectorId, {
            ...connector,
            accounts: connector.accounts.filter((acc) => acc.address.toLowerCase() !== address.toLowerCase())
          });
        }
      }
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTIONS, JSON.stringify({
        ...connections,
        [namespace]: Array.from(connectionMap.values())
      }));
    } catch {
      console.error(`Unable to remove address "${address}" from connector "${connectorId}" in namespace "${namespace}"`);
    }
  },
  getDisconnectedConnectorIds() {
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.DISCONNECTED_CONNECTOR_IDS);
      if (!result) {
        return {};
      }
      return JSON.parse(result);
    } catch {
      console.info("Unable to get disconnected connector ids");
    }
    return {};
  },
  addDisconnectedConnectorId(connectorId, chainNamespace) {
    try {
      const currentDisconnectedConnectorIds = StorageUtil.getDisconnectedConnectorIds();
      const disconnectedConnectorIdsByNamespace = currentDisconnectedConnectorIds[chainNamespace] ?? [];
      disconnectedConnectorIdsByNamespace.push(connectorId);
      SafeLocalStorage.setItem(SafeLocalStorageKeys.DISCONNECTED_CONNECTOR_IDS, JSON.stringify({
        ...currentDisconnectedConnectorIds,
        [chainNamespace]: Array.from(new Set(disconnectedConnectorIdsByNamespace))
      }));
    } catch {
      console.error(`Unable to set disconnected connector id "${connectorId}" for namespace "${chainNamespace}"`);
    }
  },
  removeDisconnectedConnectorId(connectorId, chainNamespace) {
    try {
      const currentDisconnectedConnectorIds = StorageUtil.getDisconnectedConnectorIds();
      let disconnectedConnectorIdsByNamespace = currentDisconnectedConnectorIds[chainNamespace] ?? [];
      disconnectedConnectorIdsByNamespace = disconnectedConnectorIdsByNamespace.filter((id) => id.toLowerCase() !== connectorId.toLowerCase());
      SafeLocalStorage.setItem(SafeLocalStorageKeys.DISCONNECTED_CONNECTOR_IDS, JSON.stringify({
        ...currentDisconnectedConnectorIds,
        [chainNamespace]: Array.from(new Set(disconnectedConnectorIdsByNamespace))
      }));
    } catch {
      console.error(`Unable to remove disconnected connector id "${connectorId}" for namespace "${chainNamespace}"`);
    }
  },
  isConnectorDisconnected(connectorId, chainNamespace) {
    try {
      const currentDisconnectedConnectorIds = StorageUtil.getDisconnectedConnectorIds();
      const disconnectedConnectorIdsByNamespace = currentDisconnectedConnectorIds[chainNamespace] ?? [];
      return disconnectedConnectorIdsByNamespace.some((id) => id.toLowerCase() === connectorId.toLowerCase());
    } catch {
      console.info(`Unable to get disconnected connector id "${connectorId}" for namespace "${chainNamespace}"`);
    }
    return false;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js
var CoreHelperUtil = {
  isMobile() {
    var _a2;
    if (this.isClient()) {
      return Boolean((window == null ? void 0 : window.matchMedia) && typeof window.matchMedia === "function" && ((_a2 = window.matchMedia("(pointer:coarse)")) == null ? void 0 : _a2.matches) || /Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent));
    }
    return false;
  },
  checkCaipNetwork(network, networkName = "") {
    return network == null ? void 0 : network.caipNetworkId.toLocaleLowerCase().includes(networkName.toLowerCase());
  },
  isAndroid() {
    if (!this.isMobile()) {
      return false;
    }
    const ua2 = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return CoreHelperUtil.isMobile() && ua2.includes("android");
  },
  isIos() {
    if (!this.isMobile()) {
      return false;
    }
    const ua2 = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return ua2.includes("iphone") || ua2.includes("ipad");
  },
  isSafari() {
    if (!this.isClient()) {
      return false;
    }
    const ua2 = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return ua2.includes("safari");
  },
  isClient() {
    return typeof window !== "undefined";
  },
  isPairingExpired(expiry) {
    return expiry ? expiry - Date.now() <= ConstantsUtil2.TEN_SEC_MS : true;
  },
  isAllowedRetry(lastRetry, differenceMs = ConstantsUtil2.ONE_SEC_MS) {
    return Date.now() - lastRetry >= differenceMs;
  },
  copyToClopboard(text) {
    navigator.clipboard.writeText(text);
  },
  isIframe() {
    try {
      return (window == null ? void 0 : window.self) !== (window == null ? void 0 : window.top);
    } catch (e3) {
      return false;
    }
  },
  isSafeApp() {
    var _a2, _b;
    if (CoreHelperUtil.isClient() && window.self !== window.top) {
      try {
        const ancestor = (_b = (_a2 = window == null ? void 0 : window.location) == null ? void 0 : _a2.ancestorOrigins) == null ? void 0 : _b[0];
        const safeAppUrl = "https://app.safe.global";
        if (ancestor) {
          const ancestorUrl = new URL(ancestor);
          const safeUrl = new URL(safeAppUrl);
          return ancestorUrl.hostname === safeUrl.hostname;
        }
      } catch {
        return false;
      }
    }
    return false;
  },
  getPairingExpiry() {
    return Date.now() + ConstantsUtil2.FOUR_MINUTES_MS;
  },
  getNetworkId(caipAddress) {
    return caipAddress == null ? void 0 : caipAddress.split(":")[1];
  },
  getPlainAddress(caipAddress) {
    return caipAddress == null ? void 0 : caipAddress.split(":")[2];
  },
  async wait(milliseconds) {
    return new Promise((resolve) => {
      setTimeout(resolve, milliseconds);
    });
  },
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  debounce(func, timeout = 500) {
    let timer = void 0;
    return (...args) => {
      function next() {
        func(...args);
      }
      if (timer) {
        clearTimeout(timer);
      }
      timer = setTimeout(next, timeout);
    };
  },
  isHttpUrl(url) {
    return url.startsWith("http://") || url.startsWith("https://");
  },
  formatNativeUrl(appUrl, wcUri, universalLink = null) {
    if (CoreHelperUtil.isHttpUrl(appUrl)) {
      return this.formatUniversalUrl(appUrl, wcUri);
    }
    let safeAppUrl = appUrl;
    let safeUniversalLink = universalLink;
    if (!safeAppUrl.includes("://")) {
      safeAppUrl = appUrl.replaceAll("/", "").replaceAll(":", "");
      safeAppUrl = `${safeAppUrl}://`;
    }
    if (!safeAppUrl.endsWith("/")) {
      safeAppUrl = `${safeAppUrl}/`;
    }
    if (safeUniversalLink && !(safeUniversalLink == null ? void 0 : safeUniversalLink.endsWith("/"))) {
      safeUniversalLink = `${safeUniversalLink}/`;
    }
    if (this.isTelegram() && this.isAndroid()) {
      wcUri = encodeURIComponent(wcUri);
    }
    const encodedWcUrl = encodeURIComponent(wcUri);
    return {
      redirect: `${safeAppUrl}wc?uri=${encodedWcUrl}`,
      redirectUniversalLink: safeUniversalLink ? `${safeUniversalLink}wc?uri=${encodedWcUrl}` : void 0,
      href: safeAppUrl
    };
  },
  formatUniversalUrl(appUrl, wcUri) {
    if (!CoreHelperUtil.isHttpUrl(appUrl)) {
      return this.formatNativeUrl(appUrl, wcUri);
    }
    let safeAppUrl = appUrl;
    if (!safeAppUrl.endsWith("/")) {
      safeAppUrl = `${safeAppUrl}/`;
    }
    const encodedWcUrl = encodeURIComponent(wcUri);
    return {
      redirect: `${safeAppUrl}wc?uri=${encodedWcUrl}`,
      href: safeAppUrl
    };
  },
  getOpenTargetForPlatform(target) {
    if (target === "popupWindow") {
      return target;
    }
    if (this.isTelegram()) {
      if (StorageUtil.getTelegramSocialProvider()) {
        return "_top";
      }
      return "_blank";
    }
    return target;
  },
  openHref(href, target, features) {
    window == null ? void 0 : window.open(href, this.getOpenTargetForPlatform(target), features || "noreferrer noopener");
  },
  returnOpenHref(href, target, features) {
    return window == null ? void 0 : window.open(href, this.getOpenTargetForPlatform(target), features || "noreferrer noopener");
  },
  isTelegram() {
    return typeof window !== "undefined" && // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (Boolean(window.TelegramWebviewProxy) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Boolean(window.Telegram) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Boolean(window.TelegramWebviewProxyProto));
  },
  isPWA() {
    var _a2, _b;
    if (typeof window === "undefined") {
      return false;
    }
    const isStandaloneDisplayMode = (window == null ? void 0 : window.matchMedia) && typeof window.matchMedia === "function" ? (_a2 = window.matchMedia("(display-mode: standalone)")) == null ? void 0 : _a2.matches : false;
    const isIOSStandalone = (_b = window == null ? void 0 : window.navigator) == null ? void 0 : _b.standalone;
    return Boolean(isStandaloneDisplayMode || isIOSStandalone);
  },
  async preloadImage(src2) {
    const imagePromise = new Promise((resolve, reject) => {
      const image = new Image();
      image.onload = resolve;
      image.onerror = reject;
      image.crossOrigin = "anonymous";
      image.src = src2;
    });
    return Promise.race([imagePromise, CoreHelperUtil.wait(2e3)]);
  },
  formatBalance(balance, symbol) {
    let formattedBalance = "0.000";
    if (typeof balance === "string") {
      const number = Number(balance);
      if (number) {
        const formattedValue = Math.floor(number * 1e3) / 1e3;
        if (formattedValue) {
          formattedBalance = formattedValue.toString();
        }
      }
    }
    return `${formattedBalance}${symbol ? ` ${symbol}` : ""}`;
  },
  formatBalance2(balance, symbol) {
    var _a2;
    let formattedBalance = void 0;
    if (balance === "0") {
      formattedBalance = "0";
    } else if (typeof balance === "string") {
      const number = Number(balance);
      if (number) {
        formattedBalance = (_a2 = number.toString().match(/^-?\d+(?:\.\d{0,3})?/u)) == null ? void 0 : _a2[0];
      }
    }
    return {
      value: formattedBalance ?? "0",
      rest: formattedBalance === "0" ? "000" : "",
      symbol
    };
  },
  getApiUrl() {
    return ConstantsUtil.W3M_API_URL;
  },
  getBlockchainApiUrl() {
    return ConstantsUtil.BLOCKCHAIN_API_RPC_URL;
  },
  getAnalyticsUrl() {
    return ConstantsUtil.PULSE_API_URL;
  },
  getUUID() {
    if (crypto == null ? void 0 : crypto.randomUUID) {
      return crypto.randomUUID();
    }
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (c8) => {
      const r4 = Math.random() * 16 | 0;
      const v6 = c8 === "x" ? r4 : r4 & 3 | 8;
      return v6.toString(16);
    });
  },
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  parseError(error) {
    var _a2, _b;
    if (typeof error === "string") {
      return error;
    } else if (typeof ((_b = (_a2 = error == null ? void 0 : error.issues) == null ? void 0 : _a2[0]) == null ? void 0 : _b.message) === "string") {
      return error.issues[0].message;
    } else if (error instanceof Error) {
      return error.message;
    }
    return "Unknown error";
  },
  sortRequestedNetworks(approvedIds, requestedNetworks = []) {
    const approvedIndexMap = {};
    if (requestedNetworks && approvedIds) {
      approvedIds.forEach((id, index) => {
        approvedIndexMap[id] = index;
      });
      requestedNetworks.sort((a4, b6) => {
        const indexA = approvedIndexMap[a4.id];
        const indexB = approvedIndexMap[b6.id];
        if (indexA !== void 0 && indexB !== void 0) {
          return indexA - indexB;
        } else if (indexA !== void 0) {
          return -1;
        } else if (indexB !== void 0) {
          return 1;
        }
        return 0;
      });
    }
    return requestedNetworks;
  },
  calculateBalance(array) {
    let sum = 0;
    for (const item of array) {
      sum += item.value ?? 0;
    }
    return sum;
  },
  formatTokenBalance(number) {
    const roundedNumber = number.toFixed(2);
    const [dollars, pennies] = roundedNumber.split(".");
    return { dollars, pennies };
  },
  isAddress(address, chain2 = "eip155") {
    switch (chain2) {
      case "eip155":
        if (!/^(?:0x)?[0-9a-f]{40}$/iu.test(address)) {
          return false;
        } else if (/^(?:0x)?[0-9a-f]{40}$/iu.test(address) || /^(?:0x)?[0-9A-F]{40}$/iu.test(address)) {
          return true;
        }
        return false;
      case "solana":
        return /[1-9A-HJ-NP-Za-km-z]{32,44}$/iu.test(address);
      default:
        return false;
    }
  },
  uniqueBy(arr, key) {
    const set2 = /* @__PURE__ */ new Set();
    return arr.filter((item) => {
      const keyValue = item[key];
      if (set2.has(keyValue)) {
        return false;
      }
      set2.add(keyValue);
      return true;
    });
  },
  generateSdkVersion(adapters, platform, version2) {
    const hasNoAdapters = adapters.length === 0;
    const adapterNames = hasNoAdapters ? ConstantsUtil2.ADAPTER_TYPES.UNIVERSAL : adapters.map((adapter) => adapter.adapterType).join(",");
    return `${platform}-${adapterNames}-${version2}`;
  },
  // eslint-disable-next-line max-params
  createAccount(namespace, address, type, publicKey, path) {
    return {
      namespace,
      address,
      type,
      publicKey,
      path
    };
  },
  isCaipAddress(address) {
    if (typeof address !== "string") {
      return false;
    }
    const sections = address.split(":");
    const namespace = sections[0];
    return sections.filter(Boolean).length === 3 && namespace in ConstantsUtil.CHAIN_NAME_MAP;
  },
  getAccount(account) {
    if (!account) {
      return {
        address: void 0,
        chainId: void 0
      };
    }
    if (typeof account === "string") {
      return {
        address: account,
        chainId: void 0
      };
    }
    return {
      address: account.address,
      chainId: account.chainId
    };
  },
  isMac() {
    const ua2 = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return ua2.includes("macintosh") && !ua2.includes("safari");
  },
  formatTelegramSocialLoginUrl(url) {
    const valueToInject = `--${encodeURIComponent(window == null ? void 0 : window.location.href)}`;
    const paramToInject = "state=";
    const parsedUrl = new URL(url);
    if (parsedUrl.host === "auth.magic.link") {
      const providerParam = "provider_authorization_url=";
      const providerUrl = url.substring(url.indexOf(providerParam) + providerParam.length);
      const resultUrl = this.injectIntoUrl(decodeURIComponent(providerUrl), paramToInject, valueToInject);
      return url.replace(providerUrl, encodeURIComponent(resultUrl));
    }
    return this.injectIntoUrl(url, paramToInject, valueToInject);
  },
  injectIntoUrl(url, key, appendString) {
    const keyIndex = url.indexOf(key);
    if (keyIndex === -1) {
      throw new Error(`${key} parameter not found in the URL: ${url}`);
    }
    const keyEndIndex = url.indexOf("&", keyIndex);
    const keyLength = key.length;
    const keyParamEnd = keyEndIndex !== -1 ? keyEndIndex : url.length;
    const beforeKeyValue = url.substring(0, keyIndex + keyLength);
    const currentKeyValue = url.substring(keyIndex + keyLength, keyParamEnd);
    const afterKeyValue = url.substring(keyEndIndex);
    const newKeyValue = currentKeyValue + appendString;
    const newUrl = beforeKeyValue + newKeyValue + afterKeyValue;
    return newUrl;
  }
};

// node_modules/proxy-compare/dist/index.modern.js
var e = Symbol();
var t = Symbol();
var r = "a";
var n = "w";
var o = (e3, t2) => new Proxy(e3, t2);
var s = Object.getPrototypeOf;
var c = /* @__PURE__ */ new WeakMap();
var l = (e3) => e3 && (c.has(e3) ? c.get(e3) : s(e3) === Object.prototype || s(e3) === Array.prototype);
var f = (e3) => "object" == typeof e3 && null !== e3;
var i = (e3) => {
  if (Array.isArray(e3)) return Array.from(e3);
  const t2 = Object.getOwnPropertyDescriptors(e3);
  return Object.values(t2).forEach((e4) => {
    e4.configurable = true;
  }), Object.create(s(e3), t2);
};
var u = (e3) => e3[t] || e3;
var a = (s4, c8, f9, p6) => {
  if (!l(s4)) return s4;
  let g4 = p6 && p6.get(s4);
  if (!g4) {
    const e3 = u(s4);
    g4 = ((e4) => Object.values(Object.getOwnPropertyDescriptors(e4)).some((e5) => !e5.configurable && !e5.writable))(e3) ? [e3, i(e3)] : [e3], null == p6 || p6.set(s4, g4);
  }
  const [y7, h7] = g4;
  let w6 = f9 && f9.get(y7);
  return w6 && w6[1].f === !!h7 || (w6 = ((o6, s5) => {
    const c9 = { f: s5 };
    let l9 = false;
    const f10 = (e3, t2) => {
      if (!l9) {
        let s6 = c9[r].get(o6);
        if (s6 || (s6 = {}, c9[r].set(o6, s6)), e3 === n) s6[n] = true;
        else {
          let r4 = s6[e3];
          r4 || (r4 = /* @__PURE__ */ new Set(), s6[e3] = r4), r4.add(t2);
        }
      }
    }, i6 = { get: (e3, n6) => n6 === t ? o6 : (f10("k", n6), a(Reflect.get(e3, n6), c9[r], c9.c, c9.t)), has: (t2, n6) => n6 === e ? (l9 = true, c9[r].delete(o6), true) : (f10("h", n6), Reflect.has(t2, n6)), getOwnPropertyDescriptor: (e3, t2) => (f10("o", t2), Reflect.getOwnPropertyDescriptor(e3, t2)), ownKeys: (e3) => (f10(n), Reflect.ownKeys(e3)) };
    return s5 && (i6.set = i6.deleteProperty = () => false), [i6, c9];
  })(y7, !!h7), w6[1].p = o(h7 || y7, w6[0]), f9 && f9.set(y7, w6)), w6[1][r] = c8, w6[1].c = f9, w6[1].t = p6, w6[1].p;
};
var p = (e3, t2, r4, o6, s4 = Object.is) => {
  if (s4(e3, t2)) return false;
  if (!f(e3) || !f(t2)) return true;
  const c8 = r4.get(u(e3));
  if (!c8) return true;
  if (o6) {
    const r5 = o6.get(e3);
    if (r5 && r5.n === t2) return r5.g;
    o6.set(e3, { n: t2, g: false });
  }
  let l9 = null;
  try {
    for (const r5 of c8.h || []) if (l9 = Reflect.has(e3, r5) !== Reflect.has(t2, r5), l9) return l9;
    if (true === c8[n]) {
      if (l9 = ((e4, t3) => {
        const r5 = Reflect.ownKeys(e4), n6 = Reflect.ownKeys(t3);
        return r5.length !== n6.length || r5.some((e5, t4) => e5 !== n6[t4]);
      })(e3, t2), l9) return l9;
    } else for (const r5 of c8.o || []) if (l9 = !!Reflect.getOwnPropertyDescriptor(e3, r5) != !!Reflect.getOwnPropertyDescriptor(t2, r5), l9) return l9;
    for (const n6 of c8.k || []) if (l9 = p(e3[n6], t2[n6], r4, o6, s4), l9) return l9;
    return null === l9 && (l9 = true), l9;
  } finally {
    o6 && o6.set(e3, { n: t2, g: l9 });
  }
};
var y = (e3) => l(e3) && e3[t] || null;
var h = (e3, t2 = true) => {
  c.set(e3, t2);
};
var w = (e3, t2, r4) => {
  const o6 = [], s4 = /* @__PURE__ */ new WeakSet(), c8 = (e4, l9) => {
    if (s4.has(e4)) return;
    f(e4) && s4.add(e4);
    const i6 = f(e4) && t2.get(u(e4));
    if (i6) {
      var a4, p6;
      if (null == (a4 = i6.h) || a4.forEach((e5) => {
        const t3 = `:has(${String(e5)})`;
        o6.push(l9 ? [...l9, t3] : [t3]);
      }), true === i6[n]) {
        const e5 = ":ownKeys";
        o6.push(l9 ? [...l9, e5] : [e5]);
      } else {
        var g4;
        null == (g4 = i6.o) || g4.forEach((e5) => {
          const t3 = `:hasOwn(${String(e5)})`;
          o6.push(l9 ? [...l9, t3] : [t3]);
        });
      }
      null == (p6 = i6.k) || p6.forEach((t3) => {
        r4 && !("value" in (Object.getOwnPropertyDescriptor(e4, t3) || {})) || c8(e4[t3], l9 ? [...l9, t3] : [t3]);
      });
    } else l9 && o6.push(l9);
  };
  return c8(e3), o6;
};

// node_modules/valtio/esm/vanilla.mjs
var isObject = (x6) => typeof x6 === "object" && x6 !== null;
var proxyStateMap = /* @__PURE__ */ new WeakMap();
var refSet = /* @__PURE__ */ new WeakSet();
var buildProxyFunction = (objectIs = Object.is, newProxy = (target, handler) => new Proxy(target, handler), canProxy = (x6) => isObject(x6) && !refSet.has(x6) && (Array.isArray(x6) || !(Symbol.iterator in x6)) && !(x6 instanceof WeakMap) && !(x6 instanceof WeakSet) && !(x6 instanceof Error) && !(x6 instanceof Number) && !(x6 instanceof Date) && !(x6 instanceof String) && !(x6 instanceof RegExp) && !(x6 instanceof ArrayBuffer), defaultHandlePromise = (promise) => {
  switch (promise.status) {
    case "fulfilled":
      return promise.value;
    case "rejected":
      throw promise.reason;
    default:
      throw promise;
  }
}, snapCache = /* @__PURE__ */ new WeakMap(), createSnapshot = (target, version2, handlePromise = defaultHandlePromise) => {
  const cache = snapCache.get(target);
  if ((cache == null ? void 0 : cache[0]) === version2) {
    return cache[1];
  }
  const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));
  h(snap, true);
  snapCache.set(target, [version2, snap]);
  Reflect.ownKeys(target).forEach((key) => {
    if (Object.getOwnPropertyDescriptor(snap, key)) {
      return;
    }
    const value = Reflect.get(target, key);
    const { enumerable } = Reflect.getOwnPropertyDescriptor(
      target,
      key
    );
    const desc = {
      value,
      enumerable,
      // This is intentional to avoid copying with proxy-compare.
      // It's still non-writable, so it avoids assigning a value.
      configurable: true
    };
    if (refSet.has(value)) {
      h(value, false);
    } else if (value instanceof Promise) {
      delete desc.value;
      desc.get = () => handlePromise(value);
    } else if (proxyStateMap.has(value)) {
      const [target2, ensureVersion] = proxyStateMap.get(
        value
      );
      desc.value = createSnapshot(
        target2,
        ensureVersion(),
        handlePromise
      );
    }
    Object.defineProperty(snap, key, desc);
  });
  return Object.preventExtensions(snap);
}, proxyCache = /* @__PURE__ */ new WeakMap(), versionHolder = [1, 1], proxyFunction = (initialObject) => {
  if (!isObject(initialObject)) {
    throw new Error("object required");
  }
  const found = proxyCache.get(initialObject);
  if (found) {
    return found;
  }
  let version2 = versionHolder[0];
  const listeners = /* @__PURE__ */ new Set();
  const notifyUpdate = (op, nextVersion = ++versionHolder[0]) => {
    if (version2 !== nextVersion) {
      version2 = nextVersion;
      listeners.forEach((listener) => listener(op, nextVersion));
    }
  };
  let checkVersion = versionHolder[1];
  const ensureVersion = (nextCheckVersion = ++versionHolder[1]) => {
    if (checkVersion !== nextCheckVersion && !listeners.size) {
      checkVersion = nextCheckVersion;
      propProxyStates.forEach(([propProxyState]) => {
        const propVersion = propProxyState[1](nextCheckVersion);
        if (propVersion > version2) {
          version2 = propVersion;
        }
      });
    }
    return version2;
  };
  const createPropListener = (prop) => (op, nextVersion) => {
    const newOp = [...op];
    newOp[1] = [prop, ...newOp[1]];
    notifyUpdate(newOp, nextVersion);
  };
  const propProxyStates = /* @__PURE__ */ new Map();
  const addPropListener = (prop, propProxyState) => {
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && propProxyStates.has(prop)) {
      throw new Error("prop listener already exists");
    }
    if (listeners.size) {
      const remove = propProxyState[3](createPropListener(prop));
      propProxyStates.set(prop, [propProxyState, remove]);
    } else {
      propProxyStates.set(prop, [propProxyState]);
    }
  };
  const removePropListener = (prop) => {
    var _a2;
    const entry = propProxyStates.get(prop);
    if (entry) {
      propProxyStates.delete(prop);
      (_a2 = entry[1]) == null ? void 0 : _a2.call(entry);
    }
  };
  const addListener = (listener) => {
    listeners.add(listener);
    if (listeners.size === 1) {
      propProxyStates.forEach(([propProxyState, prevRemove], prop) => {
        if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && prevRemove) {
          throw new Error("remove already exists");
        }
        const remove = propProxyState[3](createPropListener(prop));
        propProxyStates.set(prop, [propProxyState, remove]);
      });
    }
    const removeListener = () => {
      listeners.delete(listener);
      if (listeners.size === 0) {
        propProxyStates.forEach(([propProxyState, remove], prop) => {
          if (remove) {
            remove();
            propProxyStates.set(prop, [propProxyState]);
          }
        });
      }
    };
    return removeListener;
  };
  const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));
  const handler = {
    deleteProperty(target, prop) {
      const prevValue = Reflect.get(target, prop);
      removePropListener(prop);
      const deleted = Reflect.deleteProperty(target, prop);
      if (deleted) {
        notifyUpdate(["delete", [prop], prevValue]);
      }
      return deleted;
    },
    set(target, prop, value, receiver) {
      const hasPrevValue = Reflect.has(target, prop);
      const prevValue = Reflect.get(target, prop, receiver);
      if (hasPrevValue && (objectIs(prevValue, value) || proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value)))) {
        return true;
      }
      removePropListener(prop);
      if (isObject(value)) {
        value = y(value) || value;
      }
      let nextValue = value;
      if (value instanceof Promise) {
        value.then((v6) => {
          value.status = "fulfilled";
          value.value = v6;
          notifyUpdate(["resolve", [prop], v6]);
        }).catch((e3) => {
          value.status = "rejected";
          value.reason = e3;
          notifyUpdate(["reject", [prop], e3]);
        });
      } else {
        if (!proxyStateMap.has(value) && canProxy(value)) {
          nextValue = proxyFunction(value);
        }
        const childProxyState = !refSet.has(nextValue) && proxyStateMap.get(nextValue);
        if (childProxyState) {
          addPropListener(prop, childProxyState);
        }
      }
      Reflect.set(target, prop, nextValue, receiver);
      notifyUpdate(["set", [prop], value, prevValue]);
      return true;
    }
  };
  const proxyObject = newProxy(baseObject, handler);
  proxyCache.set(initialObject, proxyObject);
  const proxyState = [
    baseObject,
    ensureVersion,
    createSnapshot,
    addListener
  ];
  proxyStateMap.set(proxyObject, proxyState);
  Reflect.ownKeys(initialObject).forEach((key) => {
    const desc = Object.getOwnPropertyDescriptor(
      initialObject,
      key
    );
    if ("value" in desc) {
      proxyObject[key] = initialObject[key];
      delete desc.value;
      delete desc.writable;
    }
    Object.defineProperty(baseObject, key, desc);
  });
  return proxyObject;
}) => [
  // public functions
  proxyFunction,
  // shared state
  proxyStateMap,
  refSet,
  // internal things
  objectIs,
  newProxy,
  canProxy,
  defaultHandlePromise,
  snapCache,
  createSnapshot,
  proxyCache,
  versionHolder
];
var [defaultProxyFunction] = buildProxyFunction();
function proxy(initialObject = {}) {
  return defaultProxyFunction(initialObject);
}
function subscribe(proxyObject, callback, notifyInSync) {
  const proxyState = proxyStateMap.get(proxyObject);
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && !proxyState) {
    console.warn("Please use proxy object");
  }
  let promise;
  const ops = [];
  const addListener = proxyState[3];
  let isListenerActive = false;
  const listener = (op) => {
    ops.push(op);
    if (notifyInSync) {
      callback(ops.splice(0));
      return;
    }
    if (!promise) {
      promise = Promise.resolve().then(() => {
        promise = void 0;
        if (isListenerActive) {
          callback(ops.splice(0));
        }
      });
    }
  };
  const removeListener = addListener(listener);
  isListenerActive = true;
  return () => {
    isListenerActive = false;
    removeListener();
  };
}
function snapshot(proxyObject, handlePromise) {
  const proxyState = proxyStateMap.get(proxyObject);
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && !proxyState) {
    console.warn("Please use proxy object");
  }
  const [target, ensureVersion, createSnapshot] = proxyState;
  return createSnapshot(target, ensureVersion(), handlePromise);
}
function ref(obj) {
  refSet.add(obj);
  return obj;
}

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/FetchUtil.js
async function fetchData(...args) {
  const response = await fetch(...args);
  if (!response.ok) {
    const err = new Error(`HTTP status code: ${response.status}`, {
      cause: response
    });
    throw err;
  }
  return response;
}
var FetchUtil = class {
  constructor({ baseUrl: baseUrl4, clientId }) {
    this.baseUrl = baseUrl4;
    this.clientId = clientId;
  }
  async get({ headers, signal, cache, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, { method: "GET", headers, signal, cache });
    return response.json();
  }
  async getBlob({ headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, { method: "GET", headers, signal });
    return response.blob();
  }
  async post({ body, headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, {
      method: "POST",
      headers,
      body: body ? JSON.stringify(body) : void 0,
      signal
    });
    return response.json();
  }
  async put({ body, headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, {
      method: "PUT",
      headers,
      body: body ? JSON.stringify(body) : void 0,
      signal
    });
    return response.json();
  }
  async delete({ body, headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, {
      method: "DELETE",
      headers,
      body: body ? JSON.stringify(body) : void 0,
      signal
    });
    return response.json();
  }
  createUrl({ path, params }) {
    const url = new URL(path, this.baseUrl);
    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        if (value) {
          url.searchParams.append(key, value);
        }
      });
    }
    if (this.clientId) {
      url.searchParams.append("clientId", this.clientId);
    }
    return url;
  }
};

// node_modules/valtio/esm/vanilla/utils.mjs
function subscribeKey(proxyObject, key, callback, notifyInSync) {
  let prevValue = proxyObject[key];
  return subscribe(
    proxyObject,
    () => {
      const nextValue = proxyObject[key];
      if (!Object.is(prevValue, nextValue)) {
        callback(prevValue = nextValue);
      }
    },
    notifyInSync
  );
}
var DEVTOOLS = Symbol();
function proxyMap(entries2) {
  const map = proxy({
    data: Array.from(entries2 || []),
    has(key) {
      return this.data.some((p6) => p6[0] === key);
    },
    set(key, value) {
      const record = this.data.find((p6) => p6[0] === key);
      if (record) {
        record[1] = value;
      } else {
        this.data.push([key, value]);
      }
      return this;
    },
    get(key) {
      var _a2;
      return (_a2 = this.data.find((p6) => p6[0] === key)) == null ? void 0 : _a2[1];
    },
    delete(key) {
      const index = this.data.findIndex((p6) => p6[0] === key);
      if (index === -1) {
        return false;
      }
      this.data.splice(index, 1);
      return true;
    },
    clear() {
      this.data.splice(0);
    },
    get size() {
      return this.data.length;
    },
    toJSON() {
      return new Map(this.data);
    },
    forEach(cb) {
      this.data.forEach((p6) => {
        cb(p6[1], p6[0], this);
      });
    },
    keys() {
      return this.data.map((p6) => p6[0]).values();
    },
    values() {
      return this.data.map((p6) => p6[1]).values();
    },
    entries() {
      return new Map(this.data).entries();
    },
    get [Symbol.toStringTag]() {
      return "Map";
    },
    [Symbol.iterator]() {
      return this.entries();
    }
  });
  Object.defineProperties(map, {
    data: {
      enumerable: false
    },
    size: {
      enumerable: false
    },
    toJSON: {
      enumerable: false
    }
  });
  Object.seal(map);
  return map;
}

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/OptionsUtil.js
var OptionsUtil = {
  getFeatureValue(key, features) {
    const optionValue = features == null ? void 0 : features[key];
    if (optionValue === void 0) {
      return ConstantsUtil2.DEFAULT_FEATURES[key];
    }
    return optionValue;
  },
  filterSocialsByPlatform(socials) {
    if (!socials || !socials.length) {
      return socials;
    }
    if (CoreHelperUtil.isTelegram()) {
      if (CoreHelperUtil.isIos()) {
        return socials.filter((s4) => s4 !== "google");
      }
      if (CoreHelperUtil.isMac()) {
        return socials.filter((s4) => s4 !== "x");
      }
      if (CoreHelperUtil.isAndroid()) {
        return socials.filter((s4) => !["facebook", "x"].includes(s4));
      }
    }
    return socials;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js
var state = proxy({
  features: ConstantsUtil2.DEFAULT_FEATURES,
  projectId: "",
  sdkType: "appkit",
  sdkVersion: "html-wagmi-undefined",
  defaultAccountTypes: ConstantsUtil2.DEFAULT_ACCOUNT_TYPES,
  enableNetworkSwitch: true,
  experimental_preferUniversalLinks: false,
  remoteFeatures: {}
});
var OptionsController = {
  state,
  subscribeKey(key, callback) {
    return subscribeKey(state, key, callback);
  },
  setOptions(options) {
    Object.assign(state, options);
  },
  setRemoteFeatures(remoteFeatures) {
    var _a2;
    if (!remoteFeatures) {
      return;
    }
    const newRemoteFeatures = { ...state.remoteFeatures, ...remoteFeatures };
    state.remoteFeatures = newRemoteFeatures;
    if ((_a2 = state.remoteFeatures) == null ? void 0 : _a2.socials) {
      state.remoteFeatures.socials = OptionsUtil.filterSocialsByPlatform(state.remoteFeatures.socials);
    }
  },
  setFeatures(features) {
    if (!features) {
      return;
    }
    if (!state.features) {
      state.features = ConstantsUtil2.DEFAULT_FEATURES;
    }
    const newFeatures = { ...state.features, ...features };
    state.features = newFeatures;
  },
  setProjectId(projectId) {
    state.projectId = projectId;
  },
  setCustomRpcUrls(customRpcUrls) {
    state.customRpcUrls = customRpcUrls;
  },
  setAllWallets(allWallets) {
    state.allWallets = allWallets;
  },
  setIncludeWalletIds(includeWalletIds) {
    state.includeWalletIds = includeWalletIds;
  },
  setExcludeWalletIds(excludeWalletIds) {
    state.excludeWalletIds = excludeWalletIds;
  },
  setFeaturedWalletIds(featuredWalletIds) {
    state.featuredWalletIds = featuredWalletIds;
  },
  setTokens(tokens) {
    state.tokens = tokens;
  },
  setTermsConditionsUrl(termsConditionsUrl) {
    state.termsConditionsUrl = termsConditionsUrl;
  },
  setPrivacyPolicyUrl(privacyPolicyUrl) {
    state.privacyPolicyUrl = privacyPolicyUrl;
  },
  setCustomWallets(customWallets) {
    state.customWallets = customWallets;
  },
  setIsSiweEnabled(isSiweEnabled) {
    state.isSiweEnabled = isSiweEnabled;
  },
  setIsUniversalProvider(isUniversalProvider) {
    state.isUniversalProvider = isUniversalProvider;
  },
  setSdkVersion(sdkVersion) {
    state.sdkVersion = sdkVersion;
  },
  setMetadata(metadata) {
    state.metadata = metadata;
  },
  setDisableAppend(disableAppend) {
    state.disableAppend = disableAppend;
  },
  setEIP6963Enabled(enableEIP6963) {
    state.enableEIP6963 = enableEIP6963;
  },
  setDebug(debug) {
    state.debug = debug;
  },
  setEnableWalletConnect(enableWalletConnect) {
    state.enableWalletConnect = enableWalletConnect;
  },
  setEnableWalletGuide(enableWalletGuide) {
    state.enableWalletGuide = enableWalletGuide;
  },
  setEnableAuthLogger(enableAuthLogger) {
    state.enableAuthLogger = enableAuthLogger;
  },
  setEnableWallets(enableWallets) {
    state.enableWallets = enableWallets;
  },
  setPreferUniversalLinks(preferUniversalLinks) {
    state.experimental_preferUniversalLinks = preferUniversalLinks;
  },
  setSIWX(siwx) {
    if (siwx) {
      for (const [key, isVal] of Object.entries(ConstantsUtil2.SIWX_DEFAULTS)) {
        siwx[key] ?? (siwx[key] = isVal);
      }
    }
    state.siwx = siwx;
  },
  setConnectMethodsOrder(connectMethodsOrder) {
    state.features = {
      ...state.features,
      connectMethodsOrder
    };
  },
  setWalletFeaturesOrder(walletFeaturesOrder) {
    state.features = {
      ...state.features,
      walletFeaturesOrder
    };
  },
  setSocialsOrder(socialsOrder) {
    state.remoteFeatures = {
      ...state.remoteFeatures,
      socials: socialsOrder
    };
  },
  setCollapseWallets(collapseWallets) {
    state.features = {
      ...state.features,
      collapseWallets
    };
  },
  setEnableEmbedded(enableEmbedded) {
    state.enableEmbedded = enableEmbedded;
  },
  setAllowUnsupportedChain(allowUnsupportedChain) {
    state.allowUnsupportedChain = allowUnsupportedChain;
  },
  setManualWCControl(manualWCControl) {
    state.manualWCControl = manualWCControl;
  },
  setEnableNetworkSwitch(enableNetworkSwitch) {
    state.enableNetworkSwitch = enableNetworkSwitch;
  },
  setEnableReconnect(enableReconnect) {
    state.enableReconnect = enableReconnect;
  },
  setDefaultAccountTypes(defaultAccountType = {}) {
    Object.entries(defaultAccountType).forEach(([namespace, accountType]) => {
      if (accountType) {
        state.defaultAccountTypes[namespace] = accountType;
      }
    });
  },
  setUniversalProviderConfigOverride(universalProviderConfigOverride) {
    state.universalProviderConfigOverride = universalProviderConfigOverride;
  },
  getUniversalProviderConfigOverride() {
    return state.universalProviderConfigOverride;
  },
  getSnapshot() {
    return snapshot(state);
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/TelemetryController.js
var DEFAULT_STATE = Object.freeze({
  enabled: true,
  events: []
});
var api = new FetchUtil({ baseUrl: CoreHelperUtil.getAnalyticsUrl(), clientId: null });
var MAX_ERRORS_PER_MINUTE = 5;
var ONE_MINUTE_MS = 60 * 1e3;
var state2 = proxy({
  ...DEFAULT_STATE
});
var TelemetryController = {
  state: state2,
  subscribeKey(key, callback) {
    return subscribeKey(state2, key, callback);
  },
  async sendError(error, category) {
    if (!state2.enabled) {
      return;
    }
    const now = Date.now();
    const recentErrors = state2.events.filter((event) => {
      const eventTime = new Date(event.properties.timestamp || "").getTime();
      return now - eventTime < ONE_MINUTE_MS;
    });
    if (recentErrors.length >= MAX_ERRORS_PER_MINUTE) {
      return;
    }
    const errorEvent = {
      type: "error",
      event: category,
      properties: {
        errorType: error.name,
        errorMessage: error.message,
        stackTrace: error.stack,
        timestamp: (/* @__PURE__ */ new Date()).toISOString()
      }
    };
    state2.events.push(errorEvent);
    try {
      if (typeof window === "undefined") {
        return;
      }
      const { projectId, sdkType, sdkVersion } = OptionsController.state;
      await api.post({
        path: "/e",
        params: {
          projectId,
          st: sdkType,
          sv: sdkVersion || "html-wagmi-4.2.2"
        },
        body: {
          eventId: CoreHelperUtil.getUUID(),
          url: window.location.href,
          domain: window.location.hostname,
          timestamp: (/* @__PURE__ */ new Date()).toISOString(),
          props: {
            type: "error",
            event: category,
            errorType: error.name,
            errorMessage: error.message,
            stackTrace: error.stack
          }
        }
      });
    } catch {
    }
  },
  enable() {
    state2.enabled = true;
  },
  disable() {
    state2.enabled = false;
  },
  clearEvents() {
    state2.events = [];
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/withErrorBoundary.js
var AppKitError = class _AppKitError extends Error {
  constructor(message, category, originalError) {
    super(message);
    this.name = "AppKitError";
    this.category = category;
    this.originalError = originalError;
    Object.setPrototypeOf(this, _AppKitError.prototype);
    let isStackConstructedFromOriginal = false;
    if (originalError instanceof Error && typeof originalError.stack === "string" && originalError.stack) {
      const originalErrorStack = originalError.stack;
      const firstNewlineIndex = originalErrorStack.indexOf("\n");
      if (firstNewlineIndex > -1) {
        const originalFrames = originalErrorStack.substring(firstNewlineIndex + 1);
        this.stack = `${this.name}: ${this.message}
${originalFrames}`;
        isStackConstructedFromOriginal = true;
      }
    }
    if (!isStackConstructedFromOriginal) {
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, _AppKitError);
      } else if (!this.stack) {
        this.stack = `${this.name}: ${this.message}`;
      }
    }
  }
};
function errorHandler(err, defaultCategory) {
  const error = err instanceof AppKitError ? err : new AppKitError(err instanceof Error ? err.message : String(err), defaultCategory, err);
  TelemetryController.sendError(error, error.category);
  throw error;
}
function withErrorBoundary(controller17, defaultCategory = "INTERNAL_SDK_ERROR") {
  const newController = {};
  Object.keys(controller17).forEach((key) => {
    const original = controller17[key];
    if (typeof original === "function") {
      let wrapped = original;
      if (original.constructor.name === "AsyncFunction") {
        wrapped = async (...args) => {
          try {
            return await original(...args);
          } catch (err) {
            return errorHandler(err, defaultCategory);
          }
        };
      } else {
        wrapped = (...args) => {
          try {
            return original(...args);
          } catch (err) {
            return errorHandler(err, defaultCategory);
          }
        };
      }
      newController[key] = wrapped;
    } else {
      newController[key] = original;
    }
  });
  return newController;
}

// node_modules/@reown/appkit-wallet/dist/esm/src/W3mFrameConstants.js
var DEFAULT_SDK_URL = "https://secure.walletconnect.org/sdk";
var SECURE_SITE_SDK = (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_SDK_URL"] : void 0) || DEFAULT_SDK_URL;
var DEFAULT_LOG_LEVEL = (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_DEFAULT_LOG_LEVEL"] : void 0) || "error";
var SECURE_SITE_SDK_VERSION = (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_SDK_VERSION"] : void 0) || "4";
var W3mFrameConstants = {
  APP_EVENT_KEY: "@w3m-app/",
  FRAME_EVENT_KEY: "@w3m-frame/",
  RPC_METHOD_KEY: "RPC_",
  STORAGE_KEY: "@appkit-wallet/",
  SESSION_TOKEN_KEY: "SESSION_TOKEN_KEY",
  EMAIL_LOGIN_USED_KEY: "EMAIL_LOGIN_USED_KEY",
  LAST_USED_CHAIN_KEY: "LAST_USED_CHAIN_KEY",
  LAST_EMAIL_LOGIN_TIME: "LAST_EMAIL_LOGIN_TIME",
  EMAIL: "EMAIL",
  PREFERRED_ACCOUNT_TYPE: "PREFERRED_ACCOUNT_TYPE",
  SMART_ACCOUNT_ENABLED: "SMART_ACCOUNT_ENABLED",
  SMART_ACCOUNT_ENABLED_NETWORKS: "SMART_ACCOUNT_ENABLED_NETWORKS",
  SOCIAL_USERNAME: "SOCIAL_USERNAME",
  APP_SWITCH_NETWORK: "@w3m-app/SWITCH_NETWORK",
  APP_CONNECT_EMAIL: "@w3m-app/CONNECT_EMAIL",
  APP_CONNECT_DEVICE: "@w3m-app/CONNECT_DEVICE",
  APP_CONNECT_OTP: "@w3m-app/CONNECT_OTP",
  APP_CONNECT_SOCIAL: "@w3m-app/CONNECT_SOCIAL",
  APP_GET_SOCIAL_REDIRECT_URI: "@w3m-app/GET_SOCIAL_REDIRECT_URI",
  APP_GET_USER: "@w3m-app/GET_USER",
  APP_SIGN_OUT: "@w3m-app/SIGN_OUT",
  APP_IS_CONNECTED: "@w3m-app/IS_CONNECTED",
  APP_GET_CHAIN_ID: "@w3m-app/GET_CHAIN_ID",
  APP_RPC_REQUEST: "@w3m-app/RPC_REQUEST",
  APP_UPDATE_EMAIL: "@w3m-app/UPDATE_EMAIL",
  APP_UPDATE_EMAIL_PRIMARY_OTP: "@w3m-app/UPDATE_EMAIL_PRIMARY_OTP",
  APP_UPDATE_EMAIL_SECONDARY_OTP: "@w3m-app/UPDATE_EMAIL_SECONDARY_OTP",
  APP_AWAIT_UPDATE_EMAIL: "@w3m-app/AWAIT_UPDATE_EMAIL",
  APP_SYNC_THEME: "@w3m-app/SYNC_THEME",
  APP_SYNC_DAPP_DATA: "@w3m-app/SYNC_DAPP_DATA",
  APP_GET_SMART_ACCOUNT_ENABLED_NETWORKS: "@w3m-app/GET_SMART_ACCOUNT_ENABLED_NETWORKS",
  APP_INIT_SMART_ACCOUNT: "@w3m-app/INIT_SMART_ACCOUNT",
  APP_SET_PREFERRED_ACCOUNT: "@w3m-app/SET_PREFERRED_ACCOUNT",
  APP_CONNECT_FARCASTER: "@w3m-app/CONNECT_FARCASTER",
  APP_GET_FARCASTER_URI: "@w3m-app/GET_FARCASTER_URI",
  APP_RELOAD: "@w3m-app/RELOAD",
  APP_RPC_ABORT: "@w3m-app/RPC_ABORT",
  FRAME_SWITCH_NETWORK_ERROR: "@w3m-frame/SWITCH_NETWORK_ERROR",
  FRAME_SWITCH_NETWORK_SUCCESS: "@w3m-frame/SWITCH_NETWORK_SUCCESS",
  FRAME_CONNECT_EMAIL_ERROR: "@w3m-frame/CONNECT_EMAIL_ERROR",
  FRAME_CONNECT_EMAIL_SUCCESS: "@w3m-frame/CONNECT_EMAIL_SUCCESS",
  FRAME_CONNECT_DEVICE_ERROR: "@w3m-frame/CONNECT_DEVICE_ERROR",
  FRAME_CONNECT_DEVICE_SUCCESS: "@w3m-frame/CONNECT_DEVICE_SUCCESS",
  FRAME_CONNECT_OTP_SUCCESS: "@w3m-frame/CONNECT_OTP_SUCCESS",
  FRAME_CONNECT_OTP_ERROR: "@w3m-frame/CONNECT_OTP_ERROR",
  FRAME_CONNECT_SOCIAL_SUCCESS: "@w3m-frame/CONNECT_SOCIAL_SUCCESS",
  FRAME_CONNECT_SOCIAL_ERROR: "@w3m-frame/CONNECT_SOCIAL_ERROR",
  FRAME_CONNECT_FARCASTER_SUCCESS: "@w3m-frame/CONNECT_FARCASTER_SUCCESS",
  FRAME_CONNECT_FARCASTER_ERROR: "@w3m-frame/CONNECT_FARCASTER_ERROR",
  FRAME_GET_FARCASTER_URI_SUCCESS: "@w3m-frame/GET_FARCASTER_URI_SUCCESS",
  FRAME_GET_FARCASTER_URI_ERROR: "@w3m-frame/GET_FARCASTER_URI_ERROR",
  FRAME_GET_SOCIAL_REDIRECT_URI_SUCCESS: "@w3m-frame/GET_SOCIAL_REDIRECT_URI_SUCCESS",
  FRAME_GET_SOCIAL_REDIRECT_URI_ERROR: "@w3m-frame/GET_SOCIAL_REDIRECT_URI_ERROR",
  FRAME_GET_USER_SUCCESS: "@w3m-frame/GET_USER_SUCCESS",
  FRAME_GET_USER_ERROR: "@w3m-frame/GET_USER_ERROR",
  FRAME_SIGN_OUT_SUCCESS: "@w3m-frame/SIGN_OUT_SUCCESS",
  FRAME_SIGN_OUT_ERROR: "@w3m-frame/SIGN_OUT_ERROR",
  FRAME_IS_CONNECTED_SUCCESS: "@w3m-frame/IS_CONNECTED_SUCCESS",
  FRAME_IS_CONNECTED_ERROR: "@w3m-frame/IS_CONNECTED_ERROR",
  FRAME_GET_CHAIN_ID_SUCCESS: "@w3m-frame/GET_CHAIN_ID_SUCCESS",
  FRAME_GET_CHAIN_ID_ERROR: "@w3m-frame/GET_CHAIN_ID_ERROR",
  FRAME_RPC_REQUEST_SUCCESS: "@w3m-frame/RPC_REQUEST_SUCCESS",
  FRAME_RPC_REQUEST_ERROR: "@w3m-frame/RPC_REQUEST_ERROR",
  FRAME_SESSION_UPDATE: "@w3m-frame/SESSION_UPDATE",
  FRAME_UPDATE_EMAIL_SUCCESS: "@w3m-frame/UPDATE_EMAIL_SUCCESS",
  FRAME_UPDATE_EMAIL_ERROR: "@w3m-frame/UPDATE_EMAIL_ERROR",
  FRAME_UPDATE_EMAIL_PRIMARY_OTP_SUCCESS: "@w3m-frame/UPDATE_EMAIL_PRIMARY_OTP_SUCCESS",
  FRAME_UPDATE_EMAIL_PRIMARY_OTP_ERROR: "@w3m-frame/UPDATE_EMAIL_PRIMARY_OTP_ERROR",
  FRAME_UPDATE_EMAIL_SECONDARY_OTP_SUCCESS: "@w3m-frame/UPDATE_EMAIL_SECONDARY_OTP_SUCCESS",
  FRAME_UPDATE_EMAIL_SECONDARY_OTP_ERROR: "@w3m-frame/UPDATE_EMAIL_SECONDARY_OTP_ERROR",
  FRAME_SYNC_THEME_SUCCESS: "@w3m-frame/SYNC_THEME_SUCCESS",
  FRAME_SYNC_THEME_ERROR: "@w3m-frame/SYNC_THEME_ERROR",
  FRAME_SYNC_DAPP_DATA_SUCCESS: "@w3m-frame/SYNC_DAPP_DATA_SUCCESS",
  FRAME_SYNC_DAPP_DATA_ERROR: "@w3m-frame/SYNC_DAPP_DATA_ERROR",
  FRAME_GET_SMART_ACCOUNT_ENABLED_NETWORKS_SUCCESS: "@w3m-frame/GET_SMART_ACCOUNT_ENABLED_NETWORKS_SUCCESS",
  FRAME_GET_SMART_ACCOUNT_ENABLED_NETWORKS_ERROR: "@w3m-frame/GET_SMART_ACCOUNT_ENABLED_NETWORKS_ERROR",
  FRAME_INIT_SMART_ACCOUNT_SUCCESS: "@w3m-frame/INIT_SMART_ACCOUNT_SUCCESS",
  FRAME_INIT_SMART_ACCOUNT_ERROR: "@w3m-frame/INIT_SMART_ACCOUNT_ERROR",
  FRAME_SET_PREFERRED_ACCOUNT_SUCCESS: "@w3m-frame/SET_PREFERRED_ACCOUNT_SUCCESS",
  FRAME_SET_PREFERRED_ACCOUNT_ERROR: "@w3m-frame/SET_PREFERRED_ACCOUNT_ERROR",
  FRAME_READY: "@w3m-frame/READY",
  FRAME_RELOAD_SUCCESS: "@w3m-frame/RELOAD_SUCCESS",
  FRAME_RELOAD_ERROR: "@w3m-frame/RELOAD_ERROR",
  FRAME_RPC_ABORT_SUCCESS: "@w3m-frame/RPC_ABORT_SUCCESS",
  FRAME_RPC_ABORT_ERROR: "@w3m-frame/RPC_ABORT_ERROR",
  RPC_RESPONSE_TYPE_ERROR: "RPC_RESPONSE_ERROR",
  RPC_RESPONSE_TYPE_TX: "RPC_RESPONSE_TRANSACTION_HASH",
  RPC_RESPONSE_TYPE_OBJECT: "RPC_RESPONSE_OBJECT"
};
var W3mFrameRpcConstants = {
  SAFE_RPC_METHODS: [
    "eth_accounts",
    "eth_blockNumber",
    "eth_call",
    "eth_chainId",
    "eth_estimateGas",
    "eth_feeHistory",
    "eth_gasPrice",
    "eth_getAccount",
    "eth_getBalance",
    "eth_getBlockByHash",
    "eth_getBlockByNumber",
    "eth_getBlockReceipts",
    "eth_getBlockTransactionCountByHash",
    "eth_getBlockTransactionCountByNumber",
    "eth_getCode",
    "eth_getFilterChanges",
    "eth_getFilterLogs",
    "eth_getLogs",
    "eth_getProof",
    "eth_getStorageAt",
    "eth_getTransactionByBlockHashAndIndex",
    "eth_getTransactionByBlockNumberAndIndex",
    "eth_getTransactionByHash",
    "eth_getTransactionCount",
    "eth_getTransactionReceipt",
    "eth_getUncleCountByBlockHash",
    "eth_getUncleCountByBlockNumber",
    "eth_maxPriorityFeePerGas",
    "eth_newBlockFilter",
    "eth_newFilter",
    "eth_newPendingTransactionFilter",
    "eth_sendRawTransaction",
    "eth_syncing",
    "eth_uninstallFilter",
    "wallet_getCapabilities",
    "wallet_getCallsStatus",
    "eth_getUserOperationReceipt",
    "eth_estimateUserOperationGas",
    "eth_getUserOperationByHash",
    "eth_supportedEntryPoints",
    "wallet_getAssets"
  ],
  NOT_SAFE_RPC_METHODS: [
    "personal_sign",
    "eth_signTypedData_v4",
    "eth_sendTransaction",
    "solana_signMessage",
    "solana_signTransaction",
    "solana_signAllTransactions",
    "solana_signAndSendTransaction",
    "wallet_sendCalls",
    "wallet_grantPermissions",
    "wallet_revokePermissions",
    "eth_sendUserOperation"
  ],
  GET_CHAIN_ID: "eth_chainId",
  RPC_METHOD_NOT_ALLOWED_MESSAGE: "Requested RPC call is not allowed",
  RPC_METHOD_NOT_ALLOWED_UI_MESSAGE: "Action not allowed",
  ACCOUNT_TYPES: {
    EOA: "eoa",
    SMART_ACCOUNT: "smartAccount"
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/MobileWallet.js
var CUSTOM_DEEPLINK_WALLETS = {
  PHANTOM: {
    id: "a797aa35c0fadbfc1a53e7f675162ed5226968b44a19ee3d24385c64d1d3c393",
    url: "https://phantom.app"
  },
  SOLFLARE: {
    id: "1ca0bdd4747578705b1939af023d120677c64fe6ca76add81fda36e350605e79",
    url: "https://solflare.com"
  },
  COINBASE: {
    id: "fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa",
    url: "https://go.cb-w.com"
  }
};
var MobileWalletUtil = {
  /**
   * Handles mobile wallet redirection for wallets that have Universal Links and doesn't support WalletConnect Deep Links.
   *
   * @param {string} id - The id of the wallet.
   * @param {ChainNamespace} namespace - The namespace of the chain.
   */
  handleMobileDeeplinkRedirect(id, namespace) {
    const href = window.location.href;
    const encodedHref = encodeURIComponent(href);
    if (id === CUSTOM_DEEPLINK_WALLETS.PHANTOM.id && !("phantom" in window)) {
      const protocol = href.startsWith("https") ? "https" : "http";
      const host = href.split("/")[2];
      const encodedRef = encodeURIComponent(`${protocol}://${host}`);
      window.location.href = `${CUSTOM_DEEPLINK_WALLETS.PHANTOM.url}/ul/browse/${encodedHref}?ref=${encodedRef}`;
    }
    if (id === CUSTOM_DEEPLINK_WALLETS.SOLFLARE.id && !("solflare" in window)) {
      window.location.href = `${CUSTOM_DEEPLINK_WALLETS.SOLFLARE.url}/ul/v1/browse/${encodedHref}?ref=${encodedHref}`;
    }
    if (namespace === ConstantsUtil.CHAIN.SOLANA) {
      if (id === CUSTOM_DEEPLINK_WALLETS.COINBASE.id && !("coinbaseSolana" in window)) {
        window.location.href = `${CUSTOM_DEEPLINK_WALLETS.COINBASE.url}/dapp?cb_url=${encodedHref}`;
      }
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AssetController.js
var state3 = proxy({
  walletImages: {},
  networkImages: {},
  chainImages: {},
  connectorImages: {},
  tokenImages: {},
  currencyImages: {}
});
var controller = {
  state: state3,
  subscribeNetworkImages(callback) {
    return subscribe(state3.networkImages, () => callback(state3.networkImages));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state3, key, callback);
  },
  subscribe(callback) {
    return subscribe(state3, () => callback(state3));
  },
  setWalletImage(key, value) {
    state3.walletImages[key] = value;
  },
  setNetworkImage(key, value) {
    state3.networkImages[key] = value;
  },
  setChainImage(key, value) {
    state3.chainImages[key] = value;
  },
  setConnectorImage(key, value) {
    state3.connectorImages = { ...state3.connectorImages, [key]: value };
  },
  setTokenImage(key, value) {
    state3.tokenImages[key] = value;
  },
  setCurrencyImage(key, value) {
    state3.currencyImages[key] = value;
  }
};
var AssetController = withErrorBoundary(controller);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/AssetUtil.js
var namespaceImageIds = {
  // Ethereum
  eip155: "ba0ba0cd-17c6-4806-ad93-f9d174f17900",
  // Solana
  solana: "a1b58899-f671-4276-6a5e-56ca5bd59700",
  // Polkadot
  polkadot: "",
  // Bitcoin
  bip122: "0b4838db-0161-4ffe-022d-532bf03dba00",
  // Cosmos
  cosmos: ""
};
var state4 = proxy({
  networkImagePromises: {}
});
var AssetUtil = {
  async fetchWalletImage(imageId) {
    if (!imageId) {
      return void 0;
    }
    await ApiController._fetchWalletImage(imageId);
    return this.getWalletImageById(imageId);
  },
  async fetchNetworkImage(imageId) {
    if (!imageId) {
      return void 0;
    }
    const existingImage = this.getNetworkImageById(imageId);
    if (existingImage) {
      return existingImage;
    }
    if (!state4.networkImagePromises[imageId]) {
      state4.networkImagePromises[imageId] = ApiController._fetchNetworkImage(imageId);
    }
    await state4.networkImagePromises[imageId];
    return this.getNetworkImageById(imageId);
  },
  getWalletImageById(imageId) {
    if (!imageId) {
      return void 0;
    }
    return AssetController.state.walletImages[imageId];
  },
  getWalletImage(wallet) {
    if (wallet == null ? void 0 : wallet.image_url) {
      return wallet == null ? void 0 : wallet.image_url;
    }
    if (wallet == null ? void 0 : wallet.image_id) {
      return AssetController.state.walletImages[wallet.image_id];
    }
    return void 0;
  },
  getNetworkImage(network) {
    var _a2, _b, _c2;
    if ((_a2 = network == null ? void 0 : network.assets) == null ? void 0 : _a2.imageUrl) {
      return (_b = network == null ? void 0 : network.assets) == null ? void 0 : _b.imageUrl;
    }
    if ((_c2 = network == null ? void 0 : network.assets) == null ? void 0 : _c2.imageId) {
      return AssetController.state.networkImages[network.assets.imageId];
    }
    return void 0;
  },
  getNetworkImageById(imageId) {
    if (!imageId) {
      return void 0;
    }
    return AssetController.state.networkImages[imageId];
  },
  getConnectorImage(connector) {
    var _a2;
    if (connector == null ? void 0 : connector.imageUrl) {
      return connector.imageUrl;
    }
    if ((_a2 = connector == null ? void 0 : connector.info) == null ? void 0 : _a2.icon) {
      return connector.info.icon;
    }
    if (connector == null ? void 0 : connector.imageId) {
      return AssetController.state.connectorImages[connector.imageId];
    }
    return void 0;
  },
  getChainImage(chain2) {
    return AssetController.state.networkImages[namespaceImageIds[chain2]];
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AlertController.js
var state5 = proxy({
  message: "",
  variant: "info",
  open: false
});
var controller2 = {
  state: state5,
  subscribeKey(key, callback) {
    return subscribeKey(state5, key, callback);
  },
  open(message, variant) {
    const { debug } = OptionsController.state;
    const { shortMessage, longMessage } = message;
    if (debug) {
      state5.message = shortMessage;
      state5.variant = variant;
      state5.open = true;
    }
    if (longMessage) {
      console.error(typeof longMessage === "function" ? longMessage() : longMessage);
    }
  },
  close() {
    state5.open = false;
    state5.message = "";
    state5.variant = "info";
  }
};
var AlertController = withErrorBoundary(controller2);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EventsController.js
var baseUrl = CoreHelperUtil.getAnalyticsUrl();
var api2 = new FetchUtil({ baseUrl, clientId: null });
var excluded = ["MODAL_CREATED"];
var state6 = proxy({
  timestamp: Date.now(),
  reportedErrors: {},
  data: {
    type: "track",
    event: "MODAL_CREATED"
  }
});
var EventsController = {
  state: state6,
  subscribe(callback) {
    return subscribe(state6, () => callback(state6));
  },
  getSdkProperties() {
    const { projectId, sdkType, sdkVersion } = OptionsController.state;
    return {
      projectId,
      st: sdkType,
      sv: sdkVersion || "html-wagmi-4.2.2"
    };
  },
  async _sendAnalyticsEvent(payload) {
    try {
      const address = AccountController.state.address;
      if (excluded.includes(payload.data.event) || typeof window === "undefined") {
        return;
      }
      await api2.post({
        path: "/e",
        params: EventsController.getSdkProperties(),
        body: {
          eventId: CoreHelperUtil.getUUID(),
          url: window.location.href,
          domain: window.location.hostname,
          timestamp: payload.timestamp,
          props: { ...payload.data, address }
        }
      });
      state6.reportedErrors["FORBIDDEN"] = false;
    } catch (err) {
      const isForbiddenError = err instanceof Error && err.cause instanceof Response && err.cause.status === ConstantsUtil.HTTP_STATUS_CODES.FORBIDDEN && !state6.reportedErrors["FORBIDDEN"];
      if (isForbiddenError) {
        AlertController.open({
          shortMessage: "Invalid App Configuration",
          longMessage: `Origin ${isSafe() ? window.origin : "uknown"} not found on Allowlist - update configuration on cloud.reown.com`
        }, "error");
        state6.reportedErrors["FORBIDDEN"] = true;
      }
    }
  },
  sendEvent(data) {
    var _a2;
    state6.timestamp = Date.now();
    state6.data = data;
    if ((_a2 = OptionsController.state.features) == null ? void 0 : _a2.analytics) {
      EventsController._sendAnalyticsEvent(state6);
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ApiController.js
var baseUrl2 = CoreHelperUtil.getApiUrl();
var api3 = new FetchUtil({
  baseUrl: baseUrl2,
  clientId: null
});
var entries = 40;
var recommendedEntries = 4;
var imageCountToFetch = 20;
var state7 = proxy({
  promises: {},
  page: 1,
  count: 0,
  featured: [],
  allFeatured: [],
  recommended: [],
  allRecommended: [],
  wallets: [],
  filteredWallets: [],
  search: [],
  isAnalyticsEnabled: false,
  excludedWallets: [],
  isFetchingRecommendedWallets: false
});
var ApiController = {
  state: state7,
  subscribeKey(key, callback) {
    return subscribeKey(state7, key, callback);
  },
  _getSdkProperties() {
    const { projectId, sdkType, sdkVersion } = OptionsController.state;
    return {
      projectId,
      st: sdkType || "appkit",
      sv: sdkVersion || "html-wagmi-4.2.2"
    };
  },
  _filterOutExtensions(wallets) {
    if (OptionsController.state.isUniversalProvider) {
      return wallets.filter((w6) => Boolean(w6.mobile_link || w6.desktop_link || w6.webapp_link));
    }
    return wallets;
  },
  async _fetchWalletImage(imageId) {
    const imageUrl = `${api3.baseUrl}/getWalletImage/${imageId}`;
    const blob = await api3.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setWalletImage(imageId, URL.createObjectURL(blob));
  },
  async _fetchNetworkImage(imageId) {
    const imageUrl = `${api3.baseUrl}/public/getAssetImage/${imageId}`;
    const blob = await api3.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setNetworkImage(imageId, URL.createObjectURL(blob));
  },
  async _fetchConnectorImage(imageId) {
    const imageUrl = `${api3.baseUrl}/public/getAssetImage/${imageId}`;
    const blob = await api3.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setConnectorImage(imageId, URL.createObjectURL(blob));
  },
  async _fetchCurrencyImage(countryCode) {
    const imageUrl = `${api3.baseUrl}/public/getCurrencyImage/${countryCode}`;
    const blob = await api3.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setCurrencyImage(countryCode, URL.createObjectURL(blob));
  },
  async _fetchTokenImage(symbol) {
    const imageUrl = `${api3.baseUrl}/public/getTokenImage/${symbol}`;
    const blob = await api3.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setTokenImage(symbol, URL.createObjectURL(blob));
  },
  _filterWalletsByPlatform(wallets) {
    const filteredWallets = CoreHelperUtil.isMobile() ? wallets == null ? void 0 : wallets.filter((w6) => {
      if (w6.mobile_link) {
        return true;
      }
      if (w6.id === CUSTOM_DEEPLINK_WALLETS.COINBASE.id) {
        return true;
      }
      const isSolana = ChainController.state.activeChain === "solana";
      return isSolana && (w6.id === CUSTOM_DEEPLINK_WALLETS.SOLFLARE.id || w6.id === CUSTOM_DEEPLINK_WALLETS.PHANTOM.id);
    }) : wallets;
    return filteredWallets;
  },
  async fetchProjectConfig() {
    const response = await api3.get({
      path: "/appkit/v1/config",
      params: ApiController._getSdkProperties()
    });
    return response.features;
  },
  async fetchAllowedOrigins() {
    try {
      const { allowedOrigins } = await api3.get({
        path: "/projects/v1/origins",
        params: ApiController._getSdkProperties()
      });
      return allowedOrigins;
    } catch (error) {
      if (error instanceof Error && error.cause instanceof Response) {
        const status = error.cause.status;
        if (status === ConstantsUtil.HTTP_STATUS_CODES.TOO_MANY_REQUESTS) {
          throw new Error("RATE_LIMITED", { cause: error });
        }
        if (status >= ConstantsUtil.HTTP_STATUS_CODES.SERVER_ERROR && status < 600) {
          throw new Error("SERVER_ERROR", { cause: error });
        }
        return [];
      }
      return [];
    }
  },
  async fetchNetworkImages() {
    const requestedCaipNetworks = ChainController.getAllRequestedCaipNetworks();
    const ids = requestedCaipNetworks == null ? void 0 : requestedCaipNetworks.map(({ assets }) => assets == null ? void 0 : assets.imageId).filter(Boolean).filter((imageId) => !AssetUtil.getNetworkImageById(imageId));
    if (ids) {
      await Promise.allSettled(ids.map((id) => ApiController._fetchNetworkImage(id)));
    }
  },
  async fetchConnectorImages() {
    const { connectors } = ConnectorController.state;
    const ids = connectors.map(({ imageId }) => imageId).filter(Boolean);
    await Promise.allSettled(ids.map((id) => ApiController._fetchConnectorImage(id)));
  },
  async fetchCurrencyImages(currencies = []) {
    await Promise.allSettled(currencies.map((currency) => ApiController._fetchCurrencyImage(currency)));
  },
  async fetchTokenImages(tokens = []) {
    await Promise.allSettled(tokens.map((token) => ApiController._fetchTokenImage(token)));
  },
  async fetchWallets(params) {
    var _a2;
    const exclude = params.exclude ?? [];
    const sdkProperties = ApiController._getSdkProperties();
    if (sdkProperties.sv.startsWith("html-core-")) {
      exclude.push(...Object.values(CUSTOM_DEEPLINK_WALLETS).map((w6) => w6.id));
    }
    const wallets = await api3.get({
      path: "/getWallets",
      params: {
        ...ApiController._getSdkProperties(),
        ...params,
        page: String(params.page),
        entries: String(params.entries),
        include: (_a2 = params.include) == null ? void 0 : _a2.join(","),
        exclude: exclude.join(",")
      }
    });
    const filteredWallets = ApiController._filterWalletsByPlatform(wallets == null ? void 0 : wallets.data);
    return {
      data: filteredWallets || [],
      // Keep original count for display on main page
      count: wallets == null ? void 0 : wallets.count
    };
  },
  async fetchFeaturedWallets() {
    const { featuredWalletIds } = OptionsController.state;
    if (featuredWalletIds == null ? void 0 : featuredWalletIds.length) {
      const params = {
        ...ApiController._getSdkProperties(),
        page: 1,
        entries: (featuredWalletIds == null ? void 0 : featuredWalletIds.length) ?? recommendedEntries,
        include: featuredWalletIds
      };
      const { data } = await ApiController.fetchWallets(params);
      const sortedData = [...data].sort((a4, b6) => featuredWalletIds.indexOf(a4.id) - featuredWalletIds.indexOf(b6.id));
      const images = sortedData.map((d6) => d6.image_id).filter(Boolean);
      await Promise.allSettled(images.map((id) => ApiController._fetchWalletImage(id)));
      state7.featured = sortedData;
      state7.allFeatured = sortedData;
    }
  },
  async fetchRecommendedWallets() {
    try {
      state7.isFetchingRecommendedWallets = true;
      const { includeWalletIds, excludeWalletIds, featuredWalletIds } = OptionsController.state;
      const exclude = [...excludeWalletIds ?? [], ...featuredWalletIds ?? []].filter(Boolean);
      const chains = ChainController.getRequestedCaipNetworkIds().join(",");
      const params = {
        page: 1,
        entries: recommendedEntries,
        include: includeWalletIds,
        exclude,
        chains
      };
      const { data, count } = await ApiController.fetchWallets(params);
      const recent = StorageUtil.getRecentWallets();
      const recommendedImages = data.map((d6) => d6.image_id).filter(Boolean);
      const recentImages = recent.map((r4) => r4.image_id).filter(Boolean);
      await Promise.allSettled([...recommendedImages, ...recentImages].map((id) => ApiController._fetchWalletImage(id)));
      state7.recommended = data;
      state7.allRecommended = data;
      state7.count = count ?? 0;
    } catch {
    } finally {
      state7.isFetchingRecommendedWallets = false;
    }
  },
  async fetchWalletsByPage({ page }) {
    const { includeWalletIds, excludeWalletIds, featuredWalletIds } = OptionsController.state;
    const chains = ChainController.getRequestedCaipNetworkIds().join(",");
    const exclude = [
      ...state7.recommended.map(({ id }) => id),
      ...excludeWalletIds ?? [],
      ...featuredWalletIds ?? []
    ].filter(Boolean);
    const params = {
      page,
      entries,
      include: includeWalletIds,
      exclude,
      chains
    };
    const { data, count } = await ApiController.fetchWallets(params);
    const images = data.slice(0, imageCountToFetch).map((w6) => w6.image_id).filter(Boolean);
    await Promise.allSettled(images.map((id) => ApiController._fetchWalletImage(id)));
    state7.wallets = CoreHelperUtil.uniqueBy([...state7.wallets, ...ApiController._filterOutExtensions(data)], "id").filter((w6) => {
      var _a2;
      return (_a2 = w6.chains) == null ? void 0 : _a2.some((chain2) => chains.includes(chain2));
    });
    state7.count = count > state7.count ? count : state7.count;
    state7.page = page;
  },
  async initializeExcludedWallets({ ids }) {
    const params = {
      page: 1,
      entries: ids.length,
      include: ids
    };
    const { data } = await ApiController.fetchWallets(params);
    if (data) {
      data.forEach((wallet) => {
        state7.excludedWallets.push({ rdns: wallet.rdns, name: wallet.name });
      });
    }
  },
  async searchWallet({ search, badge }) {
    const { includeWalletIds, excludeWalletIds } = OptionsController.state;
    const chains = ChainController.getRequestedCaipNetworkIds().join(",");
    state7.search = [];
    const params = {
      page: 1,
      entries: 100,
      search: search == null ? void 0 : search.trim(),
      badge_type: badge,
      include: includeWalletIds,
      exclude: excludeWalletIds,
      chains
    };
    const { data } = await ApiController.fetchWallets(params);
    EventsController.sendEvent({
      type: "track",
      event: "SEARCH_WALLET",
      properties: { badge: badge ?? "", search: search ?? "" }
    });
    const images = data.map((w6) => w6.image_id).filter(Boolean);
    await Promise.allSettled([
      ...images.map((id) => ApiController._fetchWalletImage(id)),
      CoreHelperUtil.wait(300)
    ]);
    state7.search = ApiController._filterOutExtensions(data);
  },
  initPromise(key, fetchFn) {
    const existingPromise = state7.promises[key];
    if (existingPromise) {
      return existingPromise;
    }
    return state7.promises[key] = fetchFn();
  },
  prefetch({ fetchConnectorImages = true, fetchFeaturedWallets = true, fetchRecommendedWallets = true, fetchNetworkImages = true } = {}) {
    const promises = [
      fetchConnectorImages && ApiController.initPromise("connectorImages", ApiController.fetchConnectorImages),
      fetchFeaturedWallets && ApiController.initPromise("featuredWallets", ApiController.fetchFeaturedWallets),
      fetchRecommendedWallets && ApiController.initPromise("recommendedWallets", ApiController.fetchRecommendedWallets),
      fetchNetworkImages && ApiController.initPromise("networkImages", ApiController.fetchNetworkImages)
    ].filter(Boolean);
    return Promise.allSettled(promises);
  },
  prefetchAnalyticsConfig() {
    var _a2;
    if ((_a2 = OptionsController.state.features) == null ? void 0 : _a2.analytics) {
      ApiController.fetchAnalyticsConfig();
    }
  },
  async fetchAnalyticsConfig() {
    try {
      const { isAnalyticsEnabled } = await api3.get({
        path: "/getAnalyticsConfig",
        params: ApiController._getSdkProperties()
      });
      OptionsController.setFeatures({ analytics: isAnalyticsEnabled });
    } catch (error) {
      OptionsController.setFeatures({ analytics: false });
    }
  },
  filterByNamespaces(namespaces) {
    if (!(namespaces == null ? void 0 : namespaces.length)) {
      state7.featured = state7.allFeatured;
      state7.recommended = state7.allRecommended;
      return;
    }
    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(",");
    state7.featured = state7.allFeatured.filter((wallet) => {
      var _a2;
      return (_a2 = wallet.chains) == null ? void 0 : _a2.some((chain2) => caipNetworkIds.includes(chain2));
    });
    state7.recommended = state7.allRecommended.filter((wallet) => {
      var _a2;
      return (_a2 = wallet.chains) == null ? void 0 : _a2.some((chain2) => caipNetworkIds.includes(chain2));
    });
    state7.filteredWallets = state7.wallets.filter((wallet) => {
      var _a2;
      return (_a2 = wallet.chains) == null ? void 0 : _a2.some((chain2) => caipNetworkIds.includes(chain2));
    });
  },
  clearFilterByNamespaces() {
    state7.filteredWallets = [];
  },
  setFilterByNamespace(namespace) {
    if (!namespace) {
      state7.featured = state7.allFeatured;
      state7.recommended = state7.allRecommended;
      return;
    }
    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(",");
    state7.featured = state7.allFeatured.filter((wallet) => {
      var _a2;
      return (_a2 = wallet.chains) == null ? void 0 : _a2.some((chain2) => caipNetworkIds.includes(chain2));
    });
    state7.recommended = state7.allRecommended.filter((wallet) => {
      var _a2;
      return (_a2 = wallet.chains) == null ? void 0 : _a2.some((chain2) => caipNetworkIds.includes(chain2));
    });
    state7.filteredWallets = state7.wallets.filter((wallet) => {
      var _a2;
      return (_a2 = wallet.chains) == null ? void 0 : _a2.some((chain2) => caipNetworkIds.includes(chain2));
    });
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/NetworkUtil.js
var NetworkUtil2 = {
  /**
   * Function to handle the network switch.
   * This function has variety of conditions to handle the network switch depending on the connectors or namespace's connection states.
   * @param args.network - The network to switch to.
   * @param args.shouldConfirmSwitch - Whether to confirm the switch. If true, the user will be asked to confirm the switch if necessary.
   * @returns void
   */
  onSwitchNetwork({ network, ignoreSwitchConfirmation = false }) {
    const currentNetwork = ChainController.state.activeCaipNetwork;
    const routerData = RouterController.state.data;
    const isSameNetwork = network.id === (currentNetwork == null ? void 0 : currentNetwork.id);
    if (isSameNetwork) {
      return;
    }
    const isCurrentNamespaceConnected = AccountController.getCaipAddress(ChainController.state.activeChain);
    const isDifferentNamespace = network.chainNamespace !== ChainController.state.activeChain;
    const isNextNamespaceConnected = AccountController.getCaipAddress(network.chainNamespace);
    const connectorId = ConnectorController.getConnectorId(ChainController.state.activeChain);
    const isConnectedWithAuth = connectorId === ConstantsUtil.CONNECTOR_ID.AUTH;
    const isSupportedForAuthConnector = ConstantsUtil.AUTH_CONNECTOR_SUPPORTED_CHAINS.find((c8) => c8 === network.chainNamespace);
    if (ignoreSwitchConfirmation || isConnectedWithAuth && isSupportedForAuthConnector) {
      RouterController.push("SwitchNetwork", { ...routerData, network });
    } else if (
      /**
       * If user switching to a different namespace and next namespace is not connected, we need to show switch active chain view for confirmation first.
       */
      isCurrentNamespaceConnected && isDifferentNamespace && !isNextNamespaceConnected
    ) {
      RouterController.push("SwitchActiveChain", {
        switchToChain: network.chainNamespace,
        navigateTo: "Connect",
        navigateWithReplace: true,
        network
      });
    } else {
      RouterController.push("SwitchNetwork", { ...routerData, network });
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/PublicStateController.js
var state8 = proxy({
  loading: false,
  open: false,
  selectedNetworkId: void 0,
  activeChain: void 0,
  initialized: false
});
var PublicStateController = {
  state: state8,
  subscribe(callback) {
    return subscribe(state8, () => callback(state8));
  },
  subscribeOpen(callback) {
    return subscribeKey(state8, "open", callback);
  },
  set(newState) {
    Object.assign(state8, { ...state8, ...newState });
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ModalController.js
var state9 = proxy({
  loading: false,
  loadingNamespaceMap: /* @__PURE__ */ new Map(),
  open: false,
  shake: false,
  namespace: void 0
});
var controller3 = {
  state: state9,
  subscribe(callback) {
    return subscribe(state9, () => callback(state9));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state9, key, callback);
  },
  async open(options) {
    var _a2, _b;
    const namespace = options == null ? void 0 : options.namespace;
    const currentNamespace = ChainController.state.activeChain;
    const isSwitchingNamespace = namespace && namespace !== currentNamespace;
    const caipAddress = (_a2 = ChainController.getAccountData(options == null ? void 0 : options.namespace)) == null ? void 0 : _a2.caipAddress;
    if (ConnectionController.state.wcBasic) {
      ApiController.prefetch({ fetchNetworkImages: false, fetchConnectorImages: false });
    } else {
      await ApiController.prefetch();
    }
    ConnectorController.setFilterByNamespace(options == null ? void 0 : options.namespace);
    ModalController.setLoading(true, namespace);
    if (namespace && isSwitchingNamespace) {
      const namespaceNetwork = ((_b = ChainController.getNetworkData(namespace)) == null ? void 0 : _b.caipNetwork) || ChainController.getRequestedCaipNetworks(namespace)[0];
      if (namespaceNetwork) {
        NetworkUtil2.onSwitchNetwork({ network: namespaceNetwork, ignoreSwitchConfirmation: true });
      }
    } else {
      const hasNoAdapters = ChainController.state.noAdapters;
      if (OptionsController.state.manualWCControl || hasNoAdapters && !caipAddress) {
        if (CoreHelperUtil.isMobile()) {
          RouterController.reset("AllWallets");
        } else {
          RouterController.reset("ConnectingWalletConnectBasic");
        }
      } else if (options == null ? void 0 : options.view) {
        RouterController.reset(options.view, options.data);
      } else if (caipAddress) {
        RouterController.reset("Account");
      } else {
        RouterController.reset("Connect");
      }
    }
    state9.open = true;
    PublicStateController.set({ open: true });
    EventsController.sendEvent({
      type: "track",
      event: "MODAL_OPEN",
      properties: { connected: Boolean(caipAddress) }
    });
  },
  close() {
    const isEmbeddedEnabled = OptionsController.state.enableEmbedded;
    const isConnected = Boolean(ChainController.state.activeCaipAddress);
    if (state9.open) {
      EventsController.sendEvent({
        type: "track",
        event: "MODAL_CLOSE",
        properties: { connected: isConnected }
      });
    }
    state9.open = false;
    RouterController.reset("Connect");
    ModalController.clearLoading();
    if (isEmbeddedEnabled) {
      if (isConnected) {
        RouterController.replace("Account");
      } else {
        RouterController.push("Connect");
      }
    } else {
      PublicStateController.set({ open: false });
    }
    ConnectionController.resetUri();
  },
  setLoading(loading, namespace) {
    if (namespace) {
      state9.loadingNamespaceMap.set(namespace, loading);
    }
    state9.loading = loading;
    PublicStateController.set({ loading });
  },
  clearLoading() {
    state9.loadingNamespaceMap.clear();
    state9.loading = false;
  },
  shake() {
    if (state9.shake) {
      return;
    }
    state9.shake = true;
    setTimeout(() => {
      state9.shake = false;
    }, 500);
  }
};
var ModalController = withErrorBoundary(controller3);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/RouterController.js
var state10 = proxy({
  view: "Connect",
  history: ["Connect"],
  transactionStack: []
});
var controller4 = {
  state: state10,
  subscribeKey(key, callback) {
    return subscribeKey(state10, key, callback);
  },
  pushTransactionStack(action) {
    state10.transactionStack.push(action);
  },
  popTransactionStack(status) {
    const action = state10.transactionStack.pop();
    if (!action) {
      return;
    }
    const { onSuccess, onError, onCancel } = action;
    switch (status) {
      case "success":
        onSuccess == null ? void 0 : onSuccess();
        break;
      case "error":
        onError == null ? void 0 : onError();
        RouterController.goBack();
        break;
      case "cancel":
        onCancel == null ? void 0 : onCancel();
        RouterController.goBack();
        break;
      default:
    }
  },
  push(view, data) {
    if (view !== state10.view) {
      state10.view = view;
      state10.history.push(view);
      state10.data = data;
    }
  },
  reset(view, data) {
    state10.view = view;
    state10.history = [view];
    state10.data = data;
  },
  replace(view, data) {
    const lastView = state10.history.at(-1);
    const isSameView = lastView === view;
    if (!isSameView) {
      state10.view = view;
      state10.history[state10.history.length - 1] = view;
      state10.data = data;
    }
  },
  goBack() {
    var _a2;
    const isConnected = ChainController.state.activeCaipAddress;
    const isFarcasterView = RouterController.state.view === "ConnectingFarcaster";
    const shouldReload = !isConnected && isFarcasterView;
    if (state10.history.length > 1) {
      state10.history.pop();
      const [last] = state10.history.slice(-1);
      if (last) {
        const isConnectView = last === "Connect";
        if (isConnected && isConnectView) {
          state10.view = "Account";
        } else {
          state10.view = last;
        }
      }
    } else {
      ModalController.close();
    }
    if ((_a2 = state10.data) == null ? void 0 : _a2.wallet) {
      state10.data.wallet = void 0;
    }
    setTimeout(() => {
      var _a3, _b, _c2;
      if (shouldReload) {
        AccountController.setFarcasterUrl(void 0, ChainController.state.activeChain);
        const authConnector = ConnectorController.getAuthConnector();
        (_a3 = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _a3.reload();
        const optionsState = snapshot(OptionsController.state);
        (_c2 = (_b = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _b.syncDappData) == null ? void 0 : _c2.call(_b, {
          metadata: optionsState.metadata,
          sdkVersion: optionsState.sdkVersion,
          projectId: optionsState.projectId,
          sdkType: optionsState.sdkType
        });
      }
    }, 100);
  },
  goBackToIndex(historyIndex) {
    if (state10.history.length > 1) {
      state10.history = state10.history.slice(0, historyIndex + 1);
      const [last] = state10.history.slice(-1);
      if (last) {
        state10.view = last;
      }
    }
  },
  goBackOrCloseModal() {
    if (RouterController.state.history.length > 1) {
      RouterController.goBack();
    } else {
      ModalController.close();
    }
  }
};
var RouterController = withErrorBoundary(controller4);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ThemeController.js
var state11 = proxy({
  themeMode: "dark",
  themeVariables: {},
  w3mThemeVariables: void 0
});
var controller5 = {
  state: state11,
  subscribe(callback) {
    return subscribe(state11, () => callback(state11));
  },
  setThemeMode(themeMode) {
    state11.themeMode = themeMode;
    try {
      const authConnector = ConnectorController.getAuthConnector();
      if (authConnector) {
        const themeVariables = controller5.getSnapshot().themeVariables;
        authConnector.provider.syncTheme({
          themeMode,
          themeVariables,
          w3mThemeVariables: getW3mThemeVariables(themeVariables, themeMode)
        });
      }
    } catch {
      console.info("Unable to sync theme to auth connector");
    }
  },
  setThemeVariables(themeVariables) {
    state11.themeVariables = { ...state11.themeVariables, ...themeVariables };
    try {
      const authConnector = ConnectorController.getAuthConnector();
      if (authConnector) {
        const themeVariablesSnapshot = controller5.getSnapshot().themeVariables;
        authConnector.provider.syncTheme({
          themeVariables: themeVariablesSnapshot,
          w3mThemeVariables: getW3mThemeVariables(state11.themeVariables, state11.themeMode)
        });
      }
    } catch {
      console.info("Unable to sync theme to auth connector");
    }
  },
  getSnapshot() {
    return snapshot(state11);
  }
};
var ThemeController = withErrorBoundary(controller5);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectorController.js
var defaultActiveConnectors = {
  eip155: void 0,
  solana: void 0,
  polkadot: void 0,
  bip122: void 0,
  cosmos: void 0
};
var state12 = proxy({
  allConnectors: [],
  connectors: [],
  activeConnector: void 0,
  filterByNamespace: void 0,
  activeConnectorIds: { ...defaultActiveConnectors },
  filterByNamespaceMap: {
    eip155: true,
    solana: true,
    polkadot: true,
    bip122: true,
    cosmos: true
  }
});
var controller6 = {
  state: state12,
  subscribe(callback) {
    return subscribe(state12, () => {
      callback(state12);
    });
  },
  subscribeKey(key, callback) {
    return subscribeKey(state12, key, callback);
  },
  initialize(namespaces) {
    namespaces.forEach((namespace) => {
      const connectorId = StorageUtil.getConnectedConnectorId(namespace);
      if (connectorId) {
        ConnectorController.setConnectorId(connectorId, namespace);
      }
    });
  },
  setActiveConnector(connector) {
    if (connector) {
      state12.activeConnector = ref(connector);
    }
  },
  setConnectors(connectors) {
    const newConnectors = connectors.filter((newConnector) => !state12.allConnectors.some((existingConnector) => existingConnector.id === newConnector.id && ConnectorController.getConnectorName(existingConnector.name) === ConnectorController.getConnectorName(newConnector.name) && existingConnector.chain === newConnector.chain));
    newConnectors.forEach((connector) => {
      if (connector.type !== "MULTI_CHAIN") {
        state12.allConnectors.push(ref(connector));
      }
    });
    const enabledNamespaces = ConnectorController.getEnabledNamespaces();
    const connectorsFilteredByNamespaces = ConnectorController.getEnabledConnectors(enabledNamespaces);
    state12.connectors = ConnectorController.mergeMultiChainConnectors(connectorsFilteredByNamespaces);
  },
  filterByNamespaces(enabledNamespaces) {
    Object.keys(state12.filterByNamespaceMap).forEach((namespace) => {
      state12.filterByNamespaceMap[namespace] = false;
    });
    enabledNamespaces.forEach((namespace) => {
      state12.filterByNamespaceMap[namespace] = true;
    });
    ConnectorController.updateConnectorsForEnabledNamespaces();
  },
  filterByNamespace(namespace, enabled) {
    state12.filterByNamespaceMap[namespace] = enabled;
    ConnectorController.updateConnectorsForEnabledNamespaces();
  },
  updateConnectorsForEnabledNamespaces() {
    const enabledNamespaces = ConnectorController.getEnabledNamespaces();
    const enabledConnectors = ConnectorController.getEnabledConnectors(enabledNamespaces);
    const areAllNamespacesEnabled = ConnectorController.areAllNamespacesEnabled();
    state12.connectors = ConnectorController.mergeMultiChainConnectors(enabledConnectors);
    if (areAllNamespacesEnabled) {
      ApiController.clearFilterByNamespaces();
    } else {
      ApiController.filterByNamespaces(enabledNamespaces);
    }
  },
  getEnabledNamespaces() {
    return Object.entries(state12.filterByNamespaceMap).filter(([_3, enabled]) => enabled).map(([namespace]) => namespace);
  },
  getEnabledConnectors(enabledNamespaces) {
    return state12.allConnectors.filter((connector) => enabledNamespaces.includes(connector.chain));
  },
  areAllNamespacesEnabled() {
    return Object.values(state12.filterByNamespaceMap).every((enabled) => enabled);
  },
  mergeMultiChainConnectors(connectors) {
    const connectorsByNameMap = ConnectorController.generateConnectorMapByName(connectors);
    const mergedConnectors = [];
    connectorsByNameMap.forEach((keyConnectors) => {
      const firstItem = keyConnectors[0];
      const isAuthConnector = (firstItem == null ? void 0 : firstItem.id) === ConstantsUtil.CONNECTOR_ID.AUTH;
      if (keyConnectors.length > 1 && firstItem) {
        mergedConnectors.push({
          name: firstItem.name,
          imageUrl: firstItem.imageUrl,
          imageId: firstItem.imageId,
          connectors: [...keyConnectors],
          type: isAuthConnector ? "AUTH" : "MULTI_CHAIN",
          // These values are just placeholders, we don't use them in multi-chain connector select screen
          chain: "eip155",
          id: (firstItem == null ? void 0 : firstItem.id) || ""
        });
      } else if (firstItem) {
        mergedConnectors.push(firstItem);
      }
    });
    return mergedConnectors;
  },
  generateConnectorMapByName(connectors) {
    const connectorsByNameMap = /* @__PURE__ */ new Map();
    connectors.forEach((connector) => {
      const { name: name2 } = connector;
      const connectorName = ConnectorController.getConnectorName(name2);
      if (!connectorName) {
        return;
      }
      const connectorsByName = connectorsByNameMap.get(connectorName) || [];
      const haveSameConnector = connectorsByName.find((c8) => c8.chain === connector.chain);
      if (!haveSameConnector) {
        connectorsByName.push(connector);
      }
      connectorsByNameMap.set(connectorName, connectorsByName);
    });
    return connectorsByNameMap;
  },
  getConnectorName(name2) {
    if (!name2) {
      return name2;
    }
    const nameOverrideMap = {
      "Trust Wallet": "Trust"
    };
    return nameOverrideMap[name2] || name2;
  },
  getUniqueConnectorsByName(connectors) {
    const uniqueConnectors = [];
    connectors.forEach((c8) => {
      if (!uniqueConnectors.find((uc2) => uc2.chain === c8.chain)) {
        uniqueConnectors.push(c8);
      }
    });
    return uniqueConnectors;
  },
  addConnector(connector) {
    var _a2, _b, _c2;
    if (connector.id === ConstantsUtil.CONNECTOR_ID.AUTH) {
      const authConnector = connector;
      const optionsState = snapshot(OptionsController.state);
      const themeMode = ThemeController.getSnapshot().themeMode;
      const themeVariables = ThemeController.getSnapshot().themeVariables;
      (_b = (_a2 = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _a2.syncDappData) == null ? void 0 : _b.call(_a2, {
        metadata: optionsState.metadata,
        sdkVersion: optionsState.sdkVersion,
        projectId: optionsState.projectId,
        sdkType: optionsState.sdkType
      });
      (_c2 = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _c2.syncTheme({
        themeMode,
        themeVariables,
        w3mThemeVariables: getW3mThemeVariables(themeVariables, themeMode)
      });
      ConnectorController.setConnectors([connector]);
    } else {
      ConnectorController.setConnectors([connector]);
    }
  },
  getAuthConnector(chainNamespace) {
    var _a2;
    const activeNamespace = chainNamespace || ChainController.state.activeChain;
    const authConnector = state12.connectors.find((c8) => c8.id === ConstantsUtil.CONNECTOR_ID.AUTH);
    if (!authConnector) {
      return void 0;
    }
    if ((_a2 = authConnector == null ? void 0 : authConnector.connectors) == null ? void 0 : _a2.length) {
      const connector = authConnector.connectors.find((c8) => c8.chain === activeNamespace);
      return connector;
    }
    return authConnector;
  },
  getAnnouncedConnectorRdns() {
    return state12.connectors.filter((c8) => c8.type === "ANNOUNCED").map((c8) => {
      var _a2;
      return (_a2 = c8.info) == null ? void 0 : _a2.rdns;
    });
  },
  getConnectorById(id) {
    return state12.allConnectors.find((c8) => c8.id === id);
  },
  getConnector(id, rdns) {
    const connectorsByNamespace = state12.allConnectors.filter((c8) => c8.chain === ChainController.state.activeChain);
    return connectorsByNamespace.find((c8) => {
      var _a2;
      return c8.explorerId === id || ((_a2 = c8.info) == null ? void 0 : _a2.rdns) === rdns;
    });
  },
  syncIfAuthConnector(connector) {
    var _a2, _b;
    if (connector.id !== "ID_AUTH") {
      return;
    }
    const authConnector = connector;
    const optionsState = snapshot(OptionsController.state);
    const themeMode = ThemeController.getSnapshot().themeMode;
    const themeVariables = ThemeController.getSnapshot().themeVariables;
    (_b = (_a2 = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _a2.syncDappData) == null ? void 0 : _b.call(_a2, {
      metadata: optionsState.metadata,
      sdkVersion: optionsState.sdkVersion,
      sdkType: optionsState.sdkType,
      projectId: optionsState.projectId
    });
    authConnector.provider.syncTheme({
      themeMode,
      themeVariables,
      w3mThemeVariables: getW3mThemeVariables(themeVariables, themeMode)
    });
  },
  /**
   * Returns the connectors filtered by namespace.
   * @param namespace - The namespace to filter the connectors by.
   * @returns ConnectorWithProviders[].
   */
  getConnectorsByNamespace(namespace) {
    const namespaceConnectors = state12.allConnectors.filter((connector) => connector.chain === namespace);
    return ConnectorController.mergeMultiChainConnectors(namespaceConnectors);
  },
  canSwitchToSmartAccount(namespace) {
    const isSmartAccountEnabled = ChainController.checkIfSmartAccountEnabled();
    return isSmartAccountEnabled && getPreferredAccountType(namespace) === W3mFrameRpcConstants.ACCOUNT_TYPES.EOA;
  },
  selectWalletConnector(wallet) {
    const connector = ConnectorController.getConnector(wallet.id, wallet.rdns);
    const namespace = ChainController.state.activeChain;
    MobileWalletUtil.handleMobileDeeplinkRedirect((connector == null ? void 0 : connector.explorerId) || wallet.id, namespace);
    if (connector) {
      RouterController.push("ConnectingExternal", { connector });
    } else {
      RouterController.push("ConnectingWalletConnect", { wallet });
    }
  },
  /**
   * Returns the connectors. If a namespace is provided, the connectors are filtered by namespace.
   * @param namespace - The namespace to filter the connectors by. If not provided, all connectors are returned.
   * @returns ConnectorWithProviders[].
   */
  getConnectors(namespace) {
    if (namespace) {
      return ConnectorController.getConnectorsByNamespace(namespace);
    }
    return ConnectorController.mergeMultiChainConnectors(state12.allConnectors);
  },
  /**
   * Sets the filter by namespace and updates the connectors.
   * @param namespace - The namespace to filter the connectors by.
   */
  setFilterByNamespace(namespace) {
    state12.filterByNamespace = namespace;
    state12.connectors = ConnectorController.getConnectors(namespace);
    ApiController.setFilterByNamespace(namespace);
  },
  setConnectorId(connectorId, namespace) {
    if (connectorId) {
      state12.activeConnectorIds = {
        ...state12.activeConnectorIds,
        [namespace]: connectorId
      };
      StorageUtil.setConnectedConnectorId(namespace, connectorId);
    }
  },
  removeConnectorId(namespace) {
    state12.activeConnectorIds = {
      ...state12.activeConnectorIds,
      [namespace]: void 0
    };
    StorageUtil.deleteConnectedConnectorId(namespace);
  },
  getConnectorId(namespace) {
    if (!namespace) {
      return void 0;
    }
    return state12.activeConnectorIds[namespace];
  },
  isConnected(namespace) {
    if (!namespace) {
      return Object.values(state12.activeConnectorIds).some((id) => Boolean(id));
    }
    return Boolean(state12.activeConnectorIds[namespace]);
  },
  resetConnectorIds() {
    state12.activeConnectorIds = { ...defaultActiveConnectors };
  }
};
var ConnectorController = withErrorBoundary(controller6);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConnectorControllerUtil.js
var UPDATE_EMAIL_INTERVAL_MS = 1e3;
var ConnectorControllerUtil = {
  checkNamespaceConnectorId(namespace, connectorId) {
    return ConnectorController.getConnectorId(namespace) === connectorId;
  },
  isSocialProvider(socialProvider) {
    return ConstantsUtil2.DEFAULT_REMOTE_FEATURES.socials.includes(socialProvider);
  },
  connectWalletConnect({ walletConnect, connector, closeModalOnConnect = true, redirectViewOnModalClose = "Connect", onOpen, onConnect }) {
    return new Promise((resolve, reject) => {
      if (walletConnect) {
        ConnectorController.setActiveConnector(connector);
      }
      onOpen == null ? void 0 : onOpen(CoreHelperUtil.isMobile() && walletConnect);
      if (redirectViewOnModalClose) {
        const unsubscribeModalController = ModalController.subscribeKey("open", (val) => {
          if (!val) {
            if (RouterController.state.view !== redirectViewOnModalClose) {
              RouterController.replace(redirectViewOnModalClose);
            }
            unsubscribeModalController();
            reject(new Error("Modal closed"));
          }
        });
      }
      const unsubscribeChainController = ChainController.subscribeKey("activeCaipAddress", (val) => {
        if (val) {
          onConnect == null ? void 0 : onConnect();
          if (closeModalOnConnect) {
            ModalController.close();
          }
          unsubscribeChainController();
          resolve(ParseUtil.parseCaipAddress(val));
        }
      });
    });
  },
  connectExternal(connector) {
    return new Promise((resolve, reject) => {
      const unsubscribeChainController = ChainController.subscribeKey("activeCaipAddress", (val) => {
        if (val) {
          ModalController.close();
          unsubscribeChainController();
          resolve(ParseUtil.parseCaipAddress(val));
        }
      });
      ConnectionController.connectExternal(connector, connector.chain).catch(() => {
        unsubscribeChainController();
        reject(new Error("Connection rejected"));
      });
    });
  },
  connectSocial({ social, closeModalOnConnect = true, onOpenFarcaster, onConnect }) {
    let socialWindow = AccountController.state.socialWindow;
    let socialProvider = AccountController.state.socialProvider;
    let connectingSocial = false;
    let popupWindow = null;
    const unsubscribeChainController = ChainController.subscribeKey("activeCaipAddress", (val) => {
      if (val) {
        if (closeModalOnConnect) {
          ModalController.close();
        }
        unsubscribeChainController();
      }
    });
    return new Promise((resolve, reject) => {
      async function handleSocialConnection(event) {
        var _a2;
        if ((_a2 = event.data) == null ? void 0 : _a2.resultUri) {
          if (event.origin === ConstantsUtil.SECURE_SITE_SDK_ORIGIN) {
            window.removeEventListener("message", handleSocialConnection, false);
            try {
              const authConnector = ConnectorController.getAuthConnector();
              if (authConnector && !connectingSocial) {
                if (socialWindow) {
                  socialWindow.close();
                  AccountController.setSocialWindow(void 0, ChainController.state.activeChain);
                  socialWindow = AccountController.state.socialWindow;
                }
                connectingSocial = true;
                const uri = event.data.resultUri;
                if (socialProvider) {
                  EventsController.sendEvent({
                    type: "track",
                    event: "SOCIAL_LOGIN_REQUEST_USER_DATA",
                    properties: { provider: socialProvider }
                  });
                }
                const network = ChainController.state.activeCaipNetwork;
                await authConnector.provider.connectSocial({
                  uri,
                  chainId: network == null ? void 0 : network.caipNetworkId
                });
                if (socialProvider) {
                  StorageUtil.setConnectedSocialProvider(socialProvider);
                  await ConnectionController.connectExternal({
                    id: authConnector.id,
                    type: authConnector.type,
                    socialUri: uri
                  }, authConnector.chain);
                  const caipAddress = ChainController.state.activeCaipAddress;
                  if (!caipAddress) {
                    reject(new Error("Failed to connect"));
                    return;
                  }
                  resolve(ParseUtil.parseCaipAddress(caipAddress));
                  EventsController.sendEvent({
                    type: "track",
                    event: "SOCIAL_LOGIN_SUCCESS",
                    properties: { provider: socialProvider }
                  });
                }
              }
            } catch (err) {
              if (socialProvider) {
                EventsController.sendEvent({
                  type: "track",
                  event: "SOCIAL_LOGIN_ERROR",
                  properties: { provider: socialProvider }
                });
              }
              reject(new Error("Failed to connect"));
            }
          } else if (socialProvider) {
            EventsController.sendEvent({
              type: "track",
              event: "SOCIAL_LOGIN_ERROR",
              properties: { provider: socialProvider }
            });
          }
        }
      }
      async function connectSocial() {
        if (social) {
          AccountController.setSocialProvider(social, ChainController.state.activeChain);
          socialProvider = AccountController.state.socialProvider;
          EventsController.sendEvent({
            type: "track",
            event: "SOCIAL_LOGIN_STARTED",
            properties: { provider: socialProvider }
          });
        }
        if (socialProvider === "farcaster") {
          onOpenFarcaster == null ? void 0 : onOpenFarcaster();
          const unsubscribeModalController = ModalController.subscribeKey("open", (val) => {
            if (!val && social === "farcaster") {
              reject(new Error("Popup closed"));
              onConnect == null ? void 0 : onConnect();
              unsubscribeModalController();
            }
          });
          const authConnector = ConnectorController.getAuthConnector();
          if (authConnector) {
            if (!AccountController.state.farcasterUrl) {
              try {
                const { url } = await authConnector.provider.getFarcasterUri();
                AccountController.setFarcasterUrl(url, ChainController.state.activeChain);
              } catch {
                reject(new Error("Failed to connect to farcaster"));
              }
            }
          }
        } else {
          const authConnector = ConnectorController.getAuthConnector();
          popupWindow = CoreHelperUtil.returnOpenHref(`${ConstantsUtil.SECURE_SITE_SDK_ORIGIN}/loading`, "popupWindow", "width=600,height=800,scrollbars=yes");
          try {
            if (authConnector && socialProvider) {
              const { uri } = await authConnector.provider.getSocialRedirectUri({
                provider: socialProvider
              });
              if (popupWindow && uri) {
                AccountController.setSocialWindow(popupWindow, ChainController.state.activeChain);
                socialWindow = AccountController.state.socialWindow;
                popupWindow.location.href = uri;
                const interval = setInterval(() => {
                  if ((socialWindow == null ? void 0 : socialWindow.closed) && !connectingSocial) {
                    reject(new Error("Popup closed"));
                    clearInterval(interval);
                  }
                }, 1e3);
                window.addEventListener("message", handleSocialConnection, false);
              } else {
                popupWindow == null ? void 0 : popupWindow.close();
                reject(new Error("Failed to initiate social connection"));
              }
            }
          } catch {
            reject(new Error("Failed to initiate social connection"));
            popupWindow == null ? void 0 : popupWindow.close();
          }
        }
      }
      connectSocial();
    });
  },
  connectEmail({ closeModalOnConnect = true, redirectViewOnModalClose = "Connect", onOpen, onConnect }) {
    return new Promise((resolve, reject) => {
      onOpen == null ? void 0 : onOpen();
      if (redirectViewOnModalClose) {
        const unsubscribeModalController = ModalController.subscribeKey("open", (val) => {
          if (!val) {
            if (RouterController.state.view !== redirectViewOnModalClose) {
              RouterController.replace(redirectViewOnModalClose);
            }
            unsubscribeModalController();
            reject(new Error("Modal closed"));
          }
        });
      }
      const unsubscribeChainController = ChainController.subscribeKey("activeCaipAddress", (val) => {
        if (val) {
          onConnect == null ? void 0 : onConnect();
          if (closeModalOnConnect) {
            ModalController.close();
          }
          unsubscribeChainController();
          resolve(ParseUtil.parseCaipAddress(val));
        }
      });
    });
  },
  async updateEmail() {
    const connectorId = StorageUtil.getConnectedConnectorId(ChainController.state.activeChain);
    const authConnector = ConnectorController.getAuthConnector();
    if (!authConnector) {
      throw new Error("No auth connector found");
    }
    if (connectorId !== ConstantsUtil.CONNECTOR_ID.AUTH) {
      throw new Error("Not connected to email or social");
    }
    const initialEmail = authConnector.provider.getEmail() ?? "";
    RouterController.push("UpdateEmailWallet", {
      email: initialEmail,
      redirectView: void 0
    });
    return new Promise((resolve, reject) => {
      const interval = setInterval(() => {
        const newEmail = authConnector.provider.getEmail() ?? "";
        if (newEmail !== initialEmail) {
          ModalController.close();
          clearInterval(interval);
          unsubscribeModalController();
          resolve({ email: newEmail });
        }
      }, UPDATE_EMAIL_INTERVAL_MS);
      const unsubscribeModalController = ModalController.subscribeKey("open", (val) => {
        if (!val) {
          if (RouterController.state.view !== "Connect") {
            RouterController.push("Connect");
          }
          clearInterval(interval);
          unsubscribeModalController();
          reject(new Error("Modal closed"));
        }
      });
    });
  },
  canSwitchToSmartAccount(namespace) {
    const isSmartAccountEnabled = ChainController.checkIfSmartAccountEnabled();
    return isSmartAccountEnabled && getPreferredAccountType(namespace) === W3mFrameRpcConstants.ACCOUNT_TYPES.EOA;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ChainControllerUtil.js
function getActiveNetworkTokenAddress() {
  var _a2, _b;
  const namespace = ((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.chainNamespace) || "eip155";
  const chainId = ((_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.id) || 1;
  const address = ConstantsUtil2.NATIVE_TOKEN_ADDRESS[namespace];
  return `${namespace}:${chainId}:${address}`;
}
function getPreferredAccountType(namespace) {
  var _a2;
  const preferredAccountType = (_a2 = ChainController.getAccountData(namespace)) == null ? void 0 : _a2.preferredAccountType;
  return preferredAccountType;
}

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConnectionControllerUtil.js
var ConnectionControllerUtil = {
  getConnectionStatus(connection, namespace) {
    const connectedConnectorId = ConnectorController.state.activeConnectorIds[namespace];
    const connections = ConnectionController.getConnections(namespace);
    const isConnectorConnected = Boolean(connectedConnectorId) && connection.connectorId === connectedConnectorId;
    if (isConnectorConnected) {
      return "connected";
    }
    const isConnectionConnected = connections.some((c8) => c8.connectorId.toLowerCase() === connection.connectorId.toLowerCase());
    if (isConnectionConnected) {
      return "active";
    }
    return "disconnected";
  },
  excludeConnectorAddressFromConnections({ connections, connectorId, addresses }) {
    return connections.map((connection) => {
      const isConnectorMatch = connectorId ? connection.connectorId.toLowerCase() === connectorId.toLowerCase() : false;
      if (isConnectorMatch && addresses) {
        const filteredAccounts = connection.accounts.filter((account) => {
          const isAddressIncluded = addresses.some((address) => address.toLowerCase() === account.address.toLowerCase());
          return !isAddressIncluded;
        });
        return { ...connection, accounts: filteredAccounts };
      }
      return connection;
    });
  },
  excludeExistingConnections(connectorIds, newConnections) {
    const existingConnectorIds = new Set(connectorIds);
    return newConnections.filter((c8) => !existingConnectorIds.has(c8.connectorId));
  },
  getConnectionsByConnectorId(connections, connectorId) {
    return connections.filter((c8) => c8.connectorId.toLowerCase() === connectorId.toLowerCase());
  },
  getConnectionsData(namespace) {
    var _a2;
    const isMultiWalletEnabled = Boolean((_a2 = OptionsController.state.remoteFeatures) == null ? void 0 : _a2.multiWallet);
    const activeConnectorId = ConnectorController.state.activeConnectorIds[namespace];
    const connections = ConnectionController.getConnections(namespace);
    const recentConnections = ConnectionController.state.recentConnections.get(namespace) ?? [];
    const recentConnectionsWithCurrentActiveConnectors = recentConnections.filter((connection) => ConnectorController.getConnectorById(connection.connectorId));
    const dedupedRecentConnections = ConnectionControllerUtil.excludeExistingConnections([...connections.map((c8) => c8.connectorId), ...activeConnectorId ? [activeConnectorId] : []], recentConnectionsWithCurrentActiveConnectors);
    if (!isMultiWalletEnabled) {
      return {
        connections: connections.filter((c8) => c8.connectorId.toLowerCase() === (activeConnectorId == null ? void 0 : activeConnectorId.toLowerCase())),
        recentConnections: []
      };
    }
    return {
      connections,
      recentConnections: dedupedRecentConnections
    };
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SnackController.js
var DEFAULT_STATE2 = Object.freeze({
  message: "",
  variant: "success",
  svg: void 0,
  open: false,
  autoClose: true
});
var state13 = proxy({
  ...DEFAULT_STATE2
});
var controller7 = {
  state: state13,
  subscribeKey(key, callback) {
    return subscribeKey(state13, key, callback);
  },
  showLoading(message, options = {}) {
    this._showMessage({ message, variant: "loading", ...options });
  },
  showSuccess(message) {
    this._showMessage({ message, variant: "success" });
  },
  showSvg(message, svg) {
    this._showMessage({ message, svg });
  },
  showError(message) {
    const errorMessage = CoreHelperUtil.parseError(message);
    this._showMessage({ message: errorMessage, variant: "error" });
  },
  hide() {
    state13.message = DEFAULT_STATE2.message;
    state13.variant = DEFAULT_STATE2.variant;
    state13.svg = DEFAULT_STATE2.svg;
    state13.open = DEFAULT_STATE2.open;
    state13.autoClose = DEFAULT_STATE2.autoClose;
  },
  _showMessage({ message, svg, variant = "success", autoClose = DEFAULT_STATE2.autoClose }) {
    if (state13.open) {
      state13.open = false;
      setTimeout(() => {
        state13.message = message;
        state13.variant = variant;
        state13.svg = svg;
        state13.open = true;
        state13.autoClose = autoClose;
      }, 150);
    } else {
      state13.message = message;
      state13.variant = variant;
      state13.svg = svg;
      state13.open = true;
      state13.autoClose = autoClose;
    }
  }
};
var SnackController = controller7;

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/TransactionsController.js
var state14 = proxy({
  transactions: [],
  coinbaseTransactions: {},
  transactionsByYear: {},
  lastNetworkInView: void 0,
  loading: false,
  empty: false,
  next: void 0
});
var controller8 = {
  state: state14,
  subscribe(callback) {
    return subscribe(state14, () => callback(state14));
  },
  setLastNetworkInView(lastNetworkInView) {
    state14.lastNetworkInView = lastNetworkInView;
  },
  async fetchTransactions(accountAddress, onramp) {
    var _a2;
    if (!accountAddress) {
      throw new Error("Transactions can't be fetched without an accountAddress");
    }
    state14.loading = true;
    try {
      const response = await BlockchainApiController.fetchTransactions({
        account: accountAddress,
        cursor: state14.next,
        onramp,
        // Coinbase transaction history state updates require the latest data
        cache: onramp === "coinbase" ? "no-cache" : void 0,
        chainId: (_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId
      });
      const nonSpamTransactions = TransactionsController.filterSpamTransactions(response.data);
      const sameChainTransactions = TransactionsController.filterByConnectedChain(nonSpamTransactions);
      const filteredTransactions = [...state14.transactions, ...sameChainTransactions];
      state14.loading = false;
      if (onramp === "coinbase") {
        state14.coinbaseTransactions = TransactionsController.groupTransactionsByYearAndMonth(state14.coinbaseTransactions, response.data);
      } else {
        state14.transactions = filteredTransactions;
        state14.transactionsByYear = TransactionsController.groupTransactionsByYearAndMonth(state14.transactionsByYear, sameChainTransactions);
      }
      state14.empty = filteredTransactions.length === 0;
      state14.next = response.next ? response.next : void 0;
    } catch (error) {
      const activeChainNamespace = ChainController.state.activeChain;
      EventsController.sendEvent({
        type: "track",
        event: "ERROR_FETCH_TRANSACTIONS",
        properties: {
          address: accountAddress,
          projectId: OptionsController.state.projectId,
          cursor: state14.next,
          isSmartAccount: getPreferredAccountType(activeChainNamespace) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      SnackController.showError("Failed to fetch transactions");
      state14.loading = false;
      state14.empty = true;
      state14.next = void 0;
    }
  },
  groupTransactionsByYearAndMonth(transactionsMap = {}, transactions = []) {
    const grouped = transactionsMap;
    transactions.forEach((transaction) => {
      const year = new Date(transaction.metadata.minedAt).getFullYear();
      const month = new Date(transaction.metadata.minedAt).getMonth();
      const yearTransactions = grouped[year] ?? {};
      const monthTransactions = yearTransactions[month] ?? [];
      const newMonthTransactions = monthTransactions.filter((tx) => tx.id !== transaction.id);
      grouped[year] = {
        ...yearTransactions,
        [month]: [...newMonthTransactions, transaction].sort((a4, b6) => new Date(b6.metadata.minedAt).getTime() - new Date(a4.metadata.minedAt).getTime())
      };
    });
    return grouped;
  },
  filterSpamTransactions(transactions) {
    return transactions.filter((transaction) => {
      const isAllSpam = transaction.transfers.every((transfer) => {
        var _a2;
        return ((_a2 = transfer.nft_info) == null ? void 0 : _a2.flags.is_spam) === true;
      });
      return !isAllSpam;
    });
  },
  filterByConnectedChain(transactions) {
    var _a2;
    const chainId = (_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId;
    const filteredTransactions = transactions.filter((transaction) => transaction.metadata.chain === chainId);
    return filteredTransactions;
  },
  clearCursor() {
    state14.next = void 0;
  },
  resetTransactions() {
    state14.transactions = [];
    state14.transactionsByYear = {};
    state14.lastNetworkInView = void 0;
    state14.loading = false;
    state14.empty = false;
    state14.next = void 0;
  }
};
var TransactionsController = withErrorBoundary(controller8, "API_ERROR");

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectionController.js
var state15 = proxy({
  connections: /* @__PURE__ */ new Map(),
  recentConnections: /* @__PURE__ */ new Map(),
  isSwitchingConnection: false,
  wcError: false,
  buffering: false,
  status: "disconnected"
});
var wcConnectionPromise;
var controller9 = {
  state: state15,
  subscribe(callback) {
    return subscribe(state15, () => callback(state15));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state15, key, callback);
  },
  _getClient() {
    return state15._client;
  },
  setClient(client) {
    state15._client = ref(client);
  },
  initialize(adapters) {
    const namespaces = adapters.map((a4) => a4.namespace).filter(Boolean);
    ConnectionController.syncStorageConnections(namespaces);
  },
  syncStorageConnections(namespaces) {
    const storageConnections = StorageUtil.getConnections();
    const namespacesToSync = namespaces ?? Array.from(ChainController.state.chains.keys());
    for (const namespace of namespacesToSync) {
      const storageConnectionsByNamespace = storageConnections[namespace] ?? [];
      const recentConnectionsMap = new Map(state15.recentConnections);
      recentConnectionsMap.set(namespace, storageConnectionsByNamespace);
      state15.recentConnections = recentConnectionsMap;
    }
  },
  getConnections(namespace) {
    return namespace ? state15.connections.get(namespace) ?? [] : [];
  },
  hasAnyConnection(connectorId) {
    const connections = ConnectionController.state.connections;
    return Array.from(connections.values()).flatMap((_connections) => _connections).some(({ connectorId: _connectorId }) => _connectorId === connectorId);
  },
  async connectWalletConnect() {
    var _a2, _b, _c2, _d;
    if (CoreHelperUtil.isTelegram() || CoreHelperUtil.isSafari() && CoreHelperUtil.isIos()) {
      if (wcConnectionPromise) {
        await wcConnectionPromise;
        wcConnectionPromise = void 0;
        return;
      }
      if (!CoreHelperUtil.isPairingExpired(state15 == null ? void 0 : state15.wcPairingExpiry)) {
        const link = state15.wcUri;
        state15.wcUri = link;
        return;
      }
      wcConnectionPromise = (_b = (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.connectWalletConnect) == null ? void 0 : _b.call(_a2).catch(() => void 0);
      ConnectionController.state.status = "connecting";
      await wcConnectionPromise;
      wcConnectionPromise = void 0;
      state15.wcPairingExpiry = void 0;
      ConnectionController.state.status = "connected";
    } else {
      await ((_d = (_c2 = ConnectionController._getClient()) == null ? void 0 : _c2.connectWalletConnect) == null ? void 0 : _d.call(_c2));
    }
  },
  async connectExternal(options, chain2, setChain = true) {
    var _a2, _b;
    const connectData = await ((_b = (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.connectExternal) == null ? void 0 : _b.call(_a2, options));
    if (setChain) {
      ChainController.setActiveNamespace(chain2);
    }
    return connectData;
  },
  async reconnectExternal(options) {
    var _a2, _b;
    await ((_b = (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.reconnectExternal) == null ? void 0 : _b.call(_a2, options));
    const namespace = options.chain || ChainController.state.activeChain;
    if (namespace) {
      ConnectorController.setConnectorId(options.id, namespace);
    }
  },
  async setPreferredAccountType(accountType, namespace) {
    var _a2;
    ModalController.setLoading(true, ChainController.state.activeChain);
    const authConnector = ConnectorController.getAuthConnector();
    if (!authConnector) {
      return;
    }
    AccountController.setPreferredAccountType(accountType, namespace);
    await authConnector.provider.setPreferredAccount(accountType);
    StorageUtil.setPreferredAccountTypes(Object.entries(ChainController.state.chains).reduce((acc, [key, _3]) => {
      const namespace2 = key;
      const accountType2 = getPreferredAccountType(namespace2);
      if (accountType2 !== void 0) {
        ;
        acc[namespace2] = accountType2;
      }
      return acc;
    }, {}));
    await ConnectionController.reconnectExternal(authConnector);
    ModalController.setLoading(false, ChainController.state.activeChain);
    EventsController.sendEvent({
      type: "track",
      event: "SET_PREFERRED_ACCOUNT_TYPE",
      properties: {
        accountType,
        network: ((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId) || ""
      }
    });
  },
  async signMessage(message) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.signMessage(message);
  },
  parseUnits(value, decimals) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.parseUnits(value, decimals);
  },
  formatUnits(value, decimals) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.formatUnits(value, decimals);
  },
  async sendTransaction(args) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.sendTransaction(args);
  },
  async getCapabilities(params) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.getCapabilities(params);
  },
  async grantPermissions(params) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.grantPermissions(params);
  },
  async walletGetAssets(params) {
    var _a2;
    return ((_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.walletGetAssets(params)) ?? {};
  },
  async estimateGas(args) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.estimateGas(args);
  },
  async writeContract(args) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.writeContract(args);
  },
  async getEnsAddress(value) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.getEnsAddress(value);
  },
  async getEnsAvatar(value) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.getEnsAvatar(value);
  },
  checkInstalled(ids) {
    var _a2, _b;
    return ((_b = (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.checkInstalled) == null ? void 0 : _b.call(_a2, ids)) || false;
  },
  resetWcConnection() {
    state15.wcUri = void 0;
    state15.wcPairingExpiry = void 0;
    state15.wcLinking = void 0;
    state15.recentWallet = void 0;
    state15.status = "disconnected";
    TransactionsController.resetTransactions();
    StorageUtil.deleteWalletConnectDeepLink();
  },
  resetUri() {
    state15.wcUri = void 0;
    state15.wcPairingExpiry = void 0;
    wcConnectionPromise = void 0;
  },
  finalizeWcConnection() {
    var _a2, _b;
    const { wcLinking, recentWallet } = ConnectionController.state;
    if (wcLinking) {
      StorageUtil.setWalletConnectDeepLink(wcLinking);
    }
    if (recentWallet) {
      StorageUtil.setAppKitRecent(recentWallet);
    }
    EventsController.sendEvent({
      type: "track",
      event: "CONNECT_SUCCESS",
      properties: {
        method: wcLinking ? "mobile" : "qrcode",
        name: ((_b = (_a2 = RouterController.state.data) == null ? void 0 : _a2.wallet) == null ? void 0 : _b.name) || "Unknown"
      }
    });
  },
  setWcBasic(wcBasic) {
    state15.wcBasic = wcBasic;
  },
  setUri(uri) {
    state15.wcUri = uri;
    state15.wcPairingExpiry = CoreHelperUtil.getPairingExpiry();
  },
  setWcLinking(wcLinking) {
    state15.wcLinking = wcLinking;
  },
  setWcError(wcError) {
    state15.wcError = wcError;
    state15.buffering = false;
  },
  setRecentWallet(wallet) {
    state15.recentWallet = wallet;
  },
  setBuffering(buffering) {
    state15.buffering = buffering;
  },
  setStatus(status) {
    state15.status = status;
  },
  setIsSwitchingConnection(isSwitchingConnection) {
    state15.isSwitchingConnection = isSwitchingConnection;
  },
  async disconnect({ id, namespace, initialDisconnect } = {}) {
    var _a2;
    try {
      await ((_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.disconnect({
        id,
        chainNamespace: namespace,
        initialDisconnect
      }));
    } catch (error) {
      throw new AppKitError("Failed to disconnect", "INTERNAL_SDK_ERROR", error);
    }
  },
  setConnections(connections, chainNamespace) {
    const connectionsMap = new Map(state15.connections);
    connectionsMap.set(chainNamespace, connections);
    state15.connections = connectionsMap;
  },
  async handleAuthAccountSwitch({ address, namespace }) {
    var _a2, _b;
    const smartAccount = (_b = (_a2 = AccountController.state.user) == null ? void 0 : _a2.accounts) == null ? void 0 : _b.find((c8) => c8.type === "smartAccount");
    const accountType = smartAccount && smartAccount.address.toLowerCase() === address.toLowerCase() && ConnectorControllerUtil.canSwitchToSmartAccount(namespace) ? "smartAccount" : "eoa";
    await ConnectionController.setPreferredAccountType(accountType, namespace);
  },
  async handleActiveConnection({ connection, namespace, address }) {
    const connector = ConnectorController.getConnectorById(connection.connectorId);
    const isAuthConnector = connection.connectorId === ConstantsUtil.CONNECTOR_ID.AUTH;
    if (!connector) {
      throw new Error(`No connector found for connection: ${connection.connectorId}`);
    }
    if (!isAuthConnector) {
      const connectData = await ConnectionController.connectExternal({
        id: connector.id,
        type: connector.type,
        provider: connector.provider,
        address,
        chain: namespace
      }, namespace);
      return connectData == null ? void 0 : connectData.address;
    } else if (isAuthConnector && address) {
      await ConnectionController.handleAuthAccountSwitch({ address, namespace });
    }
    return address;
  },
  async handleDisconnectedConnection({ connection, namespace, address, closeModalOnConnect }) {
    var _a2, _b;
    const connector = ConnectorController.getConnectorById(connection.connectorId);
    const authName = (_b = (_a2 = connection.auth) == null ? void 0 : _a2.name) == null ? void 0 : _b.toLowerCase();
    const isAuthConnector = connection.connectorId === ConstantsUtil.CONNECTOR_ID.AUTH;
    const isWCConnector = connection.connectorId === ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT;
    if (!connector) {
      throw new Error(`No connector found for connection: ${connection.connectorId}`);
    }
    let newAddress = void 0;
    if (isAuthConnector) {
      if (authName && ConnectorControllerUtil.isSocialProvider(authName)) {
        const { address: socialAddress } = await ConnectorControllerUtil.connectSocial({
          social: authName,
          closeModalOnConnect,
          onOpenFarcaster() {
            ModalController.open({ view: "ConnectingFarcaster" });
          },
          onConnect() {
            RouterController.replace("ProfileWallets");
          }
        });
        newAddress = socialAddress;
      } else {
        const { address: emailAddress } = await ConnectorControllerUtil.connectEmail({
          closeModalOnConnect,
          onOpen() {
            ModalController.open({ view: "EmailLogin" });
          },
          onConnect() {
            RouterController.replace("ProfileWallets");
          }
        });
        newAddress = emailAddress;
      }
    } else if (isWCConnector) {
      const { address: wcAddress } = await ConnectorControllerUtil.connectWalletConnect({
        walletConnect: true,
        connector,
        closeModalOnConnect,
        onOpen(isMobile) {
          ModalController.open({ view: isMobile ? "AllWallets" : "ConnectingWalletConnect" });
        },
        onConnect() {
          RouterController.replace("ProfileWallets");
        }
      });
      newAddress = wcAddress;
    } else {
      const connectData = await ConnectionController.connectExternal({
        id: connector.id,
        type: connector.type,
        provider: connector.provider,
        chain: namespace
      }, namespace);
      if (connectData) {
        newAddress = connectData.address;
      }
    }
    if (isAuthConnector && address) {
      await ConnectionController.handleAuthAccountSwitch({ address, namespace });
    }
    return newAddress;
  },
  async switchConnection({ connection, address, namespace, closeModalOnConnect, onChange }) {
    let currentAddress = void 0;
    const caipAddress = AccountController.getCaipAddress(namespace);
    if (caipAddress) {
      const { address: currentAddressParsed } = ParseUtil.parseCaipAddress(caipAddress);
      currentAddress = currentAddressParsed;
    }
    const status = ConnectionControllerUtil.getConnectionStatus(connection, namespace);
    switch (status) {
      case "connected":
      case "active": {
        const newAddress = await ConnectionController.handleActiveConnection({
          connection,
          namespace,
          address
        });
        if (currentAddress && newAddress) {
          const hasSwitchedAccount = newAddress.toLowerCase() !== currentAddress.toLowerCase();
          onChange == null ? void 0 : onChange({
            address: newAddress,
            namespace,
            hasSwitchedAccount,
            hasSwitchedWallet: status === "active"
          });
        }
        break;
      }
      case "disconnected": {
        const newAddress = await ConnectionController.handleDisconnectedConnection({
          connection,
          namespace,
          address,
          closeModalOnConnect
        });
        if (newAddress) {
          onChange == null ? void 0 : onChange({
            address: newAddress,
            namespace,
            hasSwitchedAccount: true,
            hasSwitchedWallet: true
          });
        }
        break;
      }
      default:
        throw new Error(`Invalid connection status: ${status}`);
    }
  }
};
var ConnectionController = withErrorBoundary(controller9);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/SwapApiUtil.js
var SwapApiUtil = {
  async getTokenList() {
    var _a2;
    const caipNetwork = ChainController.state.activeCaipNetwork;
    const response = await BlockchainApiController.fetchSwapTokens({
      chainId: caipNetwork == null ? void 0 : caipNetwork.caipNetworkId
    });
    const tokens = ((_a2 = response == null ? void 0 : response.tokens) == null ? void 0 : _a2.map((token) => ({
      ...token,
      eip2612: false,
      quantity: {
        decimals: "0",
        numeric: "0"
      },
      price: 0,
      value: 0
    }))) || [];
    return tokens;
  },
  async fetchGasPrice() {
    var _a2, _b;
    const caipNetwork = ChainController.state.activeCaipNetwork;
    if (!caipNetwork) {
      return null;
    }
    try {
      switch (caipNetwork.chainNamespace) {
        case "solana":
          const lamportsPerSignature = (_b = await ((_a2 = ConnectionController) == null ? void 0 : _a2.estimateGas({ chainNamespace: "solana" }))) == null ? void 0 : _b.toString();
          return {
            standard: lamportsPerSignature,
            fast: lamportsPerSignature,
            instant: lamportsPerSignature
          };
        case "eip155":
        default:
          return await BlockchainApiController.fetchGasPrice({
            chainId: caipNetwork.caipNetworkId
          });
      }
    } catch {
      return null;
    }
  },
  async fetchSwapAllowance({ tokenAddress, userAddress, sourceTokenAmount, sourceTokenDecimals }) {
    const response = await BlockchainApiController.fetchSwapAllowance({
      tokenAddress,
      userAddress
    });
    if ((response == null ? void 0 : response.allowance) && sourceTokenAmount && sourceTokenDecimals) {
      const parsedValue = ConnectionController.parseUnits(sourceTokenAmount, sourceTokenDecimals) || 0;
      const hasAllowance = BigInt(response.allowance) >= parsedValue;
      return hasAllowance;
    }
    return false;
  },
  async getMyTokensWithBalance(forceUpdate) {
    const balances = await BalanceUtil.getMyTokensWithBalance(forceUpdate);
    AccountController.setTokenBalance(balances, ChainController.state.activeChain);
    return this.mapBalancesToSwapTokens(balances);
  },
  /**
   * Maps the balances from Blockchain API to SwapTokenWithBalance array
   * @param balances
   * @returns SwapTokenWithBalance[]
   */
  mapBalancesToSwapTokens(balances) {
    return (balances == null ? void 0 : balances.map((token) => ({
      ...token,
      address: (token == null ? void 0 : token.address) ? token.address : getActiveNetworkTokenAddress(),
      decimals: parseInt(token.quantity.decimals, 10),
      logoUri: token.iconUrl,
      eip2612: false
    }))) || [];
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SendController.js
var state16 = proxy({
  tokenBalances: [],
  loading: false
});
var controller10 = {
  state: state16,
  subscribe(callback) {
    return subscribe(state16, () => callback(state16));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state16, key, callback);
  },
  setToken(token) {
    if (token) {
      state16.token = ref(token);
    }
  },
  setTokenAmount(sendTokenAmount) {
    state16.sendTokenAmount = sendTokenAmount;
  },
  setReceiverAddress(receiverAddress) {
    state16.receiverAddress = receiverAddress;
  },
  setReceiverProfileImageUrl(receiverProfileImageUrl) {
    state16.receiverProfileImageUrl = receiverProfileImageUrl;
  },
  setReceiverProfileName(receiverProfileName) {
    state16.receiverProfileName = receiverProfileName;
  },
  setNetworkBalanceInUsd(networkBalanceInUSD) {
    state16.networkBalanceInUSD = networkBalanceInUSD;
  },
  setLoading(loading) {
    state16.loading = loading;
  },
  async sendToken() {
    var _a2;
    try {
      SendController.setLoading(true);
      switch ((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.chainNamespace) {
        case "eip155":
          await SendController.sendEvmToken();
          return;
        case "solana":
          await SendController.sendSolanaToken();
          return;
        default:
          throw new Error("Unsupported chain");
      }
    } finally {
      SendController.setLoading(false);
    }
  },
  async sendEvmToken() {
    var _a2, _b, _c2;
    const activeChainNamespace = ChainController.state.activeChain;
    const activeAccountType = getPreferredAccountType(activeChainNamespace);
    if (!SendController.state.sendTokenAmount || !SendController.state.receiverAddress) {
      throw new Error("An amount and receiver address are required");
    }
    if (!SendController.state.token) {
      throw new Error("A token is required");
    }
    if ((_a2 = SendController.state.token) == null ? void 0 : _a2.address) {
      EventsController.sendEvent({
        type: "track",
        event: "SEND_INITIATED",
        properties: {
          isSmartAccount: activeAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
          token: SendController.state.token.address,
          amount: SendController.state.sendTokenAmount,
          network: ((_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.caipNetworkId) || ""
        }
      });
      await SendController.sendERC20Token({
        receiverAddress: SendController.state.receiverAddress,
        tokenAddress: SendController.state.token.address,
        sendTokenAmount: SendController.state.sendTokenAmount,
        decimals: SendController.state.token.quantity.decimals
      });
    } else {
      EventsController.sendEvent({
        type: "track",
        event: "SEND_INITIATED",
        properties: {
          isSmartAccount: activeAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
          token: SendController.state.token.symbol || "",
          amount: SendController.state.sendTokenAmount,
          network: ((_c2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _c2.caipNetworkId) || ""
        }
      });
      await SendController.sendNativeToken({
        receiverAddress: SendController.state.receiverAddress,
        sendTokenAmount: SendController.state.sendTokenAmount,
        decimals: SendController.state.token.quantity.decimals
      });
    }
  },
  async fetchTokenBalance(onError) {
    var _a2, _b;
    state16.loading = true;
    const chainId = (_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId;
    const chain2 = (_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.chainNamespace;
    const caipAddress = ChainController.state.activeCaipAddress;
    const address = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : void 0;
    if (state16.lastRetry && !CoreHelperUtil.isAllowedRetry(state16.lastRetry, 30 * ConstantsUtil2.ONE_SEC_MS)) {
      state16.loading = false;
      return [];
    }
    try {
      if (address && chainId && chain2) {
        const balances = await BalanceUtil.getMyTokensWithBalance();
        state16.tokenBalances = balances;
        state16.lastRetry = void 0;
        return balances;
      }
    } catch (error) {
      state16.lastRetry = Date.now();
      onError == null ? void 0 : onError(error);
      SnackController.showError("Token Balance Unavailable");
    } finally {
      state16.loading = false;
    }
    return [];
  },
  fetchNetworkBalance() {
    if (state16.tokenBalances.length === 0) {
      return;
    }
    const networkTokenBalances = SwapApiUtil.mapBalancesToSwapTokens(state16.tokenBalances);
    if (!networkTokenBalances) {
      return;
    }
    const networkToken = networkTokenBalances.find((token) => token.address === getActiveNetworkTokenAddress());
    if (!networkToken) {
      return;
    }
    state16.networkBalanceInUSD = networkToken ? NumberUtil.multiply(networkToken.quantity.numeric, networkToken.price).toString() : "0";
  },
  async sendNativeToken(params) {
    var _a2, _b, _c2;
    RouterController.pushTransactionStack({});
    const to4 = params.receiverAddress;
    const address = AccountController.state.address;
    const value = ConnectionController.parseUnits(params.sendTokenAmount.toString(), Number(params.decimals));
    const data = "0x";
    await ConnectionController.sendTransaction({
      chainNamespace: "eip155",
      to: to4,
      address,
      data,
      value: value ?? BigInt(0)
    });
    EventsController.sendEvent({
      type: "track",
      event: "SEND_SUCCESS",
      properties: {
        isSmartAccount: getPreferredAccountType("eip155") === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
        token: ((_a2 = SendController.state.token) == null ? void 0 : _a2.symbol) || "",
        amount: params.sendTokenAmount,
        network: ((_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.caipNetworkId) || ""
      }
    });
    (_c2 = ConnectionController._getClient()) == null ? void 0 : _c2.updateBalance("eip155");
    SendController.resetSend();
  },
  async sendERC20Token(params) {
    RouterController.pushTransactionStack({
      onSuccess() {
        RouterController.replace("Account");
      }
    });
    const amount = ConnectionController.parseUnits(params.sendTokenAmount.toString(), Number(params.decimals));
    if (AccountController.state.address && params.sendTokenAmount && params.receiverAddress && params.tokenAddress) {
      const tokenAddress = CoreHelperUtil.getPlainAddress(params.tokenAddress);
      await ConnectionController.writeContract({
        fromAddress: AccountController.state.address,
        tokenAddress,
        args: [params.receiverAddress, amount ?? BigInt(0)],
        method: "transfer",
        abi: ContractUtil.getERC20Abi(tokenAddress),
        chainNamespace: "eip155"
      });
      SendController.resetSend();
    }
  },
  async sendSolanaToken() {
    var _a2;
    if (!SendController.state.sendTokenAmount || !SendController.state.receiverAddress) {
      throw new Error("An amount and receiver address are required");
    }
    RouterController.pushTransactionStack({
      onSuccess() {
        RouterController.replace("Account");
      }
    });
    await ConnectionController.sendTransaction({
      chainNamespace: "solana",
      to: SendController.state.receiverAddress,
      value: SendController.state.sendTokenAmount
    });
    (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.updateBalance("solana");
    SendController.resetSend();
  },
  resetSend() {
    state16.token = void 0;
    state16.sendTokenAmount = void 0;
    state16.receiverAddress = void 0;
    state16.receiverProfileImageUrl = void 0;
    state16.receiverProfileName = void 0;
    state16.loading = false;
    state16.tokenBalances = [];
  }
};
var SendController = withErrorBoundary(controller10);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js
var accountState = {
  currentTab: 0,
  tokenBalance: [],
  smartAccountDeployed: false,
  addressLabels: /* @__PURE__ */ new Map(),
  user: void 0,
  preferredAccountType: void 0
};
var networkState = {
  caipNetwork: void 0,
  supportsAllNetworks: true,
  smartAccountEnabledNetworks: []
};
var state17 = proxy({
  chains: proxyMap(),
  activeCaipAddress: void 0,
  activeChain: void 0,
  activeCaipNetwork: void 0,
  noAdapters: false,
  universalAdapter: {
    networkControllerClient: void 0,
    connectionControllerClient: void 0
  },
  isSwitchingNamespace: false
});
var controller11 = {
  state: state17,
  subscribe(callback) {
    return subscribe(state17, () => {
      callback(state17);
    });
  },
  subscribeKey(key, callback) {
    return subscribeKey(state17, key, callback);
  },
  subscribeChainProp(property, callback, chain2) {
    let prev = void 0;
    return subscribe(state17.chains, () => {
      var _a2;
      const activeChain = chain2 || state17.activeChain;
      if (activeChain) {
        const nextValue = (_a2 = state17.chains.get(activeChain)) == null ? void 0 : _a2[property];
        if (prev !== nextValue) {
          prev = nextValue;
          callback(nextValue);
        }
      }
    });
  },
  initialize(adapters, caipNetworks, clients) {
    const { chainId: activeChainId, namespace: activeNamespace } = StorageUtil.getActiveNetworkProps();
    const activeCaipNetwork = caipNetworks == null ? void 0 : caipNetworks.find((network) => network.id.toString() === (activeChainId == null ? void 0 : activeChainId.toString()));
    const defaultAdapter = adapters.find((adapter) => (adapter == null ? void 0 : adapter.namespace) === activeNamespace);
    const adapterToActivate = defaultAdapter || (adapters == null ? void 0 : adapters[0]);
    const namespacesFromAdapters = adapters.map((a4) => a4.namespace).filter((n6) => n6 !== void 0);
    const namespaces = OptionsController.state.enableEmbedded ? /* @__PURE__ */ new Set([...namespacesFromAdapters]) : /* @__PURE__ */ new Set([...(caipNetworks == null ? void 0 : caipNetworks.map((network) => network.chainNamespace)) ?? []]);
    if ((adapters == null ? void 0 : adapters.length) === 0 || !adapterToActivate) {
      state17.noAdapters = true;
    }
    if (!state17.noAdapters) {
      state17.activeChain = adapterToActivate == null ? void 0 : adapterToActivate.namespace;
      state17.activeCaipNetwork = activeCaipNetwork;
      ChainController.setChainNetworkData(adapterToActivate == null ? void 0 : adapterToActivate.namespace, {
        caipNetwork: activeCaipNetwork
      });
      if (state17.activeChain) {
        PublicStateController.set({ activeChain: adapterToActivate == null ? void 0 : adapterToActivate.namespace });
      }
    }
    namespaces.forEach((namespace) => {
      const namespaceNetworks = caipNetworks == null ? void 0 : caipNetworks.filter((network) => network.chainNamespace === namespace);
      const storedAccountTypes = StorageUtil.getPreferredAccountTypes() || {};
      const defaultTypes = { ...OptionsController.state.defaultAccountTypes, ...storedAccountTypes };
      ChainController.state.chains.set(namespace, {
        namespace,
        networkState: proxy({
          ...networkState,
          caipNetwork: namespaceNetworks == null ? void 0 : namespaceNetworks[0]
        }),
        accountState: proxy({
          ...accountState,
          preferredAccountType: defaultTypes[namespace]
        }),
        caipNetworks: namespaceNetworks ?? [],
        ...clients
      });
      ChainController.setRequestedCaipNetworks(namespaceNetworks ?? [], namespace);
    });
  },
  removeAdapter(namespace) {
    var _a2, _b;
    if (state17.activeChain === namespace) {
      const nextAdapter = Array.from(state17.chains.entries()).find(([chainNamespace]) => chainNamespace !== namespace);
      if (nextAdapter) {
        const caipNetwork = (_b = (_a2 = nextAdapter[1]) == null ? void 0 : _a2.caipNetworks) == null ? void 0 : _b[0];
        if (caipNetwork) {
          ChainController.setActiveCaipNetwork(caipNetwork);
        }
      }
    }
    state17.chains.delete(namespace);
  },
  addAdapter(adapter, { networkControllerClient, connectionControllerClient }, caipNetworks) {
    state17.chains.set(adapter.namespace, {
      namespace: adapter.namespace,
      networkState: {
        ...networkState,
        caipNetwork: caipNetworks[0]
      },
      accountState,
      caipNetworks,
      connectionControllerClient,
      networkControllerClient
    });
    ChainController.setRequestedCaipNetworks((caipNetworks == null ? void 0 : caipNetworks.filter((caipNetwork) => caipNetwork.chainNamespace === adapter.namespace)) ?? [], adapter.namespace);
  },
  addNetwork(network) {
    var _a2;
    const chainAdapter = state17.chains.get(network.chainNamespace);
    if (chainAdapter) {
      const newNetworks = [...chainAdapter.caipNetworks || []];
      if (!((_a2 = chainAdapter.caipNetworks) == null ? void 0 : _a2.find((caipNetwork) => caipNetwork.id === network.id))) {
        newNetworks.push(network);
      }
      state17.chains.set(network.chainNamespace, { ...chainAdapter, caipNetworks: newNetworks });
      ChainController.setRequestedCaipNetworks(newNetworks, network.chainNamespace);
      ConnectorController.filterByNamespace(network.chainNamespace, true);
    }
  },
  removeNetwork(namespace, networkId) {
    var _a2, _b, _c2;
    const chainAdapter = state17.chains.get(namespace);
    if (chainAdapter) {
      const isActiveNetwork = ((_a2 = state17.activeCaipNetwork) == null ? void 0 : _a2.id) === networkId;
      const newCaipNetworksOfAdapter = [
        ...((_b = chainAdapter.caipNetworks) == null ? void 0 : _b.filter((network) => network.id !== networkId)) || []
      ];
      if (isActiveNetwork && ((_c2 = chainAdapter == null ? void 0 : chainAdapter.caipNetworks) == null ? void 0 : _c2[0])) {
        ChainController.setActiveCaipNetwork(chainAdapter.caipNetworks[0]);
      }
      state17.chains.set(namespace, { ...chainAdapter, caipNetworks: newCaipNetworksOfAdapter });
      ChainController.setRequestedCaipNetworks(newCaipNetworksOfAdapter || [], namespace);
      if (newCaipNetworksOfAdapter.length === 0) {
        ConnectorController.filterByNamespace(namespace, false);
      }
    }
  },
  setAdapterNetworkState(chain2, props) {
    const chainAdapter = state17.chains.get(chain2);
    if (chainAdapter) {
      chainAdapter.networkState = {
        ...chainAdapter.networkState || networkState,
        ...props
      };
      state17.chains.set(chain2, chainAdapter);
    }
  },
  setChainAccountData(chain2, accountProps, _unknown = true) {
    if (!chain2) {
      throw new Error("Chain is required to update chain account data");
    }
    const chainAdapter = state17.chains.get(chain2);
    if (chainAdapter) {
      const newAccountState = { ...chainAdapter.accountState || accountState, ...accountProps };
      state17.chains.set(chain2, { ...chainAdapter, accountState: newAccountState });
      if (state17.chains.size === 1 || state17.activeChain === chain2) {
        if (accountProps.caipAddress) {
          state17.activeCaipAddress = accountProps.caipAddress;
        }
        AccountController.replaceState(newAccountState);
      }
    }
  },
  setChainNetworkData(chain2, networkProps) {
    if (!chain2) {
      return;
    }
    const chainAdapter = state17.chains.get(chain2);
    if (chainAdapter) {
      const newNetworkState = { ...chainAdapter.networkState || networkState, ...networkProps };
      state17.chains.set(chain2, { ...chainAdapter, networkState: newNetworkState });
    }
  },
  // eslint-disable-next-line max-params
  setAccountProp(prop, value, chain2, replaceState = true) {
    ChainController.setChainAccountData(chain2, { [prop]: value }, replaceState);
  },
  setActiveNamespace(chain2) {
    var _a2, _b;
    state17.activeChain = chain2;
    const newAdapter = chain2 ? state17.chains.get(chain2) : void 0;
    const caipNetwork = (_a2 = newAdapter == null ? void 0 : newAdapter.networkState) == null ? void 0 : _a2.caipNetwork;
    if ((caipNetwork == null ? void 0 : caipNetwork.id) && chain2) {
      state17.activeCaipAddress = (_b = newAdapter == null ? void 0 : newAdapter.accountState) == null ? void 0 : _b.caipAddress;
      state17.activeCaipNetwork = caipNetwork;
      ChainController.setChainNetworkData(chain2, { caipNetwork });
      StorageUtil.setActiveCaipNetworkId(caipNetwork == null ? void 0 : caipNetwork.caipNetworkId);
      PublicStateController.set({
        activeChain: chain2,
        selectedNetworkId: caipNetwork == null ? void 0 : caipNetwork.caipNetworkId
      });
    }
  },
  setActiveCaipNetwork(caipNetwork) {
    var _a2, _b, _c2;
    if (!caipNetwork) {
      return;
    }
    if (state17.activeChain !== caipNetwork.chainNamespace) {
      ChainController.setIsSwitchingNamespace(true);
    }
    const newAdapter = state17.chains.get(caipNetwork.chainNamespace);
    state17.activeChain = caipNetwork.chainNamespace;
    state17.activeCaipNetwork = caipNetwork;
    ChainController.setChainNetworkData(caipNetwork.chainNamespace, { caipNetwork });
    if ((_a2 = newAdapter == null ? void 0 : newAdapter.accountState) == null ? void 0 : _a2.address) {
      state17.activeCaipAddress = `${caipNetwork.chainNamespace}:${caipNetwork.id}:${(_b = newAdapter == null ? void 0 : newAdapter.accountState) == null ? void 0 : _b.address}`;
    } else {
      state17.activeCaipAddress = void 0;
    }
    ChainController.setAccountProp("caipAddress", state17.activeCaipAddress, caipNetwork.chainNamespace);
    if (newAdapter) {
      AccountController.replaceState(newAdapter.accountState);
    }
    SendController.resetSend();
    PublicStateController.set({
      activeChain: state17.activeChain,
      selectedNetworkId: (_c2 = state17.activeCaipNetwork) == null ? void 0 : _c2.caipNetworkId
    });
    StorageUtil.setActiveCaipNetworkId(caipNetwork.caipNetworkId);
    const isSupported = ChainController.checkIfSupportedNetwork(caipNetwork.chainNamespace);
    if (!isSupported && OptionsController.state.enableNetworkSwitch && !OptionsController.state.allowUnsupportedChain && !ConnectionController.state.wcBasic) {
      ChainController.showUnsupportedChainUI();
    }
  },
  addCaipNetwork(caipNetwork) {
    var _a2;
    if (!caipNetwork) {
      return;
    }
    const chain2 = state17.chains.get(caipNetwork.chainNamespace);
    if (chain2) {
      (_a2 = chain2 == null ? void 0 : chain2.caipNetworks) == null ? void 0 : _a2.push(caipNetwork);
    }
  },
  async switchActiveNamespace(namespace) {
    var _a2;
    if (!namespace) {
      return;
    }
    const isDifferentChain = namespace !== ChainController.state.activeChain;
    const caipNetworkOfNamespace = (_a2 = ChainController.getNetworkData(namespace)) == null ? void 0 : _a2.caipNetwork;
    const firstNetworkWithChain = ChainController.getCaipNetworkByNamespace(namespace, caipNetworkOfNamespace == null ? void 0 : caipNetworkOfNamespace.id);
    if (isDifferentChain && firstNetworkWithChain) {
      await ChainController.switchActiveNetwork(firstNetworkWithChain);
    }
  },
  async switchActiveNetwork(network) {
    var _a2;
    const activeAdapter = ChainController.state.chains.get(ChainController.state.activeChain);
    const unsupportedNetwork = !((_a2 = activeAdapter == null ? void 0 : activeAdapter.caipNetworks) == null ? void 0 : _a2.some((caipNetwork) => {
      var _a3;
      return caipNetwork.id === ((_a3 = state17.activeCaipNetwork) == null ? void 0 : _a3.id);
    }));
    const networkControllerClient = ChainController.getNetworkControllerClient(network.chainNamespace);
    if (networkControllerClient) {
      try {
        await networkControllerClient.switchCaipNetwork(network);
        if (unsupportedNetwork) {
          ModalController.close();
        }
      } catch (error) {
        RouterController.goBack();
      }
      EventsController.sendEvent({
        type: "track",
        event: "SWITCH_NETWORK",
        properties: { network: network.caipNetworkId }
      });
    }
  },
  getNetworkControllerClient(chainNamespace) {
    const chain2 = chainNamespace || state17.activeChain;
    const chainAdapter = state17.chains.get(chain2);
    if (!chainAdapter) {
      throw new Error("Chain adapter not found");
    }
    if (!chainAdapter.networkControllerClient) {
      throw new Error("NetworkController client not set");
    }
    return chainAdapter.networkControllerClient;
  },
  getConnectionControllerClient(_chain) {
    const chain2 = _chain || state17.activeChain;
    if (!chain2) {
      throw new Error("Chain is required to get connection controller client");
    }
    const chainAdapter = state17.chains.get(chain2);
    if (!(chainAdapter == null ? void 0 : chainAdapter.connectionControllerClient)) {
      throw new Error("ConnectionController client not set");
    }
    return chainAdapter.connectionControllerClient;
  },
  getAccountProp(key, _chain) {
    var _a2;
    let chain2 = state17.activeChain;
    if (_chain) {
      chain2 = _chain;
    }
    if (!chain2) {
      return void 0;
    }
    const chainAccountState = (_a2 = state17.chains.get(chain2)) == null ? void 0 : _a2.accountState;
    if (!chainAccountState) {
      return void 0;
    }
    return chainAccountState[key];
  },
  getNetworkProp(key, namespace) {
    var _a2;
    const chainNetworkState = (_a2 = state17.chains.get(namespace)) == null ? void 0 : _a2.networkState;
    if (!chainNetworkState) {
      return void 0;
    }
    return chainNetworkState[key];
  },
  getRequestedCaipNetworks(chainToFilter) {
    const adapter = state17.chains.get(chainToFilter);
    const { approvedCaipNetworkIds = [], requestedCaipNetworks = [] } = (adapter == null ? void 0 : adapter.networkState) || {};
    const sortedNetworks = CoreHelperUtil.sortRequestedNetworks(approvedCaipNetworkIds, requestedCaipNetworks);
    return sortedNetworks;
  },
  getAllRequestedCaipNetworks() {
    const requestedCaipNetworks = [];
    state17.chains.forEach((chainAdapter) => {
      const caipNetworks = ChainController.getRequestedCaipNetworks(chainAdapter.namespace);
      requestedCaipNetworks.push(...caipNetworks);
    });
    return requestedCaipNetworks;
  },
  setRequestedCaipNetworks(caipNetworks, chain2) {
    ChainController.setAdapterNetworkState(chain2, { requestedCaipNetworks: caipNetworks });
    const allRequestedCaipNetworks = ChainController.getAllRequestedCaipNetworks();
    const namespaces = allRequestedCaipNetworks.map((network) => network.chainNamespace);
    const uniqueNamespaces = Array.from(new Set(namespaces));
    ConnectorController.filterByNamespaces(uniqueNamespaces);
  },
  getAllApprovedCaipNetworkIds() {
    const approvedCaipNetworkIds = [];
    state17.chains.forEach((chainAdapter) => {
      const approvedIds = ChainController.getApprovedCaipNetworkIds(chainAdapter.namespace);
      approvedCaipNetworkIds.push(...approvedIds);
    });
    return approvedCaipNetworkIds;
  },
  getActiveCaipNetwork(chainNamespace) {
    var _a2, _b;
    if (chainNamespace) {
      return (_b = (_a2 = state17.chains.get(chainNamespace)) == null ? void 0 : _a2.networkState) == null ? void 0 : _b.caipNetwork;
    }
    return state17.activeCaipNetwork;
  },
  getActiveCaipAddress() {
    return state17.activeCaipAddress;
  },
  getApprovedCaipNetworkIds(namespace) {
    var _a2;
    const adapter = state17.chains.get(namespace);
    const approvedCaipNetworkIds = ((_a2 = adapter == null ? void 0 : adapter.networkState) == null ? void 0 : _a2.approvedCaipNetworkIds) || [];
    return approvedCaipNetworkIds;
  },
  async setApprovedCaipNetworksData(namespace) {
    const networkControllerClient = ChainController.getNetworkControllerClient();
    const data = await (networkControllerClient == null ? void 0 : networkControllerClient.getApprovedCaipNetworksData());
    ChainController.setAdapterNetworkState(namespace, {
      approvedCaipNetworkIds: data == null ? void 0 : data.approvedCaipNetworkIds,
      supportsAllNetworks: data == null ? void 0 : data.supportsAllNetworks
    });
  },
  checkIfSupportedNetwork(namespace, caipNetwork) {
    const activeCaipNetwork = caipNetwork || state17.activeCaipNetwork;
    const requestedCaipNetworks = ChainController.getRequestedCaipNetworks(namespace);
    if (!requestedCaipNetworks.length) {
      return true;
    }
    return requestedCaipNetworks == null ? void 0 : requestedCaipNetworks.some((network) => network.id === (activeCaipNetwork == null ? void 0 : activeCaipNetwork.id));
  },
  checkIfSupportedChainId(chainId) {
    if (!state17.activeChain) {
      return true;
    }
    const requestedCaipNetworks = ChainController.getRequestedCaipNetworks(state17.activeChain);
    return requestedCaipNetworks == null ? void 0 : requestedCaipNetworks.some((network) => network.id === chainId);
  },
  // Smart Account Network Handlers
  setSmartAccountEnabledNetworks(smartAccountEnabledNetworks, chain2) {
    ChainController.setAdapterNetworkState(chain2, { smartAccountEnabledNetworks });
  },
  checkIfSmartAccountEnabled() {
    var _a2;
    const networkId = NetworkUtil.caipNetworkIdToNumber((_a2 = state17.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    const activeChain = state17.activeChain;
    if (!activeChain || !networkId) {
      return false;
    }
    const smartAccountEnabledNetworks = ChainController.getNetworkProp("smartAccountEnabledNetworks", activeChain);
    return Boolean(smartAccountEnabledNetworks == null ? void 0 : smartAccountEnabledNetworks.includes(Number(networkId)));
  },
  showUnsupportedChainUI() {
    ModalController.open({ view: "UnsupportedChain" });
  },
  checkIfNamesSupported() {
    const activeCaipNetwork = state17.activeCaipNetwork;
    return Boolean((activeCaipNetwork == null ? void 0 : activeCaipNetwork.chainNamespace) && ConstantsUtil2.NAMES_SUPPORTED_CHAIN_NAMESPACES.includes(activeCaipNetwork.chainNamespace));
  },
  resetNetwork(namespace) {
    ChainController.setAdapterNetworkState(namespace, {
      approvedCaipNetworkIds: void 0,
      supportsAllNetworks: true
    });
  },
  resetAccount(chain2) {
    const chainToWrite = chain2;
    if (!chainToWrite) {
      throw new Error("Chain is required to set account prop");
    }
    const currentAccountType = ChainController.getAccountProp("preferredAccountType", chainToWrite);
    state17.activeCaipAddress = void 0;
    ChainController.setChainAccountData(chainToWrite, {
      smartAccountDeployed: false,
      currentTab: 0,
      caipAddress: void 0,
      address: void 0,
      balance: void 0,
      balanceSymbol: void 0,
      profileName: void 0,
      profileImage: void 0,
      addressExplorerUrl: void 0,
      tokenBalance: [],
      connectedWalletInfo: void 0,
      preferredAccountType: currentAccountType,
      socialProvider: void 0,
      socialWindow: void 0,
      farcasterUrl: void 0,
      user: void 0,
      status: "disconnected"
    });
    ConnectorController.removeConnectorId(chainToWrite);
  },
  setIsSwitchingNamespace(isSwitchingNamespace) {
    state17.isSwitchingNamespace = isSwitchingNamespace;
  },
  getFirstCaipNetworkSupportsAuthConnector() {
    var _a2, _b;
    const availableChains = [];
    let firstCaipNetwork = void 0;
    state17.chains.forEach((chain2) => {
      if (ConstantsUtil.AUTH_CONNECTOR_SUPPORTED_CHAINS.find((ns2) => ns2 === chain2.namespace)) {
        if (chain2.namespace) {
          availableChains.push(chain2.namespace);
        }
      }
    });
    if (availableChains.length > 0) {
      const firstAvailableChain = availableChains[0];
      firstCaipNetwork = firstAvailableChain ? (_b = (_a2 = state17.chains.get(firstAvailableChain)) == null ? void 0 : _a2.caipNetworks) == null ? void 0 : _b[0] : void 0;
      return firstCaipNetwork;
    }
    return void 0;
  },
  getAccountData(chainNamespace) {
    var _a2;
    if (!chainNamespace) {
      return AccountController.state;
    }
    return (_a2 = ChainController.state.chains.get(chainNamespace)) == null ? void 0 : _a2.accountState;
  },
  getNetworkData(chainNamespace) {
    var _a2;
    const namespace = chainNamespace || state17.activeChain;
    if (!namespace) {
      return void 0;
    }
    return (_a2 = ChainController.state.chains.get(namespace)) == null ? void 0 : _a2.networkState;
  },
  getCaipNetworkByNamespace(chainNamespace, chainId) {
    var _a2, _b, _c2;
    if (!chainNamespace) {
      return void 0;
    }
    const chain2 = ChainController.state.chains.get(chainNamespace);
    const byChainId = (_a2 = chain2 == null ? void 0 : chain2.caipNetworks) == null ? void 0 : _a2.find((network) => network.id === chainId);
    if (byChainId) {
      return byChainId;
    }
    return ((_b = chain2 == null ? void 0 : chain2.networkState) == null ? void 0 : _b.caipNetwork) || ((_c2 = chain2 == null ? void 0 : chain2.caipNetworks) == null ? void 0 : _c2[0]);
  },
  /**
   * Get the requested CaipNetwork IDs for a given namespace. If namespace is not provided, all requested CaipNetwork IDs will be returned
   * @param namespace - The namespace to get the requested CaipNetwork IDs for
   * @returns The requested CaipNetwork IDs
   */
  getRequestedCaipNetworkIds() {
    const namespace = ConnectorController.state.filterByNamespace;
    const chains = namespace ? [state17.chains.get(namespace)] : Array.from(state17.chains.values());
    return chains.flatMap((chain2) => (chain2 == null ? void 0 : chain2.caipNetworks) || []).map((caipNetwork) => caipNetwork.caipNetworkId);
  },
  getCaipNetworks(namespace) {
    if (namespace) {
      return ChainController.getRequestedCaipNetworks(namespace);
    }
    return ChainController.getAllRequestedCaipNetworks();
  },
  setLastConnectedSIWECaipNetwork(network) {
    state17.lastConnectedSIWECaipNetwork = network;
  },
  getLastConnectedSIWECaipNetwork() {
    return state17.lastConnectedSIWECaipNetwork;
  }
};
var ChainController = withErrorBoundary(controller11);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/BlockchainApiController.js
var DEFAULT_OPTIONS = {
  purchaseCurrencies: [
    {
      id: "2b92315d-eab7-5bef-84fa-089a131333f5",
      name: "USD Coin",
      symbol: "USDC",
      networks: [
        {
          name: "ethereum-mainnet",
          display_name: "Ethereum",
          chain_id: "1",
          contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
        },
        {
          name: "polygon-mainnet",
          display_name: "Polygon",
          chain_id: "137",
          contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
        }
      ]
    },
    {
      id: "2b92315d-eab7-5bef-84fa-089a131333f5",
      name: "Ether",
      symbol: "ETH",
      networks: [
        {
          name: "ethereum-mainnet",
          display_name: "Ethereum",
          chain_id: "1",
          contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
        },
        {
          name: "polygon-mainnet",
          display_name: "Polygon",
          chain_id: "137",
          contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
        }
      ]
    }
  ],
  paymentCurrencies: [
    {
      id: "USD",
      payment_method_limits: [
        {
          id: "card",
          min: "10.00",
          max: "7500.00"
        },
        {
          id: "ach_bank_account",
          min: "10.00",
          max: "25000.00"
        }
      ]
    },
    {
      id: "EUR",
      payment_method_limits: [
        {
          id: "card",
          min: "10.00",
          max: "7500.00"
        },
        {
          id: "ach_bank_account",
          min: "10.00",
          max: "25000.00"
        }
      ]
    }
  ]
};
var baseUrl3 = CoreHelperUtil.getBlockchainApiUrl();
var state18 = proxy({
  clientId: null,
  api: new FetchUtil({ baseUrl: baseUrl3, clientId: null }),
  supportedChains: { http: [], ws: [] }
});
var BlockchainApiController = {
  state: state18,
  async get(request) {
    const { st: st2, sv } = BlockchainApiController.getSdkProperties();
    const projectId = OptionsController.state.projectId;
    const params = {
      ...request.params || {},
      st: st2,
      sv,
      projectId
    };
    return state18.api.get({
      ...request,
      params
    });
  },
  getSdkProperties() {
    const { sdkType, sdkVersion } = OptionsController.state;
    return {
      st: sdkType || "unknown",
      sv: sdkVersion || "unknown"
    };
  },
  async isNetworkSupported(networkId) {
    if (!networkId) {
      return false;
    }
    try {
      if (!state18.supportedChains.http.length) {
        await BlockchainApiController.getSupportedNetworks();
      }
    } catch (e3) {
      return false;
    }
    return state18.supportedChains.http.includes(networkId);
  },
  async getSupportedNetworks() {
    try {
      const supportedChains = await BlockchainApiController.get({
        path: "v1/supported-chains"
      });
      state18.supportedChains = supportedChains;
      return supportedChains;
    } catch {
      return state18.supportedChains;
    }
  },
  async fetchIdentity({ address, caipNetworkId }) {
    const isSupported = await BlockchainApiController.isNetworkSupported(caipNetworkId);
    if (!isSupported) {
      return { avatar: "", name: "" };
    }
    const identityCache = StorageUtil.getIdentityFromCacheForAddress(address);
    if (identityCache) {
      return identityCache;
    }
    const result = await BlockchainApiController.get({
      path: `/v1/identity/${address}`,
      params: {
        sender: ChainController.state.activeCaipAddress ? CoreHelperUtil.getPlainAddress(ChainController.state.activeCaipAddress) : void 0
      }
    });
    StorageUtil.updateIdentityCache({
      address,
      identity: result,
      timestamp: Date.now()
    });
    return result;
  },
  async fetchTransactions({ account, cursor, onramp, signal, cache, chainId }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { data: [], next: void 0 };
    }
    return BlockchainApiController.get({
      path: `/v1/account/${account}/history`,
      params: {
        cursor,
        onramp,
        chainId
      },
      signal,
      cache
    });
  },
  async fetchSwapQuote({ amount, userAddress, from: from8, to: to4, gasPrice }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { quotes: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/convert/quotes`,
      headers: {
        "Content-Type": "application/json"
      },
      params: {
        amount,
        userAddress,
        from: from8,
        to: to4,
        gasPrice
      }
    });
  },
  async fetchSwapTokens({ chainId }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { tokens: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/convert/tokens`,
      params: { chainId }
    });
  },
  async fetchTokenPrice({ addresses }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { fungibles: [] };
    }
    return state18.api.post({
      path: "/v1/fungible/price",
      body: {
        currency: "usd",
        addresses,
        projectId: OptionsController.state.projectId
      },
      headers: {
        "Content-Type": "application/json"
      }
    });
  },
  async fetchSwapAllowance({ tokenAddress, userAddress }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { allowance: "0" };
    }
    return BlockchainApiController.get({
      path: `/v1/convert/allowance`,
      params: {
        tokenAddress,
        userAddress
      },
      headers: {
        "Content-Type": "application/json"
      }
    });
  },
  async fetchGasPrice({ chainId }) {
    var _a2;
    const { st: st2, sv } = BlockchainApiController.getSdkProperties();
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      throw new Error("Network not supported for Gas Price");
    }
    return BlockchainApiController.get({
      path: `/v1/convert/gas-price`,
      headers: {
        "Content-Type": "application/json"
      },
      params: {
        chainId,
        st: st2,
        sv
      }
    });
  },
  async generateSwapCalldata({ amount, from: from8, to: to4, userAddress, disableEstimate }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      throw new Error("Network not supported for Swaps");
    }
    return state18.api.post({
      path: "/v1/convert/build-transaction",
      headers: {
        "Content-Type": "application/json"
      },
      body: {
        amount,
        eip155: {
          slippage: ConstantsUtil2.CONVERT_SLIPPAGE_TOLERANCE
        },
        projectId: OptionsController.state.projectId,
        from: from8,
        to: to4,
        userAddress,
        disableEstimate
      }
    });
  },
  async generateApproveCalldata({ from: from8, to: to4, userAddress }) {
    var _a2;
    const { st: st2, sv } = BlockchainApiController.getSdkProperties();
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      throw new Error("Network not supported for Swaps");
    }
    return BlockchainApiController.get({
      path: `/v1/convert/build-approve`,
      headers: {
        "Content-Type": "application/json"
      },
      params: {
        userAddress,
        from: from8,
        to: to4,
        st: st2,
        sv
      }
    });
  },
  async getBalance(address, chainId, forceUpdate) {
    var _a2;
    const { st: st2, sv } = BlockchainApiController.getSdkProperties();
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      SnackController.showError("Token Balance Unavailable");
      return { balances: [] };
    }
    const caipAddress = `${chainId}:${address}`;
    const cachedBalance = StorageUtil.getBalanceCacheForCaipAddress(caipAddress);
    if (cachedBalance) {
      return cachedBalance;
    }
    const balance = await BlockchainApiController.get({
      path: `/v1/account/${address}/balance`,
      params: {
        currency: "usd",
        chainId,
        forceUpdate,
        st: st2,
        sv
      }
    });
    StorageUtil.updateBalanceCache({
      caipAddress,
      balance,
      timestamp: Date.now()
    });
    return balance;
  },
  async lookupEnsName(name2) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { addresses: {}, attributes: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/profile/account/${name2}`,
      params: { apiVersion: "2" }
    });
  },
  async reverseLookupEnsName({ address }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return [];
    }
    return BlockchainApiController.get({
      path: `/v1/profile/reverse/${address}`,
      params: {
        sender: AccountController.state.address,
        apiVersion: "2"
      }
    });
  },
  async getEnsNameSuggestions(name2) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { suggestions: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/profile/suggestions/${name2}`,
      params: { zone: "reown.id" }
    });
  },
  async registerEnsName({ coinType, address, message, signature }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { success: false };
    }
    return state18.api.post({
      path: `/v1/profile/account`,
      body: { coin_type: coinType, address, message, signature },
      headers: {
        "Content-Type": "application/json"
      }
    });
  },
  async generateOnRampURL({ destinationWallets, partnerUserId, defaultNetwork, purchaseAmount, paymentAmount }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return "";
    }
    const response = await state18.api.post({
      path: `/v1/generators/onrampurl`,
      params: {
        projectId: OptionsController.state.projectId
      },
      body: {
        destinationWallets,
        defaultNetwork,
        partnerUserId,
        defaultExperience: "buy",
        presetCryptoAmount: purchaseAmount,
        presetFiatAmount: paymentAmount
      }
    });
    return response.url;
  },
  async getOnrampOptions() {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { paymentCurrencies: [], purchaseCurrencies: [] };
    }
    try {
      const response = await BlockchainApiController.get({
        path: `/v1/onramp/options`
      });
      return response;
    } catch (e3) {
      return DEFAULT_OPTIONS;
    }
  },
  async getOnrampQuote({ purchaseCurrency, paymentCurrency, amount, network }) {
    var _a2;
    try {
      const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
      if (!isSupported) {
        return null;
      }
      const response = await state18.api.post({
        path: `/v1/onramp/quote`,
        params: {
          projectId: OptionsController.state.projectId
        },
        body: {
          purchaseCurrency,
          paymentCurrency,
          amount,
          network
        }
      });
      return response;
    } catch (e3) {
      return {
        coinbaseFee: { amount, currency: paymentCurrency.id },
        networkFee: { amount, currency: paymentCurrency.id },
        paymentSubtotal: { amount, currency: paymentCurrency.id },
        paymentTotal: { amount, currency: paymentCurrency.id },
        purchaseAmount: { amount, currency: paymentCurrency.id },
        quoteId: "mocked-quote-id"
      };
    }
  },
  async getSmartSessions(caipAddress) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return [];
    }
    return BlockchainApiController.get({
      path: `/v1/sessions/${caipAddress}`
    });
  },
  async revokeSmartSession(address, pci, signature) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { success: false };
    }
    return state18.api.post({
      path: `/v1/sessions/${address}/revoke`,
      params: {
        projectId: OptionsController.state.projectId
      },
      body: {
        pci,
        signature
      }
    });
  },
  setClientId(clientId) {
    state18.clientId = clientId;
    state18.api = new FetchUtil({ baseUrl: baseUrl3, clientId });
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ERC7811Util.js
var ERC7811Utils = {
  /**
   * Creates a Balance object from an ERC7811 Asset object
   * @param asset - Asset object to convert
   * @param chainId - Chain ID in CAIP-2 format
   * @returns Balance object
   */
  createBalance(asset, chainId) {
    const metadata = {
      name: asset.metadata["name"] || "",
      symbol: asset.metadata["symbol"] || "",
      decimals: asset.metadata["decimals"] || 0,
      value: asset.metadata["value"] || 0,
      price: asset.metadata["price"] || 0,
      iconUrl: asset.metadata["iconUrl"] || ""
    };
    return {
      name: metadata.name,
      symbol: metadata.symbol,
      chainId,
      address: asset.address === "native" ? void 0 : this.convertAddressToCAIP10Address(asset.address, chainId),
      value: metadata.value,
      price: metadata.price,
      quantity: {
        decimals: metadata.decimals.toString(),
        numeric: this.convertHexToBalance({
          hex: asset.balance,
          decimals: metadata.decimals
        })
      },
      iconUrl: metadata.iconUrl
    };
  },
  /**
   * Converts a hex string to a Balance object
   * @param hex - Hex string to convert
   * @param decimals - Number of decimals to use
   * @returns Balance object
   */
  convertHexToBalance({ hex: hex2, decimals }) {
    return formatUnits(BigInt(hex2), decimals);
  },
  /**
   * Converts an address to a CAIP-10 address
   * @param address - Address to convert
   * @param chainId - Chain ID in CAIP-2 format
   * @returns CAIP-10 address
   */
  convertAddressToCAIP10Address(address, chainId) {
    return `${chainId}:${address}`;
  },
  /**
   *  Creates a CAIP-2 Chain ID from a chain ID and namespace
   * @param chainId  - Chain ID in hex format
   * @param namespace  - Chain namespace
   * @returns
   */
  createCAIP2ChainId(chainId, namespace) {
    return `${namespace}:${parseInt(chainId, 16)}`;
  },
  /**
   * Gets the chain ID in hex format from a CAIP-2 Chain ID
   * @param caip2ChainId - CAIP-2 Chain ID
   * @returns Chain ID in hex format
   */
  getChainIdHexFromCAIP2ChainId(caip2ChainId) {
    const parts = caip2ChainId.split(":");
    if (parts.length < 2 || !parts[1]) {
      return "0x0";
    }
    const chainPart = parts[1];
    const parsed = parseInt(chainPart, 10);
    return isNaN(parsed) ? "0x0" : `0x${parsed.toString(16)}`;
  },
  /**
   * Checks if a response is a valid WalletGetAssetsResponse
   * @param response - The response to check
   * @returns True if the response is a valid WalletGetAssetsResponse, false otherwise
   */
  isWalletGetAssetsResponse(response) {
    if (typeof response !== "object" || response === null) {
      return false;
    }
    return Object.values(response).every((value) => Array.isArray(value) && value.every((asset) => this.isValidAsset(asset)));
  },
  /**
   * Checks if an asset object is valid.
   * @param asset - The asset object to check.
   * @returns True if the asset is valid, false otherwise.
   */
  isValidAsset(asset) {
    return typeof asset === "object" && asset !== null && typeof asset.address === "string" && typeof asset.balance === "string" && (asset.type === "ERC20" || asset.type === "NATIVE") && typeof asset.metadata === "object" && asset.metadata !== null && typeof asset.metadata["name"] === "string" && typeof asset.metadata["symbol"] === "string" && typeof asset.metadata["decimals"] === "number" && typeof asset.metadata["price"] === "number" && typeof asset.metadata["iconUrl"] === "string";
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/BalanceUtil.js
var BalanceUtil = {
  /**
   * Get the balances of the user's tokens. If user connected with Auth provider or and on the EIP155 network,
   * it'll use the `wallet_getAssets` and `wallet_getCapabilities` calls to fetch the balance rather than Blockchain API
   * @param forceUpdate - If true, the balances will be fetched from the server
   * @returns The balances of the user's tokens
   */
  async getMyTokensWithBalance(forceUpdate) {
    const address = AccountController.state.address;
    const caipNetwork = ChainController.state.activeCaipNetwork;
    const isAuthConnector = ConnectorController.getConnectorId("eip155") === ConstantsUtil.CONNECTOR_ID.AUTH;
    if (!address || !caipNetwork) {
      return [];
    }
    const caipAddress = `${caipNetwork.caipNetworkId}:${address}`;
    const cachedBalance = StorageUtil.getBalanceCacheForCaipAddress(caipAddress);
    if (cachedBalance) {
      return cachedBalance.balances;
    }
    if (caipNetwork.chainNamespace === "eip155" && isAuthConnector) {
      const eip155Balances = await this.getEIP155Balances(address, caipNetwork);
      if (eip155Balances) {
        return this.filterLowQualityTokens(eip155Balances);
      }
    }
    const response = await BlockchainApiController.getBalance(address, caipNetwork.caipNetworkId, forceUpdate);
    return this.filterLowQualityTokens(response.balances);
  },
  /**
   * Get the balances of the user's tokens on the EIP155 network using native `wallet_getAssets` and `wallet_getCapabilities` calls
   * @param address - The address of the user
   * @param caipNetwork - The CAIP network
   * @returns The balances of the user's tokens on the EIP155 network
   */
  async getEIP155Balances(address, caipNetwork) {
    var _a2, _b;
    try {
      const chainIdHex = ERC7811Utils.getChainIdHexFromCAIP2ChainId(caipNetwork.caipNetworkId);
      const walletCapabilities = await ConnectionController.getCapabilities(address);
      if (!((_b = (_a2 = walletCapabilities == null ? void 0 : walletCapabilities[chainIdHex]) == null ? void 0 : _a2["assetDiscovery"]) == null ? void 0 : _b.supported)) {
        return null;
      }
      const walletGetAssetsResponse = await ConnectionController.walletGetAssets({
        account: address,
        chainFilter: [chainIdHex]
      });
      if (!ERC7811Utils.isWalletGetAssetsResponse(walletGetAssetsResponse)) {
        return null;
      }
      const assets = walletGetAssetsResponse[chainIdHex] || [];
      const filteredAssets = assets.map((asset) => ERC7811Utils.createBalance(asset, caipNetwork.caipNetworkId));
      StorageUtil.updateBalanceCache({
        caipAddress: `${caipNetwork.caipNetworkId}:${address}`,
        balance: { balances: filteredAssets },
        timestamp: Date.now()
      });
      return filteredAssets;
    } catch (error) {
      return null;
    }
  },
  /**
   * The 1Inch API includes many low-quality tokens in the balance response,
   * which appear inconsistently. This filter prevents them from being displayed.
   */
  filterLowQualityTokens(balances) {
    return balances.filter((balance) => balance.quantity.decimals !== "0");
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AccountController.js
var state19 = proxy({
  currentTab: 0,
  tokenBalance: [],
  smartAccountDeployed: false,
  addressLabels: /* @__PURE__ */ new Map()
});
var controller12 = {
  state: state19,
  replaceState(newState) {
    if (!newState) {
      return;
    }
    Object.assign(state19, ref(newState));
  },
  subscribe(callback) {
    return ChainController.subscribeChainProp("accountState", (accountState2) => {
      if (accountState2) {
        return callback(accountState2);
      }
      return void 0;
    });
  },
  subscribeKey(property, callback, chain2) {
    let prev = void 0;
    return ChainController.subscribeChainProp("accountState", (accountState2) => {
      if (accountState2) {
        const nextValue = accountState2[property];
        if (prev !== nextValue) {
          prev = nextValue;
          callback(nextValue);
        }
      }
    }, chain2);
  },
  setStatus(status, chain2) {
    ChainController.setAccountProp("status", status, chain2);
  },
  getCaipAddress(chain2) {
    return ChainController.getAccountProp("caipAddress", chain2);
  },
  setCaipAddress(caipAddress, chain2) {
    const newAddress = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : void 0;
    if (chain2 === ChainController.state.activeChain) {
      ChainController.state.activeCaipAddress = caipAddress;
    }
    ChainController.setAccountProp("caipAddress", caipAddress, chain2);
    ChainController.setAccountProp("address", newAddress, chain2);
  },
  setBalance(balance, balanceSymbol, chain2) {
    ChainController.setAccountProp("balance", balance, chain2);
    ChainController.setAccountProp("balanceSymbol", balanceSymbol, chain2);
  },
  setProfileName(profileName, chain2) {
    ChainController.setAccountProp("profileName", profileName, chain2);
  },
  setProfileImage(profileImage, chain2) {
    ChainController.setAccountProp("profileImage", profileImage, chain2);
  },
  setUser(user, chain2) {
    ChainController.setAccountProp("user", user, chain2);
  },
  setAddressExplorerUrl(explorerUrl, chain2) {
    ChainController.setAccountProp("addressExplorerUrl", explorerUrl, chain2);
  },
  setSmartAccountDeployed(isDeployed, chain2) {
    ChainController.setAccountProp("smartAccountDeployed", isDeployed, chain2);
  },
  setCurrentTab(currentTab) {
    ChainController.setAccountProp("currentTab", currentTab, ChainController.state.activeChain);
  },
  setTokenBalance(tokenBalance, chain2) {
    if (tokenBalance) {
      ChainController.setAccountProp("tokenBalance", tokenBalance, chain2);
    }
  },
  setShouldUpdateToAddress(address, chain2) {
    ChainController.setAccountProp("shouldUpdateToAddress", address, chain2);
  },
  addAddressLabel(address, label, chain2) {
    const map = ChainController.getAccountProp("addressLabels", chain2) || /* @__PURE__ */ new Map();
    map.set(address, label);
    ChainController.setAccountProp("addressLabels", map, chain2);
  },
  removeAddressLabel(address, chain2) {
    const map = ChainController.getAccountProp("addressLabels", chain2) || /* @__PURE__ */ new Map();
    map.delete(address);
    ChainController.setAccountProp("addressLabels", map, chain2);
  },
  setConnectedWalletInfo(connectedWalletInfo, chain2) {
    ChainController.setAccountProp("connectedWalletInfo", connectedWalletInfo, chain2, false);
  },
  setPreferredAccountType(preferredAccountType, chain2) {
    ChainController.setAccountProp("preferredAccountType", preferredAccountType, chain2);
  },
  setSocialProvider(socialProvider, chain2) {
    if (socialProvider) {
      ChainController.setAccountProp("socialProvider", socialProvider, chain2);
    }
  },
  setSocialWindow(socialWindow, chain2) {
    ChainController.setAccountProp("socialWindow", socialWindow ? ref(socialWindow) : void 0, chain2);
  },
  setFarcasterUrl(farcasterUrl, chain2) {
    ChainController.setAccountProp("farcasterUrl", farcasterUrl, chain2);
  },
  async fetchTokenBalance(onError) {
    var _a2, _b;
    state19.balanceLoading = true;
    const chainId = (_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId;
    const chain2 = (_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.chainNamespace;
    const caipAddress = ChainController.state.activeCaipAddress;
    const address = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : void 0;
    if (state19.lastRetry && !CoreHelperUtil.isAllowedRetry(state19.lastRetry, 30 * ConstantsUtil2.ONE_SEC_MS)) {
      state19.balanceLoading = false;
      return [];
    }
    try {
      if (address && chainId && chain2) {
        const balance = await BalanceUtil.getMyTokensWithBalance();
        AccountController.setTokenBalance(balance, chain2);
        state19.lastRetry = void 0;
        state19.balanceLoading = false;
        return balance;
      }
    } catch (error) {
      state19.lastRetry = Date.now();
      onError == null ? void 0 : onError(error);
      SnackController.showError("Token Balance Unavailable");
    } finally {
      state19.balanceLoading = false;
    }
    return [];
  },
  resetAccount(chain2) {
    ChainController.resetAccount(chain2);
  }
};
var AccountController = withErrorBoundary(controller12);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OnRampController.js
var USDC_CURRENCY_DEFAULT = {
  id: "2b92315d-eab7-5bef-84fa-089a131333f5",
  name: "USD Coin",
  symbol: "USDC",
  networks: [
    {
      name: "ethereum-mainnet",
      display_name: "Ethereum",
      chain_id: "1",
      contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
    },
    {
      name: "polygon-mainnet",
      display_name: "Polygon",
      chain_id: "137",
      contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
    }
  ]
};
var USD_CURRENCY_DEFAULT = {
  id: "USD",
  payment_method_limits: [
    {
      id: "card",
      min: "10.00",
      max: "7500.00"
    },
    {
      id: "ach_bank_account",
      min: "10.00",
      max: "25000.00"
    }
  ]
};
var defaultState = {
  providers: ONRAMP_PROVIDERS,
  selectedProvider: null,
  error: null,
  purchaseCurrency: USDC_CURRENCY_DEFAULT,
  paymentCurrency: USD_CURRENCY_DEFAULT,
  purchaseCurrencies: [USDC_CURRENCY_DEFAULT],
  paymentCurrencies: [],
  quotesLoading: false
};
var state20 = proxy(defaultState);
var controller13 = {
  state: state20,
  subscribe(callback) {
    return subscribe(state20, () => callback(state20));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state20, key, callback);
  },
  setSelectedProvider(provider) {
    if (provider && provider.name === "meld") {
      const activeChain = ChainController.state.activeChain;
      const currency = activeChain === ConstantsUtil.CHAIN.SOLANA ? "SOL" : "USDC";
      const address = ChainController.getAccountProp("address", activeChain) ?? "";
      const url = new URL(provider.url);
      url.searchParams.append("publicKey", MELD_PUBLIC_KEY);
      url.searchParams.append("destinationCurrencyCode", currency);
      url.searchParams.append("walletAddress", address);
      url.searchParams.append("externalCustomerId", OptionsController.state.projectId);
      state20.selectedProvider = { ...provider, url: url.toString() };
    } else {
      state20.selectedProvider = provider;
    }
  },
  setOnrampProviders(providers) {
    if (Array.isArray(providers) && providers.every((item) => typeof item === "string")) {
      const validOnramp = providers;
      const newProviders = ONRAMP_PROVIDERS.filter((provider) => validOnramp.includes(provider.name));
      state20.providers = newProviders;
    } else {
      state20.providers = [];
    }
  },
  setPurchaseCurrency(currency) {
    state20.purchaseCurrency = currency;
  },
  setPaymentCurrency(currency) {
    state20.paymentCurrency = currency;
  },
  setPurchaseAmount(amount) {
    OnRampController.state.purchaseAmount = amount;
  },
  setPaymentAmount(amount) {
    OnRampController.state.paymentAmount = amount;
  },
  async getAvailableCurrencies() {
    const options = await BlockchainApiController.getOnrampOptions();
    state20.purchaseCurrencies = options.purchaseCurrencies;
    state20.paymentCurrencies = options.paymentCurrencies;
    state20.paymentCurrency = options.paymentCurrencies[0] || USD_CURRENCY_DEFAULT;
    state20.purchaseCurrency = options.purchaseCurrencies[0] || USDC_CURRENCY_DEFAULT;
    await ApiController.fetchCurrencyImages(options.paymentCurrencies.map((currency) => currency.id));
    await ApiController.fetchTokenImages(options.purchaseCurrencies.map((currency) => currency.symbol));
  },
  async getQuote() {
    var _a2, _b;
    state20.quotesLoading = true;
    try {
      const quote = await BlockchainApiController.getOnrampQuote({
        purchaseCurrency: state20.purchaseCurrency,
        paymentCurrency: state20.paymentCurrency,
        amount: ((_a2 = state20.paymentAmount) == null ? void 0 : _a2.toString()) || "0",
        network: (_b = state20.purchaseCurrency) == null ? void 0 : _b.symbol
      });
      state20.quotesLoading = false;
      state20.purchaseAmount = Number(quote == null ? void 0 : quote.purchaseAmount.amount);
      return quote;
    } catch (error) {
      state20.error = error.message;
      state20.quotesLoading = false;
      return null;
    } finally {
      state20.quotesLoading = false;
    }
  },
  resetState() {
    state20.selectedProvider = null;
    state20.error = null;
    state20.purchaseCurrency = USDC_CURRENCY_DEFAULT;
    state20.paymentCurrency = USD_CURRENCY_DEFAULT;
    state20.purchaseCurrencies = [USDC_CURRENCY_DEFAULT];
    state20.paymentCurrencies = [];
    state20.paymentAmount = void 0;
    state20.purchaseAmount = void 0;
    state20.quotesLoading = false;
  }
};
var OnRampController = withErrorBoundary(controller13);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/SwapCalculationUtil.js
var SwapCalculationUtil = {
  getGasPriceInEther(gas, gasPrice) {
    const totalGasCostInWei = gasPrice * gas;
    const totalGasCostInEther = Number(totalGasCostInWei) / 1e18;
    return totalGasCostInEther;
  },
  getGasPriceInUSD(networkPrice, gas, gasPrice) {
    const totalGasCostInEther = SwapCalculationUtil.getGasPriceInEther(gas, gasPrice);
    const networkPriceInUSD = NumberUtil.bigNumber(networkPrice);
    const gasCostInUSD = networkPriceInUSD.times(totalGasCostInEther);
    return gasCostInUSD.toNumber();
  },
  getPriceImpact({ sourceTokenAmount, sourceTokenPriceInUSD, toTokenPriceInUSD, toTokenAmount }) {
    const inputValue = NumberUtil.bigNumber(sourceTokenAmount).times(sourceTokenPriceInUSD);
    const outputValue = NumberUtil.bigNumber(toTokenAmount).times(toTokenPriceInUSD);
    const priceImpact = inputValue.minus(outputValue).div(inputValue).times(100);
    return priceImpact.toNumber();
  },
  getMaxSlippage(slippage, toTokenAmount) {
    const slippageToleranceDecimal = NumberUtil.bigNumber(slippage).div(100);
    const maxSlippageAmount = NumberUtil.multiply(toTokenAmount, slippageToleranceDecimal);
    return maxSlippageAmount.toNumber();
  },
  getProviderFee(sourceTokenAmount, feePercentage = 85e-4) {
    const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(feePercentage);
    return providerFee.toString();
  },
  isInsufficientNetworkTokenForGas(networkBalanceInUSD, gasPriceInUSD) {
    const gasPrice = gasPriceInUSD || "0";
    if (NumberUtil.bigNumber(networkBalanceInUSD).eq(0)) {
      return true;
    }
    return NumberUtil.bigNumber(NumberUtil.bigNumber(gasPrice)).gt(networkBalanceInUSD);
  },
  isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, balance) {
    var _a2, _b;
    const sourceTokenBalance = (_b = (_a2 = balance == null ? void 0 : balance.find((token) => token.address === sourceTokenAddress)) == null ? void 0 : _a2.quantity) == null ? void 0 : _b.numeric;
    const isInSufficientBalance = NumberUtil.bigNumber(sourceTokenBalance || "0").lt(sourceTokenAmount);
    return isInSufficientBalance;
  },
  getToTokenAmount({ sourceToken, toToken, sourceTokenPrice, toTokenPrice, sourceTokenAmount }) {
    if (sourceTokenAmount === "0") {
      return "0";
    }
    if (!sourceToken || !toToken) {
      return "0";
    }
    const sourceTokenDecimals = sourceToken.decimals;
    const sourceTokenPriceInUSD = sourceTokenPrice;
    const toTokenDecimals = toToken.decimals;
    const toTokenPriceInUSD = toTokenPrice;
    if (toTokenPriceInUSD <= 0) {
      return "0";
    }
    const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(85e-4);
    const adjustedSourceTokenAmount = NumberUtil.bigNumber(sourceTokenAmount).minus(providerFee);
    const sourceAmountInSmallestUnit = adjustedSourceTokenAmount.times(NumberUtil.bigNumber(10).pow(sourceTokenDecimals));
    const priceRatio = NumberUtil.bigNumber(sourceTokenPriceInUSD).div(toTokenPriceInUSD);
    const decimalDifference = sourceTokenDecimals - toTokenDecimals;
    const toTokenAmountInSmallestUnit = sourceAmountInSmallestUnit.times(priceRatio).div(NumberUtil.bigNumber(10).pow(decimalDifference));
    const toTokenAmount = toTokenAmountInSmallestUnit.div(NumberUtil.bigNumber(10).pow(toTokenDecimals));
    const amount = toTokenAmount.toFixed(toTokenDecimals).toString();
    return amount;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SwapController.js
var INITIAL_GAS_LIMIT = 15e4;
var TO_AMOUNT_DECIMALS = 6;
var initialState = {
  // Loading states
  initializing: false,
  initialized: false,
  loadingPrices: false,
  loadingQuote: false,
  loadingApprovalTransaction: false,
  loadingBuildTransaction: false,
  loadingTransaction: false,
  // Error states
  fetchError: false,
  // Approval & Swap transaction states
  approvalTransaction: void 0,
  swapTransaction: void 0,
  transactionError: void 0,
  // Input values
  sourceToken: void 0,
  sourceTokenAmount: "",
  sourceTokenPriceInUSD: 0,
  toToken: void 0,
  toTokenAmount: "",
  toTokenPriceInUSD: 0,
  networkPrice: "0",
  networkBalanceInUSD: "0",
  networkTokenSymbol: "",
  inputError: void 0,
  // Request values
  slippage: ConstantsUtil2.CONVERT_SLIPPAGE_TOLERANCE,
  // Tokens
  tokens: void 0,
  popularTokens: void 0,
  suggestedTokens: void 0,
  foundTokens: void 0,
  myTokensWithBalance: void 0,
  tokensPriceMap: {},
  // Calculations
  gasFee: "0",
  gasPriceInUSD: 0,
  priceImpact: void 0,
  maxSlippage: void 0,
  providerFee: void 0
};
var state21 = proxy(initialState);
var controller14 = {
  state: state21,
  subscribe(callback) {
    return subscribe(state21, () => callback(state21));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state21, key, callback);
  },
  getParams() {
    var _a2, _b, _c2, _d, _e6, _f2, _g, _h;
    const caipAddress = ChainController.state.activeCaipAddress;
    const namespace = ChainController.state.activeChain;
    const address = CoreHelperUtil.getPlainAddress(caipAddress);
    const networkAddress = getActiveNetworkTokenAddress();
    const connectorId = ConnectorController.getConnectorId(namespace);
    if (!address) {
      throw new Error("No address found to swap the tokens from.");
    }
    const invalidToToken = !((_a2 = state21.toToken) == null ? void 0 : _a2.address) || !((_b = state21.toToken) == null ? void 0 : _b.decimals);
    const invalidSourceToken = !((_c2 = state21.sourceToken) == null ? void 0 : _c2.address) || !((_d = state21.sourceToken) == null ? void 0 : _d.decimals) || !NumberUtil.bigNumber(state21.sourceTokenAmount).gt(0);
    const invalidSourceTokenAmount = !state21.sourceTokenAmount;
    return {
      networkAddress,
      fromAddress: address,
      fromCaipAddress: caipAddress,
      sourceTokenAddress: (_e6 = state21.sourceToken) == null ? void 0 : _e6.address,
      toTokenAddress: (_f2 = state21.toToken) == null ? void 0 : _f2.address,
      toTokenAmount: state21.toTokenAmount,
      toTokenDecimals: (_g = state21.toToken) == null ? void 0 : _g.decimals,
      sourceTokenAmount: state21.sourceTokenAmount,
      sourceTokenDecimals: (_h = state21.sourceToken) == null ? void 0 : _h.decimals,
      invalidToToken,
      invalidSourceToken,
      invalidSourceTokenAmount,
      availableToSwap: caipAddress && !invalidToToken && !invalidSourceToken && !invalidSourceTokenAmount,
      isAuthConnector: connectorId === ConstantsUtil.CONNECTOR_ID.AUTH
    };
  },
  setSourceToken(sourceToken) {
    if (!sourceToken) {
      state21.sourceToken = sourceToken;
      state21.sourceTokenAmount = "";
      state21.sourceTokenPriceInUSD = 0;
      return;
    }
    state21.sourceToken = sourceToken;
    SwapController.setTokenPrice(sourceToken.address, "sourceToken");
  },
  setSourceTokenAmount(amount) {
    state21.sourceTokenAmount = amount;
  },
  setToToken(toToken) {
    if (!toToken) {
      state21.toToken = toToken;
      state21.toTokenAmount = "";
      state21.toTokenPriceInUSD = 0;
      return;
    }
    state21.toToken = toToken;
    SwapController.setTokenPrice(toToken.address, "toToken");
  },
  setToTokenAmount(amount) {
    state21.toTokenAmount = amount ? NumberUtil.formatNumberToLocalString(amount, TO_AMOUNT_DECIMALS) : "";
  },
  async setTokenPrice(address, target) {
    let price = state21.tokensPriceMap[address] || 0;
    if (!price) {
      state21.loadingPrices = true;
      price = await SwapController.getAddressPrice(address);
    }
    if (target === "sourceToken") {
      state21.sourceTokenPriceInUSD = price;
    } else if (target === "toToken") {
      state21.toTokenPriceInUSD = price;
    }
    if (state21.loadingPrices) {
      state21.loadingPrices = false;
    }
    if (SwapController.getParams().availableToSwap) {
      SwapController.swapTokens();
    }
  },
  switchTokens() {
    if (state21.initializing || !state21.initialized) {
      return;
    }
    const newSourceToken = state21.toToken ? { ...state21.toToken } : void 0;
    const newToToken = state21.sourceToken ? { ...state21.sourceToken } : void 0;
    const newSourceTokenAmount = newSourceToken && state21.toTokenAmount === "" ? "1" : state21.toTokenAmount;
    SwapController.setSourceToken(newSourceToken);
    SwapController.setToToken(newToToken);
    SwapController.setSourceTokenAmount(newSourceTokenAmount);
    SwapController.setToTokenAmount("");
    SwapController.swapTokens();
  },
  resetState() {
    state21.myTokensWithBalance = initialState.myTokensWithBalance;
    state21.tokensPriceMap = initialState.tokensPriceMap;
    state21.initialized = initialState.initialized;
    state21.sourceToken = initialState.sourceToken;
    state21.sourceTokenAmount = initialState.sourceTokenAmount;
    state21.sourceTokenPriceInUSD = initialState.sourceTokenPriceInUSD;
    state21.toToken = initialState.toToken;
    state21.toTokenAmount = initialState.toTokenAmount;
    state21.toTokenPriceInUSD = initialState.toTokenPriceInUSD;
    state21.networkPrice = initialState.networkPrice;
    state21.networkTokenSymbol = initialState.networkTokenSymbol;
    state21.networkBalanceInUSD = initialState.networkBalanceInUSD;
    state21.inputError = initialState.inputError;
    state21.myTokensWithBalance = initialState.myTokensWithBalance;
  },
  resetValues() {
    var _a2;
    const { networkAddress } = SwapController.getParams();
    const networkToken = (_a2 = state21.tokens) == null ? void 0 : _a2.find((token) => token.address === networkAddress);
    SwapController.setSourceToken(networkToken);
    SwapController.setToToken(void 0);
  },
  getApprovalLoadingState() {
    return state21.loadingApprovalTransaction;
  },
  clearError() {
    state21.transactionError = void 0;
  },
  async initializeState() {
    if (state21.initializing) {
      return;
    }
    state21.initializing = true;
    if (!state21.initialized) {
      try {
        await SwapController.fetchTokens();
        state21.initialized = true;
      } catch (error) {
        state21.initialized = false;
        SnackController.showError("Failed to initialize swap");
        RouterController.goBack();
      }
    }
    state21.initializing = false;
  },
  async fetchTokens() {
    var _a2;
    const { networkAddress } = SwapController.getParams();
    await SwapController.getTokenList();
    await SwapController.getNetworkTokenPrice();
    await SwapController.getMyTokensWithBalance();
    const networkToken = (_a2 = state21.tokens) == null ? void 0 : _a2.find((token) => token.address === networkAddress);
    if (networkToken) {
      state21.networkTokenSymbol = networkToken.symbol;
      SwapController.setSourceToken(networkToken);
      SwapController.setSourceTokenAmount("1");
    }
  },
  async getTokenList() {
    const tokens = await SwapApiUtil.getTokenList();
    state21.tokens = tokens;
    state21.popularTokens = tokens.sort((aTokenInfo, bTokenInfo) => {
      if (aTokenInfo.symbol < bTokenInfo.symbol) {
        return -1;
      }
      if (aTokenInfo.symbol > bTokenInfo.symbol) {
        return 1;
      }
      return 0;
    });
    state21.suggestedTokens = tokens.filter((token) => {
      if (ConstantsUtil2.SWAP_SUGGESTED_TOKENS.includes(token.symbol)) {
        return true;
      }
      return false;
    }, {});
  },
  async getAddressPrice(address) {
    var _a2, _b;
    const existPrice = state21.tokensPriceMap[address];
    if (existPrice) {
      return existPrice;
    }
    const response = await BlockchainApiController.fetchTokenPrice({
      addresses: [address]
    });
    const fungibles = (response == null ? void 0 : response.fungibles) || [];
    const allTokens = [...state21.tokens || [], ...state21.myTokensWithBalance || []];
    const symbol = (_a2 = allTokens == null ? void 0 : allTokens.find((token) => token.address === address)) == null ? void 0 : _a2.symbol;
    const price = ((_b = fungibles.find((p6) => p6.symbol.toLowerCase() === (symbol == null ? void 0 : symbol.toLowerCase()))) == null ? void 0 : _b.price) || 0;
    const priceAsFloat = parseFloat(price.toString());
    state21.tokensPriceMap[address] = priceAsFloat;
    return priceAsFloat;
  },
  async getNetworkTokenPrice() {
    var _a2;
    const { networkAddress } = SwapController.getParams();
    const response = await BlockchainApiController.fetchTokenPrice({
      addresses: [networkAddress]
    }).catch(() => {
      SnackController.showError("Failed to fetch network token price");
      return { fungibles: [] };
    });
    const token = (_a2 = response.fungibles) == null ? void 0 : _a2[0];
    const price = (token == null ? void 0 : token.price.toString()) || "0";
    state21.tokensPriceMap[networkAddress] = parseFloat(price);
    state21.networkTokenSymbol = (token == null ? void 0 : token.symbol) || "";
    state21.networkPrice = price;
  },
  async getMyTokensWithBalance(forceUpdate) {
    const balances = await BalanceUtil.getMyTokensWithBalance(forceUpdate);
    const swapBalances = SwapApiUtil.mapBalancesToSwapTokens(balances);
    if (!swapBalances) {
      return;
    }
    await SwapController.getInitialGasPrice();
    SwapController.setBalances(swapBalances);
  },
  setBalances(balances) {
    const { networkAddress } = SwapController.getParams();
    const caipNetwork = ChainController.state.activeCaipNetwork;
    if (!caipNetwork) {
      return;
    }
    const networkToken = balances.find((token) => token.address === networkAddress);
    balances.forEach((token) => {
      state21.tokensPriceMap[token.address] = token.price || 0;
    });
    state21.myTokensWithBalance = balances.filter((token) => token.address.startsWith(caipNetwork.caipNetworkId));
    state21.networkBalanceInUSD = networkToken ? NumberUtil.multiply(networkToken.quantity.numeric, networkToken.price).toString() : "0";
  },
  async getInitialGasPrice() {
    var _a2, _b;
    const res = await SwapApiUtil.fetchGasPrice();
    if (!res) {
      return { gasPrice: null, gasPriceInUSD: null };
    }
    switch ((_b = (_a2 = ChainController.state) == null ? void 0 : _a2.activeCaipNetwork) == null ? void 0 : _b.chainNamespace) {
      case "solana":
        state21.gasFee = res.standard ?? "0";
        state21.gasPriceInUSD = NumberUtil.multiply(res.standard, state21.networkPrice).div(1e9).toNumber();
        return {
          gasPrice: BigInt(state21.gasFee),
          gasPriceInUSD: Number(state21.gasPriceInUSD)
        };
      case "eip155":
      default:
        const value = res.standard ?? "0";
        const gasFee = BigInt(value);
        const gasLimit = BigInt(INITIAL_GAS_LIMIT);
        const gasPrice = SwapCalculationUtil.getGasPriceInUSD(state21.networkPrice, gasLimit, gasFee);
        state21.gasFee = value;
        state21.gasPriceInUSD = gasPrice;
        return { gasPrice: gasFee, gasPriceInUSD: gasPrice };
    }
  },
  // -- Swap -------------------------------------- //
  async swapTokens() {
    var _a2, _b;
    const address = AccountController.state.address;
    const sourceToken = state21.sourceToken;
    const toToken = state21.toToken;
    const haveSourceTokenAmount = NumberUtil.bigNumber(state21.sourceTokenAmount).gt(0);
    if (!haveSourceTokenAmount) {
      SwapController.setToTokenAmount("");
    }
    if (!toToken || !sourceToken || state21.loadingPrices || !haveSourceTokenAmount) {
      return;
    }
    state21.loadingQuote = true;
    const amountDecimal = NumberUtil.bigNumber(state21.sourceTokenAmount).times(10 ** sourceToken.decimals).round(0);
    try {
      const quoteResponse = await BlockchainApiController.fetchSwapQuote({
        userAddress: address,
        from: sourceToken.address,
        to: toToken.address,
        gasPrice: state21.gasFee,
        amount: amountDecimal.toString()
      });
      state21.loadingQuote = false;
      const quoteToAmount = (_b = (_a2 = quoteResponse == null ? void 0 : quoteResponse.quotes) == null ? void 0 : _a2[0]) == null ? void 0 : _b.toAmount;
      if (!quoteToAmount) {
        AlertController.open({
          shortMessage: "Incorrect amount",
          longMessage: "Please enter a valid amount"
        }, "error");
        return;
      }
      const toTokenAmount = NumberUtil.bigNumber(quoteToAmount).div(10 ** toToken.decimals).toString();
      SwapController.setToTokenAmount(toTokenAmount);
      const isInsufficientToken = SwapController.hasInsufficientToken(state21.sourceTokenAmount, sourceToken.address);
      if (isInsufficientToken) {
        state21.inputError = "Insufficient balance";
      } else {
        state21.inputError = void 0;
        SwapController.setTransactionDetails();
      }
    } catch (error) {
      state21.loadingQuote = false;
      state21.inputError = "Insufficient balance";
    }
  },
  // -- Create Transactions -------------------------------------- //
  async getTransaction() {
    const { fromCaipAddress, availableToSwap } = SwapController.getParams();
    const sourceToken = state21.sourceToken;
    const toToken = state21.toToken;
    if (!fromCaipAddress || !availableToSwap || !sourceToken || !toToken || state21.loadingQuote) {
      return void 0;
    }
    try {
      state21.loadingBuildTransaction = true;
      const hasAllowance = await SwapApiUtil.fetchSwapAllowance({
        userAddress: fromCaipAddress,
        tokenAddress: sourceToken.address,
        sourceTokenAmount: state21.sourceTokenAmount,
        sourceTokenDecimals: sourceToken.decimals
      });
      let transaction = void 0;
      if (hasAllowance) {
        transaction = await SwapController.createSwapTransaction();
      } else {
        transaction = await SwapController.createAllowanceTransaction();
      }
      state21.loadingBuildTransaction = false;
      state21.fetchError = false;
      return transaction;
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to check allowance");
      state21.loadingBuildTransaction = false;
      state21.approvalTransaction = void 0;
      state21.swapTransaction = void 0;
      state21.fetchError = true;
      return void 0;
    }
  },
  async createAllowanceTransaction() {
    const { fromCaipAddress, sourceTokenAddress, toTokenAddress } = SwapController.getParams();
    if (!fromCaipAddress || !toTokenAddress) {
      return void 0;
    }
    if (!sourceTokenAddress) {
      throw new Error("createAllowanceTransaction - No source token address found.");
    }
    try {
      const response = await BlockchainApiController.generateApproveCalldata({
        from: sourceTokenAddress,
        to: toTokenAddress,
        userAddress: fromCaipAddress
      });
      const transaction = {
        data: response.tx.data,
        to: CoreHelperUtil.getPlainAddress(response.tx.from),
        gasPrice: BigInt(response.tx.eip155.gasPrice),
        value: BigInt(response.tx.value),
        toAmount: state21.toTokenAmount
      };
      state21.swapTransaction = void 0;
      state21.approvalTransaction = {
        data: transaction.data,
        to: transaction.to,
        gasPrice: transaction.gasPrice,
        value: transaction.value,
        toAmount: transaction.toAmount
      };
      return {
        data: transaction.data,
        to: transaction.to,
        gasPrice: transaction.gasPrice,
        value: transaction.value,
        toAmount: transaction.toAmount
      };
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to create approval transaction");
      state21.approvalTransaction = void 0;
      state21.swapTransaction = void 0;
      state21.fetchError = true;
      return void 0;
    }
  },
  async createSwapTransaction() {
    var _a2;
    const { networkAddress, fromCaipAddress, sourceTokenAmount } = SwapController.getParams();
    const sourceToken = state21.sourceToken;
    const toToken = state21.toToken;
    if (!fromCaipAddress || !sourceTokenAmount || !sourceToken || !toToken) {
      return void 0;
    }
    const amount = (_a2 = ConnectionController.parseUnits(sourceTokenAmount, sourceToken.decimals)) == null ? void 0 : _a2.toString();
    try {
      const response = await BlockchainApiController.generateSwapCalldata({
        userAddress: fromCaipAddress,
        from: sourceToken.address,
        to: toToken.address,
        amount,
        disableEstimate: true
      });
      const isSourceTokenIsNetworkToken = sourceToken.address === networkAddress;
      const gas = BigInt(response.tx.eip155.gas);
      const gasPrice = BigInt(response.tx.eip155.gasPrice);
      const transaction = {
        data: response.tx.data,
        to: CoreHelperUtil.getPlainAddress(response.tx.to),
        gas,
        gasPrice,
        value: isSourceTokenIsNetworkToken ? BigInt(amount ?? "0") : BigInt("0"),
        toAmount: state21.toTokenAmount
      };
      state21.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state21.networkPrice, gas, gasPrice);
      state21.approvalTransaction = void 0;
      state21.swapTransaction = transaction;
      return transaction;
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to create transaction");
      state21.approvalTransaction = void 0;
      state21.swapTransaction = void 0;
      state21.fetchError = true;
      return void 0;
    }
  },
  // -- Send Transactions --------------------------------- //
  async sendTransactionForApproval(data) {
    var _a2, _b, _c2;
    const { fromAddress, isAuthConnector } = SwapController.getParams();
    state21.loadingApprovalTransaction = true;
    const approveLimitMessage = `Approve limit increase in your wallet`;
    if (isAuthConnector) {
      RouterController.pushTransactionStack({
        onSuccess() {
          SnackController.showLoading(approveLimitMessage);
        }
      });
    } else {
      SnackController.showLoading(approveLimitMessage);
    }
    try {
      await ConnectionController.sendTransaction({
        address: fromAddress,
        to: data.to,
        data: data.data,
        value: data.value,
        chainNamespace: "eip155"
      });
      await SwapController.swapTokens();
      await SwapController.getTransaction();
      state21.approvalTransaction = void 0;
      state21.loadingApprovalTransaction = false;
    } catch (err) {
      const error = err;
      state21.transactionError = error == null ? void 0 : error.shortMessage;
      state21.loadingApprovalTransaction = false;
      SnackController.showError((error == null ? void 0 : error.shortMessage) || "Transaction error");
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_APPROVAL_ERROR",
        properties: {
          message: (error == null ? void 0 : error.shortMessage) || (error == null ? void 0 : error.message) || "Unknown",
          network: ((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId) || "",
          swapFromToken: ((_b = SwapController.state.sourceToken) == null ? void 0 : _b.symbol) || "",
          swapToToken: ((_c2 = SwapController.state.toToken) == null ? void 0 : _c2.symbol) || "",
          swapFromAmount: SwapController.state.sourceTokenAmount || "",
          swapToAmount: SwapController.state.toTokenAmount || "",
          isSmartAccount: getPreferredAccountType("eip155") === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
    }
  },
  async sendTransactionForSwap(data) {
    var _a2, _b, _c2, _d, _e6, _f2, _g, _h, _i3, _j, _k, _l;
    if (!data) {
      return void 0;
    }
    const { fromAddress, toTokenAmount, isAuthConnector } = SwapController.getParams();
    state21.loadingTransaction = true;
    const snackbarPendingMessage = `Swapping ${(_a2 = state21.sourceToken) == null ? void 0 : _a2.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${(_b = state21.toToken) == null ? void 0 : _b.symbol}`;
    const snackbarSuccessMessage = `Swapped ${(_c2 = state21.sourceToken) == null ? void 0 : _c2.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${(_d = state21.toToken) == null ? void 0 : _d.symbol}`;
    if (isAuthConnector) {
      RouterController.pushTransactionStack({
        onSuccess() {
          RouterController.replace("Account");
          SnackController.showLoading(snackbarPendingMessage);
          controller14.resetState();
        }
      });
    } else {
      SnackController.showLoading("Confirm transaction in your wallet");
    }
    try {
      const forceUpdateAddresses = [(_e6 = state21.sourceToken) == null ? void 0 : _e6.address, (_f2 = state21.toToken) == null ? void 0 : _f2.address].join(",");
      const transactionHash = await ConnectionController.sendTransaction({
        address: fromAddress,
        to: data.to,
        data: data.data,
        value: data.value,
        chainNamespace: "eip155"
      });
      state21.loadingTransaction = false;
      SnackController.showSuccess(snackbarSuccessMessage);
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_SUCCESS",
        properties: {
          network: ((_g = ChainController.state.activeCaipNetwork) == null ? void 0 : _g.caipNetworkId) || "",
          swapFromToken: ((_h = SwapController.state.sourceToken) == null ? void 0 : _h.symbol) || "",
          swapToToken: ((_i3 = SwapController.state.toToken) == null ? void 0 : _i3.symbol) || "",
          swapFromAmount: SwapController.state.sourceTokenAmount || "",
          swapToAmount: SwapController.state.toTokenAmount || "",
          isSmartAccount: getPreferredAccountType("eip155") === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      controller14.resetState();
      if (!isAuthConnector) {
        RouterController.replace("Account");
      }
      controller14.getMyTokensWithBalance(forceUpdateAddresses);
      return transactionHash;
    } catch (err) {
      const error = err;
      state21.transactionError = error == null ? void 0 : error.shortMessage;
      state21.loadingTransaction = false;
      SnackController.showError((error == null ? void 0 : error.shortMessage) || "Transaction error");
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_ERROR",
        properties: {
          message: (error == null ? void 0 : error.shortMessage) || (error == null ? void 0 : error.message) || "Unknown",
          network: ((_j = ChainController.state.activeCaipNetwork) == null ? void 0 : _j.caipNetworkId) || "",
          swapFromToken: ((_k = SwapController.state.sourceToken) == null ? void 0 : _k.symbol) || "",
          swapToToken: ((_l = SwapController.state.toToken) == null ? void 0 : _l.symbol) || "",
          swapFromAmount: SwapController.state.sourceTokenAmount || "",
          swapToAmount: SwapController.state.toTokenAmount || "",
          isSmartAccount: getPreferredAccountType("eip155") === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      return void 0;
    }
  },
  // -- Checks -------------------------------------------- //
  hasInsufficientToken(sourceTokenAmount, sourceTokenAddress) {
    const isInsufficientSourceTokenForSwap = SwapCalculationUtil.isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, state21.myTokensWithBalance);
    return isInsufficientSourceTokenForSwap;
  },
  // -- Calculations -------------------------------------- //
  setTransactionDetails() {
    const { toTokenAddress, toTokenDecimals } = SwapController.getParams();
    if (!toTokenAddress || !toTokenDecimals) {
      return;
    }
    state21.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state21.networkPrice, BigInt(state21.gasFee), BigInt(INITIAL_GAS_LIMIT));
    state21.priceImpact = SwapCalculationUtil.getPriceImpact({
      sourceTokenAmount: state21.sourceTokenAmount,
      sourceTokenPriceInUSD: state21.sourceTokenPriceInUSD,
      toTokenPriceInUSD: state21.toTokenPriceInUSD,
      toTokenAmount: state21.toTokenAmount
    });
    state21.maxSlippage = SwapCalculationUtil.getMaxSlippage(state21.slippage, state21.toTokenAmount);
    state21.providerFee = SwapCalculationUtil.getProviderFee(state21.sourceTokenAmount);
  }
};
var SwapController = withErrorBoundary(controller14);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/TooltipController.js
var state22 = proxy({
  message: "",
  open: false,
  triggerRect: {
    width: 0,
    height: 0,
    top: 0,
    left: 0
  },
  variant: "shade"
});
var controller15 = {
  state: state22,
  subscribe(callback) {
    return subscribe(state22, () => callback(state22));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state22, key, callback);
  },
  showTooltip({ message, triggerRect, variant }) {
    state22.open = true;
    state22.message = message;
    state22.triggerRect = triggerRect;
    state22.variant = variant;
  },
  hide() {
    state22.open = false;
    state22.message = "";
    state22.triggerRect = {
      width: 0,
      height: 0,
      top: 0,
      left: 0
    };
  }
};
var TooltipController = withErrorBoundary(controller15);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/EnsUtil.js
var SLIP44_MSB = 2147483648;
var EnsUtil = {
  convertEVMChainIdToCoinType(chainId) {
    if (chainId >= SLIP44_MSB) {
      throw new Error("Invalid chainId");
    }
    return (SLIP44_MSB | chainId) >>> 0;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EnsController.js
var state23 = proxy({
  suggestions: [],
  loading: false
});
var controller16 = {
  state: state23,
  subscribe(callback) {
    return subscribe(state23, () => callback(state23));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state23, key, callback);
  },
  async resolveName(name2) {
    var _a2, _b;
    try {
      return await BlockchainApiController.lookupEnsName(name2);
    } catch (e3) {
      const error = e3;
      throw new Error(((_b = (_a2 = error == null ? void 0 : error.reasons) == null ? void 0 : _a2[0]) == null ? void 0 : _b.description) || "Error resolving name");
    }
  },
  async isNameRegistered(name2) {
    try {
      await BlockchainApiController.lookupEnsName(name2);
      return true;
    } catch {
      return false;
    }
  },
  async getSuggestions(value) {
    try {
      state23.loading = true;
      state23.suggestions = [];
      const response = await BlockchainApiController.getEnsNameSuggestions(value);
      state23.suggestions = response.suggestions.map((suggestion) => ({
        ...suggestion,
        name: suggestion.name
      })) || [];
      return state23.suggestions;
    } catch (e3) {
      const errorMessage = EnsController.parseEnsApiError(e3, "Error fetching name suggestions");
      throw new Error(errorMessage);
    } finally {
      state23.loading = false;
    }
  },
  async getNamesForAddress(address) {
    try {
      const network = ChainController.state.activeCaipNetwork;
      if (!network) {
        return [];
      }
      const cachedEns = StorageUtil.getEnsFromCacheForAddress(address);
      if (cachedEns) {
        return cachedEns;
      }
      const response = await BlockchainApiController.reverseLookupEnsName({ address });
      StorageUtil.updateEnsCache({
        address,
        ens: response,
        timestamp: Date.now()
      });
      return response;
    } catch (e3) {
      const errorMessage = EnsController.parseEnsApiError(e3, "Error fetching names for address");
      throw new Error(errorMessage);
    }
  },
  async registerName(name2) {
    const network = ChainController.state.activeCaipNetwork;
    if (!network) {
      throw new Error("Network not found");
    }
    const address = AccountController.state.address;
    const emailConnector = ConnectorController.getAuthConnector();
    if (!address || !emailConnector) {
      throw new Error("Address or auth connector not found");
    }
    state23.loading = true;
    try {
      const message = JSON.stringify({
        name: name2,
        attributes: {},
        // Unix timestamp
        timestamp: Math.floor(Date.now() / 1e3)
      });
      RouterController.pushTransactionStack({
        onCancel() {
          RouterController.replace("RegisterAccountName");
        }
      });
      const signature = await ConnectionController.signMessage(message);
      state23.loading = false;
      const networkId = network.id;
      if (!networkId) {
        throw new Error("Network not found");
      }
      const coinType = EnsUtil.convertEVMChainIdToCoinType(Number(networkId));
      await BlockchainApiController.registerEnsName({
        coinType,
        address,
        signature,
        message
      });
      AccountController.setProfileName(name2, network.chainNamespace);
      RouterController.replace("RegisterAccountNameSuccess");
    } catch (e3) {
      const errorMessage = EnsController.parseEnsApiError(e3, `Error registering name ${name2}`);
      RouterController.replace("RegisterAccountName");
      throw new Error(errorMessage);
    } finally {
      state23.loading = false;
    }
  },
  validateName(name2) {
    return /^[a-zA-Z0-9-]{4,}$/u.test(name2);
  },
  parseEnsApiError(error, defaultError) {
    var _a2, _b;
    const ensError = error;
    return ((_b = (_a2 = ensError == null ? void 0 : ensError.reasons) == null ? void 0 : _a2[0]) == null ? void 0 : _b.description) || defaultError;
  }
};
var EnsController = withErrorBoundary(controller16);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsStateController.js
var state24 = proxy({
  isLegalCheckboxChecked: false
});
var OptionsStateController = {
  state: state24,
  subscribe(callback) {
    return subscribe(state24, () => callback(state24));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state24, key, callback);
  },
  setIsLegalCheckboxChecked(isLegalCheckboxChecked) {
    state24.isLegalCheckboxChecked = isLegalCheckboxChecked;
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_events7 = __toESM(require_events());

// node_modules/@walletconnect/heartbeat/dist/index.es.js
var import_events = __toESM(require_events());
var import_time = __toESM(require_cjs());

// node_modules/@walletconnect/events/dist/esm/events.js
var IEvents = class {
};

// node_modules/@walletconnect/heartbeat/dist/index.es.js
var n2 = class extends IEvents {
  constructor(e3) {
    super();
  }
};
var s2 = import_time.FIVE_SECONDS;
var r2 = { pulse: "heartbeat_pulse" };
var i3 = class _i3 extends n2 {
  constructor(e3) {
    super(e3), this.events = new import_events.EventEmitter(), this.interval = s2, this.interval = (e3 == null ? void 0 : e3.interval) || s2;
  }
  static async init(e3) {
    const t2 = new _i3(e3);
    return await t2.init(), t2;
  }
  async init() {
    await this.initialize();
  }
  stop() {
    clearInterval(this.intervalRef);
  }
  on(e3, t2) {
    this.events.on(e3, t2);
  }
  once(e3, t2) {
    this.events.once(e3, t2);
  }
  off(e3, t2) {
    this.events.off(e3, t2);
  }
  removeListener(e3, t2) {
    this.events.removeListener(e3, t2);
  }
  async initialize() {
    this.intervalRef = setInterval(() => this.pulse(), (0, import_time.toMiliseconds)(this.interval));
  }
  pulse() {
    this.events.emit(r2.pulse);
  }
};

// node_modules/destr/dist/index.mjs
var suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/;
var suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
var JsonSigRx = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
function jsonParseTransform(key, value) {
  if (key === "__proto__" || key === "constructor" && value && typeof value === "object" && "prototype" in value) {
    warnKeyDropped(key);
    return;
  }
  return value;
}
function warnKeyDropped(key) {
  console.warn(`[destr] Dropping "${key}" key to prevent prototype pollution.`);
}
function destr(value, options = {}) {
  if (typeof value !== "string") {
    return value;
  }
  if (value[0] === '"' && value[value.length - 1] === '"' && value.indexOf("\\") === -1) {
    return value.slice(1, -1);
  }
  const _value = value.trim();
  if (_value.length <= 9) {
    switch (_value.toLowerCase()) {
      case "true": {
        return true;
      }
      case "false": {
        return false;
      }
      case "undefined": {
        return void 0;
      }
      case "null": {
        return null;
      }
      case "nan": {
        return Number.NaN;
      }
      case "infinity": {
        return Number.POSITIVE_INFINITY;
      }
      case "-infinity": {
        return Number.NEGATIVE_INFINITY;
      }
    }
  }
  if (!JsonSigRx.test(value)) {
    if (options.strict) {
      throw new SyntaxError("[destr] Invalid JSON");
    }
    return value;
  }
  try {
    if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {
      if (options.strict) {
        throw new Error("[destr] Possible prototype pollution");
      }
      return JSON.parse(value, jsonParseTransform);
    }
    return JSON.parse(value);
  } catch (error) {
    if (options.strict) {
      throw error;
    }
    return value;
  }
}

// node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.CoCt7NXC.mjs
function wrapToPromise(value) {
  if (!value || typeof value.then !== "function") {
    return Promise.resolve(value);
  }
  return value;
}
function asyncCall(function_, ...arguments_) {
  try {
    return wrapToPromise(function_(...arguments_));
  } catch (error) {
    return Promise.reject(error);
  }
}
function isPrimitive(value) {
  const type = typeof value;
  return value === null || type !== "object" && type !== "function";
}
function isPureObject(value) {
  const proto = Object.getPrototypeOf(value);
  return !proto || proto.isPrototypeOf(Object);
}
function stringify2(value) {
  if (isPrimitive(value)) {
    return String(value);
  }
  if (isPureObject(value) || Array.isArray(value)) {
    return JSON.stringify(value);
  }
  if (typeof value.toJSON === "function") {
    return stringify2(value.toJSON());
  }
  throw new Error("[unstorage] Cannot stringify value!");
}
var BASE64_PREFIX = "base64:";
function serializeRaw(value) {
  if (typeof value === "string") {
    return value;
  }
  return BASE64_PREFIX + base64Encode(value);
}
function deserializeRaw(value) {
  if (typeof value !== "string") {
    return value;
  }
  if (!value.startsWith(BASE64_PREFIX)) {
    return value;
  }
  return base64Decode(value.slice(BASE64_PREFIX.length));
}
function base64Decode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input, "base64");
  }
  return Uint8Array.from(
    globalThis.atob(input),
    (c8) => c8.codePointAt(0)
  );
}
function base64Encode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input).toString("base64");
  }
  return globalThis.btoa(String.fromCodePoint(...input));
}
function normalizeKey(key) {
  var _a2;
  if (!key) {
    return "";
  }
  return ((_a2 = key.split("?")[0]) == null ? void 0 : _a2.replace(/[/\\]/g, ":").replace(/:+/g, ":").replace(/^:|:$/g, "")) || "";
}
function joinKeys(...keys2) {
  return normalizeKey(keys2.join(":"));
}
function normalizeBaseKey(base3) {
  base3 = normalizeKey(base3);
  return base3 ? base3 + ":" : "";
}
function filterKeyByDepth(key, depth) {
  if (depth === void 0) {
    return true;
  }
  let substrCount = 0;
  let index = key.indexOf(":");
  while (index > -1) {
    substrCount++;
    index = key.indexOf(":", index + 1);
  }
  return substrCount <= depth;
}
function filterKeyByBase(key, base3) {
  if (base3) {
    return key.startsWith(base3) && key[key.length - 1] !== "$";
  }
  return key[key.length - 1] !== "$";
}

// node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs
function defineDriver(factory) {
  return factory;
}
var DRIVER_NAME = "memory";
var memory = defineDriver(() => {
  const data = /* @__PURE__ */ new Map();
  return {
    name: DRIVER_NAME,
    getInstance: () => data,
    hasItem(key) {
      return data.has(key);
    },
    getItem(key) {
      return data.get(key) ?? null;
    },
    getItemRaw(key) {
      return data.get(key) ?? null;
    },
    setItem(key, value) {
      data.set(key, value);
    },
    setItemRaw(key, value) {
      data.set(key, value);
    },
    removeItem(key) {
      data.delete(key);
    },
    getKeys() {
      return [...data.keys()];
    },
    clear() {
      data.clear();
    },
    dispose() {
      data.clear();
    }
  };
});
function createStorage(options = {}) {
  const context = {
    mounts: { "": options.driver || memory() },
    mountpoints: [""],
    watching: false,
    watchListeners: [],
    unwatch: {}
  };
  const getMount = (key) => {
    for (const base3 of context.mountpoints) {
      if (key.startsWith(base3)) {
        return {
          base: base3,
          relativeKey: key.slice(base3.length),
          driver: context.mounts[base3]
        };
      }
    }
    return {
      base: "",
      relativeKey: key,
      driver: context.mounts[""]
    };
  };
  const getMounts = (base3, includeParent) => {
    return context.mountpoints.filter(
      (mountpoint) => mountpoint.startsWith(base3) || includeParent && base3.startsWith(mountpoint)
    ).map((mountpoint) => ({
      relativeBase: base3.length > mountpoint.length ? base3.slice(mountpoint.length) : void 0,
      mountpoint,
      driver: context.mounts[mountpoint]
    }));
  };
  const onChange = (event, key) => {
    if (!context.watching) {
      return;
    }
    key = normalizeKey(key);
    for (const listener of context.watchListeners) {
      listener(event, key);
    }
  };
  const startWatch = async () => {
    if (context.watching) {
      return;
    }
    context.watching = true;
    for (const mountpoint in context.mounts) {
      context.unwatch[mountpoint] = await watch(
        context.mounts[mountpoint],
        onChange,
        mountpoint
      );
    }
  };
  const stopWatch = async () => {
    if (!context.watching) {
      return;
    }
    for (const mountpoint in context.unwatch) {
      await context.unwatch[mountpoint]();
    }
    context.unwatch = {};
    context.watching = false;
  };
  const runBatch = (items, commonOptions, cb) => {
    const batches = /* @__PURE__ */ new Map();
    const getBatch = (mount) => {
      let batch = batches.get(mount.base);
      if (!batch) {
        batch = {
          driver: mount.driver,
          base: mount.base,
          items: []
        };
        batches.set(mount.base, batch);
      }
      return batch;
    };
    for (const item of items) {
      const isStringItem = typeof item === "string";
      const key = normalizeKey(isStringItem ? item : item.key);
      const value = isStringItem ? void 0 : item.value;
      const options2 = isStringItem || !item.options ? commonOptions : { ...commonOptions, ...item.options };
      const mount = getMount(key);
      getBatch(mount).items.push({
        key,
        value,
        relativeKey: mount.relativeKey,
        options: options2
      });
    }
    return Promise.all([...batches.values()].map((batch) => cb(batch))).then(
      (r4) => r4.flat()
    );
  };
  const storage = {
    // Item
    hasItem(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      return asyncCall(driver.hasItem, relativeKey, opts);
    },
    getItem(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => destr(value)
      );
    },
    getItems(items, commonOptions = {}) {
      return runBatch(items, commonOptions, (batch) => {
        if (batch.driver.getItems) {
          return asyncCall(
            batch.driver.getItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              options: item.options
            })),
            commonOptions
          ).then(
            (r4) => r4.map((item) => ({
              key: joinKeys(batch.base, item.key),
              value: destr(item.value)
            }))
          );
        }
        return Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.getItem,
              item.relativeKey,
              item.options
            ).then((value) => ({
              key: item.key,
              value: destr(value)
            }));
          })
        );
      });
    },
    getItemRaw(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (driver.getItemRaw) {
        return asyncCall(driver.getItemRaw, relativeKey, opts);
      }
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => deserializeRaw(value)
      );
    },
    async setItem(key, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key);
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (!driver.setItem) {
        return;
      }
      await asyncCall(driver.setItem, relativeKey, stringify2(value), opts);
      if (!driver.watch) {
        onChange("update", key);
      }
    },
    async setItems(items, commonOptions) {
      await runBatch(items, commonOptions, async (batch) => {
        if (batch.driver.setItems) {
          return asyncCall(
            batch.driver.setItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              value: stringify2(item.value),
              options: item.options
            })),
            commonOptions
          );
        }
        if (!batch.driver.setItem) {
          return;
        }
        await Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.setItem,
              item.relativeKey,
              stringify2(item.value),
              item.options
            );
          })
        );
      });
    },
    async setItemRaw(key, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key, opts);
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (driver.setItemRaw) {
        await asyncCall(driver.setItemRaw, relativeKey, value, opts);
      } else if (driver.setItem) {
        await asyncCall(driver.setItem, relativeKey, serializeRaw(value), opts);
      } else {
        return;
      }
      if (!driver.watch) {
        onChange("update", key);
      }
    },
    async removeItem(key, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { removeMeta: opts };
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (!driver.removeItem) {
        return;
      }
      await asyncCall(driver.removeItem, relativeKey, opts);
      if (opts.removeMeta || opts.removeMata) {
        await asyncCall(driver.removeItem, relativeKey + "$", opts);
      }
      if (!driver.watch) {
        onChange("remove", key);
      }
    },
    // Meta
    async getMeta(key, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { nativeOnly: opts };
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      const meta = /* @__PURE__ */ Object.create(null);
      if (driver.getMeta) {
        Object.assign(meta, await asyncCall(driver.getMeta, relativeKey, opts));
      }
      if (!opts.nativeOnly) {
        const value = await asyncCall(
          driver.getItem,
          relativeKey + "$",
          opts
        ).then((value_) => destr(value_));
        if (value && typeof value === "object") {
          if (typeof value.atime === "string") {
            value.atime = new Date(value.atime);
          }
          if (typeof value.mtime === "string") {
            value.mtime = new Date(value.mtime);
          }
          Object.assign(meta, value);
        }
      }
      return meta;
    },
    setMeta(key, value, opts = {}) {
      return this.setItem(key + "$", value, opts);
    },
    removeMeta(key, opts = {}) {
      return this.removeItem(key + "$", opts);
    },
    // Keys
    async getKeys(base3, opts = {}) {
      var _a2;
      base3 = normalizeBaseKey(base3);
      const mounts = getMounts(base3, true);
      let maskedMounts = [];
      const allKeys = [];
      let allMountsSupportMaxDepth = true;
      for (const mount of mounts) {
        if (!((_a2 = mount.driver.flags) == null ? void 0 : _a2.maxDepth)) {
          allMountsSupportMaxDepth = false;
        }
        const rawKeys = await asyncCall(
          mount.driver.getKeys,
          mount.relativeBase,
          opts
        );
        for (const key of rawKeys) {
          const fullKey = mount.mountpoint + normalizeKey(key);
          if (!maskedMounts.some((p6) => fullKey.startsWith(p6))) {
            allKeys.push(fullKey);
          }
        }
        maskedMounts = [
          mount.mountpoint,
          ...maskedMounts.filter((p6) => !p6.startsWith(mount.mountpoint))
        ];
      }
      const shouldFilterByDepth = opts.maxDepth !== void 0 && !allMountsSupportMaxDepth;
      return allKeys.filter(
        (key) => (!shouldFilterByDepth || filterKeyByDepth(key, opts.maxDepth)) && filterKeyByBase(key, base3)
      );
    },
    // Utils
    async clear(base3, opts = {}) {
      base3 = normalizeBaseKey(base3);
      await Promise.all(
        getMounts(base3, false).map(async (m4) => {
          if (m4.driver.clear) {
            return asyncCall(m4.driver.clear, m4.relativeBase, opts);
          }
          if (m4.driver.removeItem) {
            const keys2 = await m4.driver.getKeys(m4.relativeBase || "", opts);
            return Promise.all(
              keys2.map((key) => m4.driver.removeItem(key, opts))
            );
          }
        })
      );
    },
    async dispose() {
      await Promise.all(
        Object.values(context.mounts).map((driver) => dispose(driver))
      );
    },
    async watch(callback) {
      await startWatch();
      context.watchListeners.push(callback);
      return async () => {
        context.watchListeners = context.watchListeners.filter(
          (listener) => listener !== callback
        );
        if (context.watchListeners.length === 0) {
          await stopWatch();
        }
      };
    },
    async unwatch() {
      context.watchListeners = [];
      await stopWatch();
    },
    // Mount
    mount(base3, driver) {
      base3 = normalizeBaseKey(base3);
      if (base3 && context.mounts[base3]) {
        throw new Error(`already mounted at ${base3}`);
      }
      if (base3) {
        context.mountpoints.push(base3);
        context.mountpoints.sort((a4, b6) => b6.length - a4.length);
      }
      context.mounts[base3] = driver;
      if (context.watching) {
        Promise.resolve(watch(driver, onChange, base3)).then((unwatcher) => {
          context.unwatch[base3] = unwatcher;
        }).catch(console.error);
      }
      return storage;
    },
    async unmount(base3, _dispose = true) {
      var _a2, _b;
      base3 = normalizeBaseKey(base3);
      if (!base3 || !context.mounts[base3]) {
        return;
      }
      if (context.watching && base3 in context.unwatch) {
        (_b = (_a2 = context.unwatch)[base3]) == null ? void 0 : _b.call(_a2);
        delete context.unwatch[base3];
      }
      if (_dispose) {
        await dispose(context.mounts[base3]);
      }
      context.mountpoints = context.mountpoints.filter((key) => key !== base3);
      delete context.mounts[base3];
    },
    getMount(key = "") {
      key = normalizeKey(key) + ":";
      const m4 = getMount(key);
      return {
        driver: m4.driver,
        base: m4.base
      };
    },
    getMounts(base3 = "", opts = {}) {
      base3 = normalizeKey(base3);
      const mounts = getMounts(base3, opts.parents);
      return mounts.map((m4) => ({
        driver: m4.driver,
        base: m4.mountpoint
      }));
    },
    // Aliases
    keys: (base3, opts = {}) => storage.getKeys(base3, opts),
    get: (key, opts = {}) => storage.getItem(key, opts),
    set: (key, value, opts = {}) => storage.setItem(key, value, opts),
    has: (key, opts = {}) => storage.hasItem(key, opts),
    del: (key, opts = {}) => storage.removeItem(key, opts),
    remove: (key, opts = {}) => storage.removeItem(key, opts)
  };
  return storage;
}
function watch(driver, onChange, base3) {
  return driver.watch ? driver.watch((event, key) => onChange(event, base3 + key)) : () => {
  };
}
async function dispose(driver) {
  if (typeof driver.dispose === "function") {
    await asyncCall(driver.dispose);
  }
}

// node_modules/idb-keyval/dist/index.js
function promisifyRequest(request) {
  return new Promise((resolve, reject) => {
    request.oncomplete = request.onsuccess = () => resolve(request.result);
    request.onabort = request.onerror = () => reject(request.error);
  });
}
function createStore(dbName, storeName) {
  let dbp;
  const getDB = () => {
    if (dbp)
      return dbp;
    const request = indexedDB.open(dbName);
    request.onupgradeneeded = () => request.result.createObjectStore(storeName);
    dbp = promisifyRequest(request);
    dbp.then((db) => {
      db.onclose = () => dbp = void 0;
    }, () => {
    });
    return dbp;
  };
  return (txMode, callback) => getDB().then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
}
var defaultGetStoreFunc;
function defaultGetStore() {
  if (!defaultGetStoreFunc) {
    defaultGetStoreFunc = createStore("keyval-store", "keyval");
  }
  return defaultGetStoreFunc;
}
function get(key, customStore = defaultGetStore()) {
  return customStore("readonly", (store) => promisifyRequest(store.get(key)));
}
function set(key, value, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.put(value, key);
    return promisifyRequest(store.transaction);
  });
}
function del(key, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.delete(key);
    return promisifyRequest(store.transaction);
  });
}
function clear(customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.clear();
    return promisifyRequest(store.transaction);
  });
}
function eachCursor(store, callback) {
  store.openCursor().onsuccess = function() {
    if (!this.result)
      return;
    callback(this.result);
    this.result.continue();
  };
  return promisifyRequest(store.transaction);
}
function keys(customStore = defaultGetStore()) {
  return customStore("readonly", (store) => {
    if (store.getAllKeys) {
      return promisifyRequest(store.getAllKeys());
    }
    const items = [];
    return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);
  });
}

// node_modules/@walletconnect/safe-json/dist/esm/index.js
var JSONStringify = (data) => JSON.stringify(data, (_3, value) => typeof value === "bigint" ? value.toString() + "n" : value);
var JSONParse = (json) => {
  const numbersBiggerThanMaxInt = /([\[:])?(\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\}\]])/g;
  const serializedData = json.replace(numbersBiggerThanMaxInt, '$1"$2n"$3');
  return JSON.parse(serializedData, (_3, value) => {
    const isCustomFormatBigInt = typeof value === "string" && value.match(/^\d+n$/);
    if (isCustomFormatBigInt)
      return BigInt(value.substring(0, value.length - 1));
    return value;
  });
};
function safeJsonParse(value) {
  if (typeof value !== "string") {
    throw new Error(`Cannot safe json parse value of type ${typeof value}`);
  }
  try {
    return JSONParse(value);
  } catch (_a2) {
    return value;
  }
}
function safeJsonStringify(value) {
  return typeof value === "string" ? value : JSONStringify(value) || "";
}

// node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js
var x = "idb-keyval";
var z = (i6 = {}) => {
  const t2 = i6.base && i6.base.length > 0 ? `${i6.base}:` : "", e3 = (s4) => t2 + s4;
  let n6;
  return i6.dbName && i6.storeName && (n6 = createStore(i6.dbName, i6.storeName)), { name: x, options: i6, async hasItem(s4) {
    return !(typeof await get(e3(s4), n6) > "u");
  }, async getItem(s4) {
    return await get(e3(s4), n6) ?? null;
  }, setItem(s4, a4) {
    return set(e3(s4), a4, n6);
  }, removeItem(s4) {
    return del(e3(s4), n6);
  }, getKeys() {
    return keys(n6);
  }, clear() {
    return clear(n6);
  } };
};
var D = "WALLET_CONNECT_V2_INDEXED_DB";
var E = "keyvaluestorage";
var _ = class {
  constructor() {
    this.indexedDb = createStorage({ driver: z({ dbName: D, storeName: E }) });
  }
  async getKeys() {
    return this.indexedDb.getKeys();
  }
  async getEntries() {
    return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t2) => [t2.key, t2.value]);
  }
  async getItem(t2) {
    const e3 = await this.indexedDb.getItem(t2);
    if (e3 !== null) return e3;
  }
  async setItem(t2, e3) {
    await this.indexedDb.setItem(t2, safeJsonStringify(e3));
  }
  async removeItem(t2) {
    await this.indexedDb.removeItem(t2);
  }
};
var l3 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
var c2 = { exports: {} };
(function() {
  let i6;
  function t2() {
  }
  i6 = t2, i6.prototype.getItem = function(e3) {
    return this.hasOwnProperty(e3) ? String(this[e3]) : null;
  }, i6.prototype.setItem = function(e3, n6) {
    this[e3] = String(n6);
  }, i6.prototype.removeItem = function(e3) {
    delete this[e3];
  }, i6.prototype.clear = function() {
    const e3 = this;
    Object.keys(e3).forEach(function(n6) {
      e3[n6] = void 0, delete e3[n6];
    });
  }, i6.prototype.key = function(e3) {
    return e3 = e3 || 0, Object.keys(this)[e3];
  }, i6.prototype.__defineGetter__("length", function() {
    return Object.keys(this).length;
  }), typeof l3 < "u" && l3.localStorage ? c2.exports = l3.localStorage : typeof window < "u" && window.localStorage ? c2.exports = window.localStorage : c2.exports = new t2();
})();
function k(i6) {
  var t2;
  return [i6[0], safeJsonParse((t2 = i6[1]) != null ? t2 : "")];
}
var K = class {
  constructor() {
    this.localStorage = c2.exports;
  }
  async getKeys() {
    return Object.keys(this.localStorage);
  }
  async getEntries() {
    return Object.entries(this.localStorage).map(k);
  }
  async getItem(t2) {
    const e3 = this.localStorage.getItem(t2);
    if (e3 !== null) return safeJsonParse(e3);
  }
  async setItem(t2, e3) {
    this.localStorage.setItem(t2, safeJsonStringify(e3));
  }
  async removeItem(t2) {
    this.localStorage.removeItem(t2);
  }
};
var N = "wc_storage_version";
var y2 = 1;
var O = async (i6, t2, e3) => {
  const n6 = N, s4 = await t2.getItem(n6);
  if (s4 && s4 >= y2) {
    e3(t2);
    return;
  }
  const a4 = await i6.getKeys();
  if (!a4.length) {
    e3(t2);
    return;
  }
  const m4 = [];
  for (; a4.length; ) {
    const r4 = a4.shift();
    if (!r4) continue;
    const o6 = r4.toLowerCase();
    if (o6.includes("wc@") || o6.includes("walletconnect") || o6.includes("wc_") || o6.includes("wallet_connect")) {
      const f9 = await i6.getItem(r4);
      await t2.setItem(r4, f9), m4.push(r4);
    }
  }
  await t2.setItem(n6, y2), e3(t2), j(i6, m4);
};
var j = async (i6, t2) => {
  t2.length && t2.forEach(async (e3) => {
    await i6.removeItem(e3);
  });
};
var h2 = class {
  constructor() {
    this.initialized = false, this.setInitialized = (e3) => {
      this.storage = e3, this.initialized = true;
    };
    const t2 = new K();
    this.storage = t2;
    try {
      const e3 = new _();
      O(t2, e3, this.setInitialized);
    } catch {
      this.initialized = true;
    }
  }
  async getKeys() {
    return await this.initialize(), this.storage.getKeys();
  }
  async getEntries() {
    return await this.initialize(), this.storage.getEntries();
  }
  async getItem(t2) {
    return await this.initialize(), this.storage.getItem(t2);
  }
  async setItem(t2, e3) {
    return await this.initialize(), this.storage.setItem(t2, e3);
  }
  async removeItem(t2) {
    return await this.initialize(), this.storage.removeItem(t2);
  }
  async initialize() {
    this.initialized || await new Promise((t2) => {
      const e3 = setInterval(() => {
        this.initialized && (clearInterval(e3), t2());
      }, 20);
    });
  }
};

// node_modules/@walletconnect/logger/dist/index.es.js
var import_pino = __toESM(require_browser());
var import_pino2 = __toESM(require_browser());
var c3 = { level: "info" };
var n3 = "custom_context";
var l4 = 1e3 * 1024;
var O2 = class {
  constructor(e3) {
    this.nodeValue = e3, this.sizeInBytes = new TextEncoder().encode(this.nodeValue).length, this.next = null;
  }
  get value() {
    return this.nodeValue;
  }
  get size() {
    return this.sizeInBytes;
  }
};
var d = class {
  constructor(e3) {
    this.head = null, this.tail = null, this.lengthInNodes = 0, this.maxSizeInBytes = e3, this.sizeInBytes = 0;
  }
  append(e3) {
    const t2 = new O2(e3);
    if (t2.size > this.maxSizeInBytes) throw new Error(`[LinkedList] Value too big to insert into list: ${e3} with size ${t2.size}`);
    for (; this.size + t2.size > this.maxSizeInBytes; ) this.shift();
    this.head ? (this.tail && (this.tail.next = t2), this.tail = t2) : (this.head = t2, this.tail = t2), this.lengthInNodes++, this.sizeInBytes += t2.size;
  }
  shift() {
    if (!this.head) return;
    const e3 = this.head;
    this.head = this.head.next, this.head || (this.tail = null), this.lengthInNodes--, this.sizeInBytes -= e3.size;
  }
  toArray() {
    const e3 = [];
    let t2 = this.head;
    for (; t2 !== null; ) e3.push(t2.value), t2 = t2.next;
    return e3;
  }
  get length() {
    return this.lengthInNodes;
  }
  get size() {
    return this.sizeInBytes;
  }
  toOrderedArray() {
    return Array.from(this);
  }
  [Symbol.iterator]() {
    let e3 = this.head;
    return { next: () => {
      if (!e3) return { done: true, value: null };
      const t2 = e3.value;
      return e3 = e3.next, { done: false, value: t2 };
    } };
  }
};
var L = class {
  constructor(e3, t2 = l4) {
    this.level = e3 ?? "error", this.levelValue = import_pino.levels.values[this.level], this.MAX_LOG_SIZE_IN_BYTES = t2, this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);
  }
  forwardToConsole(e3, t2) {
    t2 === import_pino.levels.values.error ? console.error(e3) : t2 === import_pino.levels.values.warn ? console.warn(e3) : t2 === import_pino.levels.values.debug ? console.debug(e3) : t2 === import_pino.levels.values.trace ? console.trace(e3) : console.log(e3);
  }
  appendToLogs(e3) {
    this.logs.append(safeJsonStringify({ timestamp: (/* @__PURE__ */ new Date()).toISOString(), log: e3 }));
    const t2 = typeof e3 == "string" ? JSON.parse(e3).level : e3.level;
    t2 >= this.levelValue && this.forwardToConsole(e3, t2);
  }
  getLogs() {
    return this.logs;
  }
  clearLogs() {
    this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);
  }
  getLogArray() {
    return Array.from(this.logs);
  }
  logsToBlob(e3) {
    const t2 = this.getLogArray();
    return t2.push(safeJsonStringify({ extraMetadata: e3 })), new Blob(t2, { type: "application/json" });
  }
};
var m = class {
  constructor(e3, t2 = l4) {
    this.baseChunkLogger = new L(e3, t2);
  }
  write(e3) {
    this.baseChunkLogger.appendToLogs(e3);
  }
  getLogs() {
    return this.baseChunkLogger.getLogs();
  }
  clearLogs() {
    this.baseChunkLogger.clearLogs();
  }
  getLogArray() {
    return this.baseChunkLogger.getLogArray();
  }
  logsToBlob(e3) {
    return this.baseChunkLogger.logsToBlob(e3);
  }
  downloadLogsBlobInBrowser(e3) {
    const t2 = URL.createObjectURL(this.logsToBlob(e3)), o6 = document.createElement("a");
    o6.href = t2, o6.download = `walletconnect-logs-${(/* @__PURE__ */ new Date()).toISOString()}.txt`, document.body.appendChild(o6), o6.click(), document.body.removeChild(o6), URL.revokeObjectURL(t2);
  }
};
var B = class {
  constructor(e3, t2 = l4) {
    this.baseChunkLogger = new L(e3, t2);
  }
  write(e3) {
    this.baseChunkLogger.appendToLogs(e3);
  }
  getLogs() {
    return this.baseChunkLogger.getLogs();
  }
  clearLogs() {
    this.baseChunkLogger.clearLogs();
  }
  getLogArray() {
    return this.baseChunkLogger.getLogArray();
  }
  logsToBlob(e3) {
    return this.baseChunkLogger.logsToBlob(e3);
  }
};
var x2 = Object.defineProperty;
var S = Object.defineProperties;
var _2 = Object.getOwnPropertyDescriptors;
var p2 = Object.getOwnPropertySymbols;
var T = Object.prototype.hasOwnProperty;
var z2 = Object.prototype.propertyIsEnumerable;
var f3 = (r4, e3, t2) => e3 in r4 ? x2(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var i4 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {})) T.call(e3, t2) && f3(r4, t2, e3[t2]);
  if (p2) for (var t2 of p2(e3)) z2.call(e3, t2) && f3(r4, t2, e3[t2]);
  return r4;
};
var g = (r4, e3) => S(r4, _2(e3));
function k2(r4) {
  return g(i4({}, r4), { level: (r4 == null ? void 0 : r4.level) || c3.level });
}
function v(r4, e3 = n3) {
  return r4[e3] || "";
}
function b(r4, e3, t2 = n3) {
  return r4[t2] = e3, r4;
}
function y3(r4, e3 = n3) {
  let t2 = "";
  return typeof r4.bindings > "u" ? t2 = v(r4, e3) : t2 = r4.bindings().context || "", t2;
}
function w2(r4, e3, t2 = n3) {
  const o6 = y3(r4, t2);
  return o6.trim() ? `${o6}/${e3}` : e3;
}
function E2(r4, e3, t2 = n3) {
  const o6 = w2(r4, e3, t2), a4 = r4.child({ context: o6 });
  return b(a4, o6, t2);
}
function C(r4) {
  var e3, t2;
  const o6 = new m((e3 = r4.opts) == null ? void 0 : e3.level, r4.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g(i4({}, r4.opts), { level: "trace", browser: g(i4({}, (t2 = r4.opts) == null ? void 0 : t2.browser), { write: (a4) => o6.write(a4) }) })), chunkLoggerController: o6 };
}
function I(r4) {
  var e3;
  const t2 = new B((e3 = r4.opts) == null ? void 0 : e3.level, r4.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g(i4({}, r4.opts), { level: "trace" }), t2), chunkLoggerController: t2 };
}
function A(r4) {
  return typeof r4.loggerOverride < "u" && typeof r4.loggerOverride != "string" ? { logger: r4.loggerOverride, chunkLoggerController: null } : typeof window < "u" ? C(r4) : I(r4);
}

// node_modules/@walletconnect/types/dist/index.es.js
var import_events4 = __toESM(require_events());
var a3 = Object.defineProperty;
var u3 = (e3, s4, r4) => s4 in e3 ? a3(e3, s4, { enumerable: true, configurable: true, writable: true, value: r4 }) : e3[s4] = r4;
var c4 = (e3, s4, r4) => u3(e3, typeof s4 != "symbol" ? s4 + "" : s4, r4);
var h4 = class extends IEvents {
  constructor(s4) {
    super(), this.opts = s4, c4(this, "protocol", "wc"), c4(this, "version", 2);
  }
};
var p3 = Object.defineProperty;
var b2 = (e3, s4, r4) => s4 in e3 ? p3(e3, s4, { enumerable: true, configurable: true, writable: true, value: r4 }) : e3[s4] = r4;
var v2 = (e3, s4, r4) => b2(e3, typeof s4 != "symbol" ? s4 + "" : s4, r4);
var I2 = class extends IEvents {
  constructor(s4, r4) {
    super(), this.core = s4, this.logger = r4, v2(this, "records", /* @__PURE__ */ new Map());
  }
};
var y4 = class {
  constructor(s4, r4) {
    this.logger = s4, this.core = r4;
  }
};
var m2 = class extends IEvents {
  constructor(s4, r4) {
    super(), this.relayer = s4, this.logger = r4;
  }
};
var d2 = class extends IEvents {
  constructor(s4) {
    super();
  }
};
var f4 = class {
  constructor(s4, r4, t2, q2) {
    this.core = s4, this.logger = r4, this.name = t2;
  }
};
var P2 = class extends IEvents {
  constructor(s4, r4) {
    super(), this.relayer = s4, this.logger = r4;
  }
};
var S2 = class extends IEvents {
  constructor(s4, r4) {
    super(), this.core = s4, this.logger = r4;
  }
};
var M = class {
  constructor(s4, r4, t2) {
    this.core = s4, this.logger = r4, this.store = t2;
  }
};
var O3 = class {
  constructor(s4, r4) {
    this.projectId = s4, this.logger = r4;
  }
};
var R = class {
  constructor(s4, r4, t2) {
    this.core = s4, this.logger = r4, this.telemetryEnabled = t2;
  }
};
var T2 = Object.defineProperty;
var k3 = (e3, s4, r4) => s4 in e3 ? T2(e3, s4, { enumerable: true, configurable: true, writable: true, value: r4 }) : e3[s4] = r4;
var i5 = (e3, s4, r4) => k3(e3, typeof s4 != "symbol" ? s4 + "" : s4, r4);
var J = class {
  constructor(s4) {
    this.opts = s4, i5(this, "protocol", "wc"), i5(this, "version", 2);
  }
};
var V = class {
  constructor(s4) {
    this.client = s4;
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_time4 = __toESM(require_cjs());

// node_modules/@walletconnect/relay-auth/dist/index.es.js
var import_time2 = __toESM(require_cjs());
function En(t2) {
  return t2 instanceof Uint8Array || ArrayBuffer.isView(t2) && t2.constructor.name === "Uint8Array";
}
function fe(t2, ...e3) {
  if (!En(t2)) throw new Error("Uint8Array expected");
  if (e3.length > 0 && !e3.includes(t2.length)) throw new Error("Uint8Array expected of length " + e3 + ", got length=" + t2.length);
}
function De(t2, e3 = true) {
  if (t2.destroyed) throw new Error("Hash instance has been destroyed");
  if (e3 && t2.finished) throw new Error("Hash#digest() has already been called");
}
function gn(t2, e3) {
  fe(t2);
  const n6 = e3.outputLen;
  if (t2.length < n6) throw new Error("digestInto() expects output buffer of length at least " + n6);
}
var it = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
var _t = (t2) => new DataView(t2.buffer, t2.byteOffset, t2.byteLength);
function yn(t2) {
  if (typeof t2 != "string") throw new Error("utf8ToBytes expected string, got " + typeof t2);
  return new Uint8Array(new TextEncoder().encode(t2));
}
function de(t2) {
  return typeof t2 == "string" && (t2 = yn(t2)), fe(t2), t2;
}
var xn = class {
  clone() {
    return this._cloneInto();
  }
};
function Bn(t2) {
  const e3 = (r4) => t2().update(de(r4)).digest(), n6 = t2();
  return e3.outputLen = n6.outputLen, e3.blockLen = n6.blockLen, e3.create = () => t2(), e3;
}
function he(t2 = 32) {
  if (it && typeof it.getRandomValues == "function") return it.getRandomValues(new Uint8Array(t2));
  if (it && typeof it.randomBytes == "function") return it.randomBytes(t2);
  throw new Error("crypto.getRandomValues must be defined");
}
function Cn(t2, e3, n6, r4) {
  if (typeof t2.setBigUint64 == "function") return t2.setBigUint64(e3, n6, r4);
  const o6 = BigInt(32), s4 = BigInt(4294967295), a4 = Number(n6 >> o6 & s4), u5 = Number(n6 & s4), i6 = r4 ? 4 : 0, D3 = r4 ? 0 : 4;
  t2.setUint32(e3 + i6, a4, r4), t2.setUint32(e3 + D3, u5, r4);
}
var An = class extends xn {
  constructor(e3, n6, r4, o6) {
    super(), this.blockLen = e3, this.outputLen = n6, this.padOffset = r4, this.isLE = o6, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(e3), this.view = _t(this.buffer);
  }
  update(e3) {
    De(this);
    const { view: n6, buffer: r4, blockLen: o6 } = this;
    e3 = de(e3);
    const s4 = e3.length;
    for (let a4 = 0; a4 < s4; ) {
      const u5 = Math.min(o6 - this.pos, s4 - a4);
      if (u5 === o6) {
        const i6 = _t(e3);
        for (; o6 <= s4 - a4; a4 += o6) this.process(i6, a4);
        continue;
      }
      r4.set(e3.subarray(a4, a4 + u5), this.pos), this.pos += u5, a4 += u5, this.pos === o6 && (this.process(n6, 0), this.pos = 0);
    }
    return this.length += e3.length, this.roundClean(), this;
  }
  digestInto(e3) {
    De(this), gn(e3, this), this.finished = true;
    const { buffer: n6, view: r4, blockLen: o6, isLE: s4 } = this;
    let { pos: a4 } = this;
    n6[a4++] = 128, this.buffer.subarray(a4).fill(0), this.padOffset > o6 - a4 && (this.process(r4, 0), a4 = 0);
    for (let l9 = a4; l9 < o6; l9++) n6[l9] = 0;
    Cn(r4, o6 - 8, BigInt(this.length * 8), s4), this.process(r4, 0);
    const u5 = _t(e3), i6 = this.outputLen;
    if (i6 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const D3 = i6 / 4, c8 = this.get();
    if (D3 > c8.length) throw new Error("_sha2: outputLen bigger than state");
    for (let l9 = 0; l9 < D3; l9++) u5.setUint32(4 * l9, c8[l9], s4);
  }
  digest() {
    const { buffer: e3, outputLen: n6 } = this;
    this.digestInto(e3);
    const r4 = e3.slice(0, n6);
    return this.destroy(), r4;
  }
  _cloneInto(e3) {
    e3 || (e3 = new this.constructor()), e3.set(...this.get());
    const { blockLen: n6, buffer: r4, length: o6, finished: s4, destroyed: a4, pos: u5 } = this;
    return e3.length = o6, e3.pos = u5, e3.finished = s4, e3.destroyed = a4, o6 % n6 && e3.buffer.set(r4), e3;
  }
};
var wt = BigInt(2 ** 32 - 1);
var St = BigInt(32);
function le(t2, e3 = false) {
  return e3 ? { h: Number(t2 & wt), l: Number(t2 >> St & wt) } : { h: Number(t2 >> St & wt) | 0, l: Number(t2 & wt) | 0 };
}
function mn(t2, e3 = false) {
  let n6 = new Uint32Array(t2.length), r4 = new Uint32Array(t2.length);
  for (let o6 = 0; o6 < t2.length; o6++) {
    const { h: s4, l: a4 } = le(t2[o6], e3);
    [n6[o6], r4[o6]] = [s4, a4];
  }
  return [n6, r4];
}
var _n = (t2, e3) => BigInt(t2 >>> 0) << St | BigInt(e3 >>> 0);
var Sn = (t2, e3, n6) => t2 >>> n6;
var vn = (t2, e3, n6) => t2 << 32 - n6 | e3 >>> n6;
var In = (t2, e3, n6) => t2 >>> n6 | e3 << 32 - n6;
var Un = (t2, e3, n6) => t2 << 32 - n6 | e3 >>> n6;
var Tn = (t2, e3, n6) => t2 << 64 - n6 | e3 >>> n6 - 32;
var Fn = (t2, e3, n6) => t2 >>> n6 - 32 | e3 << 64 - n6;
var Nn = (t2, e3) => e3;
var Ln = (t2, e3) => t2;
var On = (t2, e3, n6) => t2 << n6 | e3 >>> 32 - n6;
var Hn = (t2, e3, n6) => e3 << n6 | t2 >>> 32 - n6;
var zn = (t2, e3, n6) => e3 << n6 - 32 | t2 >>> 64 - n6;
var Mn = (t2, e3, n6) => t2 << n6 - 32 | e3 >>> 64 - n6;
function qn(t2, e3, n6, r4) {
  const o6 = (e3 >>> 0) + (r4 >>> 0);
  return { h: t2 + n6 + (o6 / 2 ** 32 | 0) | 0, l: o6 | 0 };
}
var $n = (t2, e3, n6) => (t2 >>> 0) + (e3 >>> 0) + (n6 >>> 0);
var kn = (t2, e3, n6, r4) => e3 + n6 + r4 + (t2 / 2 ** 32 | 0) | 0;
var Rn = (t2, e3, n6, r4) => (t2 >>> 0) + (e3 >>> 0) + (n6 >>> 0) + (r4 >>> 0);
var jn = (t2, e3, n6, r4, o6) => e3 + n6 + r4 + o6 + (t2 / 2 ** 32 | 0) | 0;
var Zn = (t2, e3, n6, r4, o6) => (t2 >>> 0) + (e3 >>> 0) + (n6 >>> 0) + (r4 >>> 0) + (o6 >>> 0);
var Gn = (t2, e3, n6, r4, o6, s4) => e3 + n6 + r4 + o6 + s4 + (t2 / 2 ** 32 | 0) | 0;
var x3 = { fromBig: le, split: mn, toBig: _n, shrSH: Sn, shrSL: vn, rotrSH: In, rotrSL: Un, rotrBH: Tn, rotrBL: Fn, rotr32H: Nn, rotr32L: Ln, rotlSH: On, rotlSL: Hn, rotlBH: zn, rotlBL: Mn, add: qn, add3L: $n, add3H: kn, add4L: Rn, add4H: jn, add5H: Gn, add5L: Zn };
var [Vn, Yn] = (() => x3.split(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t2) => BigInt(t2))))();
var P3 = new Uint32Array(80);
var Q = new Uint32Array(80);
var Jn = class extends An {
  constructor() {
    super(128, 64, 16, false), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  get() {
    const { Ah: e3, Al: n6, Bh: r4, Bl: o6, Ch: s4, Cl: a4, Dh: u5, Dl: i6, Eh: D3, El: c8, Fh: l9, Fl: p6, Gh: w6, Gl: h7, Hh: g4, Hl: S5 } = this;
    return [e3, n6, r4, o6, s4, a4, u5, i6, D3, c8, l9, p6, w6, h7, g4, S5];
  }
  set(e3, n6, r4, o6, s4, a4, u5, i6, D3, c8, l9, p6, w6, h7, g4, S5) {
    this.Ah = e3 | 0, this.Al = n6 | 0, this.Bh = r4 | 0, this.Bl = o6 | 0, this.Ch = s4 | 0, this.Cl = a4 | 0, this.Dh = u5 | 0, this.Dl = i6 | 0, this.Eh = D3 | 0, this.El = c8 | 0, this.Fh = l9 | 0, this.Fl = p6 | 0, this.Gh = w6 | 0, this.Gl = h7 | 0, this.Hh = g4 | 0, this.Hl = S5 | 0;
  }
  process(e3, n6) {
    for (let d6 = 0; d6 < 16; d6++, n6 += 4) P3[d6] = e3.getUint32(n6), Q[d6] = e3.getUint32(n6 += 4);
    for (let d6 = 16; d6 < 80; d6++) {
      const m4 = P3[d6 - 15] | 0, F4 = Q[d6 - 15] | 0, q2 = x3.rotrSH(m4, F4, 1) ^ x3.rotrSH(m4, F4, 8) ^ x3.shrSH(m4, F4, 7), z4 = x3.rotrSL(m4, F4, 1) ^ x3.rotrSL(m4, F4, 8) ^ x3.shrSL(m4, F4, 7), I5 = P3[d6 - 2] | 0, O7 = Q[d6 - 2] | 0, ot3 = x3.rotrSH(I5, O7, 19) ^ x3.rotrBH(I5, O7, 61) ^ x3.shrSH(I5, O7, 6), tt3 = x3.rotrSL(I5, O7, 19) ^ x3.rotrBL(I5, O7, 61) ^ x3.shrSL(I5, O7, 6), st2 = x3.add4L(z4, tt3, Q[d6 - 7], Q[d6 - 16]), at3 = x3.add4H(st2, q2, ot3, P3[d6 - 7], P3[d6 - 16]);
      P3[d6] = at3 | 0, Q[d6] = st2 | 0;
    }
    let { Ah: r4, Al: o6, Bh: s4, Bl: a4, Ch: u5, Cl: i6, Dh: D3, Dl: c8, Eh: l9, El: p6, Fh: w6, Fl: h7, Gh: g4, Gl: S5, Hh: v6, Hl: L5 } = this;
    for (let d6 = 0; d6 < 80; d6++) {
      const m4 = x3.rotrSH(l9, p6, 14) ^ x3.rotrSH(l9, p6, 18) ^ x3.rotrBH(l9, p6, 41), F4 = x3.rotrSL(l9, p6, 14) ^ x3.rotrSL(l9, p6, 18) ^ x3.rotrBL(l9, p6, 41), q2 = l9 & w6 ^ ~l9 & g4, z4 = p6 & h7 ^ ~p6 & S5, I5 = x3.add5L(L5, F4, z4, Yn[d6], Q[d6]), O7 = x3.add5H(I5, v6, m4, q2, Vn[d6], P3[d6]), ot3 = I5 | 0, tt3 = x3.rotrSH(r4, o6, 28) ^ x3.rotrBH(r4, o6, 34) ^ x3.rotrBH(r4, o6, 39), st2 = x3.rotrSL(r4, o6, 28) ^ x3.rotrBL(r4, o6, 34) ^ x3.rotrBL(r4, o6, 39), at3 = r4 & s4 ^ r4 & u5 ^ s4 & u5, Ct3 = o6 & a4 ^ o6 & i6 ^ a4 & i6;
      v6 = g4 | 0, L5 = S5 | 0, g4 = w6 | 0, S5 = h7 | 0, w6 = l9 | 0, h7 = p6 | 0, { h: l9, l: p6 } = x3.add(D3 | 0, c8 | 0, O7 | 0, ot3 | 0), D3 = u5 | 0, c8 = i6 | 0, u5 = s4 | 0, i6 = a4 | 0, s4 = r4 | 0, a4 = o6 | 0;
      const At3 = x3.add3L(ot3, st2, Ct3);
      r4 = x3.add3H(At3, O7, tt3, at3), o6 = At3 | 0;
    }
    ({ h: r4, l: o6 } = x3.add(this.Ah | 0, this.Al | 0, r4 | 0, o6 | 0)), { h: s4, l: a4 } = x3.add(this.Bh | 0, this.Bl | 0, s4 | 0, a4 | 0), { h: u5, l: i6 } = x3.add(this.Ch | 0, this.Cl | 0, u5 | 0, i6 | 0), { h: D3, l: c8 } = x3.add(this.Dh | 0, this.Dl | 0, D3 | 0, c8 | 0), { h: l9, l: p6 } = x3.add(this.Eh | 0, this.El | 0, l9 | 0, p6 | 0), { h: w6, l: h7 } = x3.add(this.Fh | 0, this.Fl | 0, w6 | 0, h7 | 0), { h: g4, l: S5 } = x3.add(this.Gh | 0, this.Gl | 0, g4 | 0, S5 | 0), { h: v6, l: L5 } = x3.add(this.Hh | 0, this.Hl | 0, v6 | 0, L5 | 0), this.set(r4, o6, s4, a4, u5, i6, D3, c8, l9, p6, w6, h7, g4, S5, v6, L5);
  }
  roundClean() {
    P3.fill(0), Q.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Kn = Bn(() => new Jn());
var vt = BigInt(0);
var be = BigInt(1);
var Wn = BigInt(2);
function It(t2) {
  return t2 instanceof Uint8Array || ArrayBuffer.isView(t2) && t2.constructor.name === "Uint8Array";
}
function Ut(t2) {
  if (!It(t2)) throw new Error("Uint8Array expected");
}
function Tt(t2, e3) {
  if (typeof e3 != "boolean") throw new Error(t2 + " boolean expected, got " + e3);
}
var Xn = Array.from({ length: 256 }, (t2, e3) => e3.toString(16).padStart(2, "0"));
function Ft(t2) {
  Ut(t2);
  let e3 = "";
  for (let n6 = 0; n6 < t2.length; n6++) e3 += Xn[t2[n6]];
  return e3;
}
function pe(t2) {
  if (typeof t2 != "string") throw new Error("hex string expected, got " + typeof t2);
  return t2 === "" ? vt : BigInt("0x" + t2);
}
var K2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function we(t2) {
  if (t2 >= K2._0 && t2 <= K2._9) return t2 - K2._0;
  if (t2 >= K2.A && t2 <= K2.F) return t2 - (K2.A - 10);
  if (t2 >= K2.a && t2 <= K2.f) return t2 - (K2.a - 10);
}
function Ee(t2) {
  if (typeof t2 != "string") throw new Error("hex string expected, got " + typeof t2);
  const e3 = t2.length, n6 = e3 / 2;
  if (e3 % 2) throw new Error("hex string expected, got unpadded hex of length " + e3);
  const r4 = new Uint8Array(n6);
  for (let o6 = 0, s4 = 0; o6 < n6; o6++, s4 += 2) {
    const a4 = we(t2.charCodeAt(s4)), u5 = we(t2.charCodeAt(s4 + 1));
    if (a4 === void 0 || u5 === void 0) {
      const i6 = t2[s4] + t2[s4 + 1];
      throw new Error('hex string expected, got non-hex character "' + i6 + '" at index ' + s4);
    }
    r4[o6] = a4 * 16 + u5;
  }
  return r4;
}
function Pn(t2) {
  return pe(Ft(t2));
}
function Et(t2) {
  return Ut(t2), pe(Ft(Uint8Array.from(t2).reverse()));
}
function ge(t2, e3) {
  return Ee(t2.toString(16).padStart(e3 * 2, "0"));
}
function Nt(t2, e3) {
  return ge(t2, e3).reverse();
}
function W(t2, e3, n6) {
  let r4;
  if (typeof e3 == "string") try {
    r4 = Ee(e3);
  } catch (s4) {
    throw new Error(t2 + " must be hex string or Uint8Array, cause: " + s4);
  }
  else if (It(e3)) r4 = Uint8Array.from(e3);
  else throw new Error(t2 + " must be hex string or Uint8Array");
  const o6 = r4.length;
  if (typeof n6 == "number" && o6 !== n6) throw new Error(t2 + " of length " + n6 + " expected, got " + o6);
  return r4;
}
function ye(...t2) {
  let e3 = 0;
  for (let r4 = 0; r4 < t2.length; r4++) {
    const o6 = t2[r4];
    Ut(o6), e3 += o6.length;
  }
  const n6 = new Uint8Array(e3);
  for (let r4 = 0, o6 = 0; r4 < t2.length; r4++) {
    const s4 = t2[r4];
    n6.set(s4, o6), o6 += s4.length;
  }
  return n6;
}
var Lt = (t2) => typeof t2 == "bigint" && vt <= t2;
function Qn(t2, e3, n6) {
  return Lt(t2) && Lt(e3) && Lt(n6) && e3 <= t2 && t2 < n6;
}
function ft(t2, e3, n6, r4) {
  if (!Qn(e3, n6, r4)) throw new Error("expected valid " + t2 + ": " + n6 + " <= n < " + r4 + ", got " + e3);
}
function tr(t2) {
  let e3;
  for (e3 = 0; t2 > vt; t2 >>= be, e3 += 1) ;
  return e3;
}
var er = (t2) => (Wn << BigInt(t2 - 1)) - be;
var nr = { bigint: (t2) => typeof t2 == "bigint", function: (t2) => typeof t2 == "function", boolean: (t2) => typeof t2 == "boolean", string: (t2) => typeof t2 == "string", stringOrUint8Array: (t2) => typeof t2 == "string" || It(t2), isSafeInteger: (t2) => Number.isSafeInteger(t2), array: (t2) => Array.isArray(t2), field: (t2, e3) => e3.Fp.isValid(t2), hash: (t2) => typeof t2 == "function" && Number.isSafeInteger(t2.outputLen) };
function Ot(t2, e3, n6 = {}) {
  const r4 = (o6, s4, a4) => {
    const u5 = nr[s4];
    if (typeof u5 != "function") throw new Error("invalid validator function");
    const i6 = t2[o6];
    if (!(a4 && i6 === void 0) && !u5(i6, t2)) throw new Error("param " + String(o6) + " is invalid. Expected " + s4 + ", got " + i6);
  };
  for (const [o6, s4] of Object.entries(e3)) r4(o6, s4, false);
  for (const [o6, s4] of Object.entries(n6)) r4(o6, s4, true);
  return t2;
}
function xe(t2) {
  const e3 = /* @__PURE__ */ new WeakMap();
  return (n6, ...r4) => {
    const o6 = e3.get(n6);
    if (o6 !== void 0) return o6;
    const s4 = t2(n6, ...r4);
    return e3.set(n6, s4), s4;
  };
}
var M2 = BigInt(0);
var N2 = BigInt(1);
var nt = BigInt(2);
var rr = BigInt(3);
var Ht = BigInt(4);
var Be = BigInt(5);
var Ce = BigInt(8);
function H(t2, e3) {
  const n6 = t2 % e3;
  return n6 >= M2 ? n6 : e3 + n6;
}
function or(t2, e3, n6) {
  if (e3 < M2) throw new Error("invalid exponent, negatives unsupported");
  if (n6 <= M2) throw new Error("invalid modulus");
  if (n6 === N2) return M2;
  let r4 = N2;
  for (; e3 > M2; ) e3 & N2 && (r4 = r4 * t2 % n6), t2 = t2 * t2 % n6, e3 >>= N2;
  return r4;
}
function J2(t2, e3, n6) {
  let r4 = t2;
  for (; e3-- > M2; ) r4 *= r4, r4 %= n6;
  return r4;
}
function Ae(t2, e3) {
  if (t2 === M2) throw new Error("invert: expected non-zero number");
  if (e3 <= M2) throw new Error("invert: expected positive modulus, got " + e3);
  let n6 = H(t2, e3), r4 = e3, o6 = M2, s4 = N2;
  for (; n6 !== M2; ) {
    const u5 = r4 / n6, i6 = r4 % n6, D3 = o6 - s4 * u5;
    r4 = n6, n6 = i6, o6 = s4, s4 = D3;
  }
  if (r4 !== N2) throw new Error("invert: does not exist");
  return H(o6, e3);
}
function sr(t2) {
  const e3 = (t2 - N2) / nt;
  let n6, r4, o6;
  for (n6 = t2 - N2, r4 = 0; n6 % nt === M2; n6 /= nt, r4++) ;
  for (o6 = nt; o6 < t2 && or(o6, e3, t2) !== t2 - N2; o6++) if (o6 > 1e3) throw new Error("Cannot find square root: likely non-prime P");
  if (r4 === 1) {
    const a4 = (t2 + N2) / Ht;
    return function(i6, D3) {
      const c8 = i6.pow(D3, a4);
      if (!i6.eql(i6.sqr(c8), D3)) throw new Error("Cannot find square root");
      return c8;
    };
  }
  const s4 = (n6 + N2) / nt;
  return function(u5, i6) {
    if (u5.pow(i6, e3) === u5.neg(u5.ONE)) throw new Error("Cannot find square root");
    let D3 = r4, c8 = u5.pow(u5.mul(u5.ONE, o6), n6), l9 = u5.pow(i6, s4), p6 = u5.pow(i6, n6);
    for (; !u5.eql(p6, u5.ONE); ) {
      if (u5.eql(p6, u5.ZERO)) return u5.ZERO;
      let w6 = 1;
      for (let g4 = u5.sqr(p6); w6 < D3 && !u5.eql(g4, u5.ONE); w6++) g4 = u5.sqr(g4);
      const h7 = u5.pow(c8, N2 << BigInt(D3 - w6 - 1));
      c8 = u5.sqr(h7), l9 = u5.mul(l9, h7), p6 = u5.mul(p6, c8), D3 = w6;
    }
    return l9;
  };
}
function ir(t2) {
  if (t2 % Ht === rr) {
    const e3 = (t2 + N2) / Ht;
    return function(r4, o6) {
      const s4 = r4.pow(o6, e3);
      if (!r4.eql(r4.sqr(s4), o6)) throw new Error("Cannot find square root");
      return s4;
    };
  }
  if (t2 % Ce === Be) {
    const e3 = (t2 - Be) / Ce;
    return function(r4, o6) {
      const s4 = r4.mul(o6, nt), a4 = r4.pow(s4, e3), u5 = r4.mul(o6, a4), i6 = r4.mul(r4.mul(u5, nt), a4), D3 = r4.mul(u5, r4.sub(i6, r4.ONE));
      if (!r4.eql(r4.sqr(D3), o6)) throw new Error("Cannot find square root");
      return D3;
    };
  }
  return sr(t2);
}
var ur = (t2, e3) => (H(t2, e3) & N2) === N2;
var cr = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function ar(t2) {
  const e3 = { ORDER: "bigint", MASK: "bigint", BYTES: "isSafeInteger", BITS: "isSafeInteger" }, n6 = cr.reduce((r4, o6) => (r4[o6] = "function", r4), e3);
  return Ot(t2, n6);
}
function fr(t2, e3, n6) {
  if (n6 < M2) throw new Error("invalid exponent, negatives unsupported");
  if (n6 === M2) return t2.ONE;
  if (n6 === N2) return e3;
  let r4 = t2.ONE, o6 = e3;
  for (; n6 > M2; ) n6 & N2 && (r4 = t2.mul(r4, o6)), o6 = t2.sqr(o6), n6 >>= N2;
  return r4;
}
function Dr(t2, e3) {
  const n6 = new Array(e3.length), r4 = e3.reduce((s4, a4, u5) => t2.is0(a4) ? s4 : (n6[u5] = s4, t2.mul(s4, a4)), t2.ONE), o6 = t2.inv(r4);
  return e3.reduceRight((s4, a4, u5) => t2.is0(a4) ? s4 : (n6[u5] = t2.mul(s4, n6[u5]), t2.mul(s4, a4)), o6), n6;
}
function me(t2, e3) {
  const n6 = e3 !== void 0 ? e3 : t2.toString(2).length, r4 = Math.ceil(n6 / 8);
  return { nBitLength: n6, nByteLength: r4 };
}
function _e(t2, e3, n6 = false, r4 = {}) {
  if (t2 <= M2) throw new Error("invalid field: expected ORDER > 0, got " + t2);
  const { nBitLength: o6, nByteLength: s4 } = me(t2, e3);
  if (s4 > 2048) throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a4;
  const u5 = Object.freeze({ ORDER: t2, isLE: n6, BITS: o6, BYTES: s4, MASK: er(o6), ZERO: M2, ONE: N2, create: (i6) => H(i6, t2), isValid: (i6) => {
    if (typeof i6 != "bigint") throw new Error("invalid field element: expected bigint, got " + typeof i6);
    return M2 <= i6 && i6 < t2;
  }, is0: (i6) => i6 === M2, isOdd: (i6) => (i6 & N2) === N2, neg: (i6) => H(-i6, t2), eql: (i6, D3) => i6 === D3, sqr: (i6) => H(i6 * i6, t2), add: (i6, D3) => H(i6 + D3, t2), sub: (i6, D3) => H(i6 - D3, t2), mul: (i6, D3) => H(i6 * D3, t2), pow: (i6, D3) => fr(u5, i6, D3), div: (i6, D3) => H(i6 * Ae(D3, t2), t2), sqrN: (i6) => i6 * i6, addN: (i6, D3) => i6 + D3, subN: (i6, D3) => i6 - D3, mulN: (i6, D3) => i6 * D3, inv: (i6) => Ae(i6, t2), sqrt: r4.sqrt || ((i6) => (a4 || (a4 = ir(t2)), a4(u5, i6))), invertBatch: (i6) => Dr(u5, i6), cmov: (i6, D3, c8) => c8 ? D3 : i6, toBytes: (i6) => n6 ? Nt(i6, s4) : ge(i6, s4), fromBytes: (i6) => {
    if (i6.length !== s4) throw new Error("Field.fromBytes: expected " + s4 + " bytes, got " + i6.length);
    return n6 ? Et(i6) : Pn(i6);
  } });
  return Object.freeze(u5);
}
var Se = BigInt(0);
var gt = BigInt(1);
function zt(t2, e3) {
  const n6 = e3.negate();
  return t2 ? n6 : e3;
}
function ve(t2, e3) {
  if (!Number.isSafeInteger(t2) || t2 <= 0 || t2 > e3) throw new Error("invalid window size, expected [1.." + e3 + "], got W=" + t2);
}
function Mt(t2, e3) {
  ve(t2, e3);
  const n6 = Math.ceil(e3 / t2) + 1, r4 = 2 ** (t2 - 1);
  return { windows: n6, windowSize: r4 };
}
function dr(t2, e3) {
  if (!Array.isArray(t2)) throw new Error("array expected");
  t2.forEach((n6, r4) => {
    if (!(n6 instanceof e3)) throw new Error("invalid point at index " + r4);
  });
}
function hr(t2, e3) {
  if (!Array.isArray(t2)) throw new Error("array of scalars expected");
  t2.forEach((n6, r4) => {
    if (!e3.isValid(n6)) throw new Error("invalid scalar at index " + r4);
  });
}
var qt = /* @__PURE__ */ new WeakMap();
var Ie = /* @__PURE__ */ new WeakMap();
function $t(t2) {
  return Ie.get(t2) || 1;
}
function lr(t2, e3) {
  return { constTimeNegate: zt, hasPrecomputes(n6) {
    return $t(n6) !== 1;
  }, unsafeLadder(n6, r4, o6 = t2.ZERO) {
    let s4 = n6;
    for (; r4 > Se; ) r4 & gt && (o6 = o6.add(s4)), s4 = s4.double(), r4 >>= gt;
    return o6;
  }, precomputeWindow(n6, r4) {
    const { windows: o6, windowSize: s4 } = Mt(r4, e3), a4 = [];
    let u5 = n6, i6 = u5;
    for (let D3 = 0; D3 < o6; D3++) {
      i6 = u5, a4.push(i6);
      for (let c8 = 1; c8 < s4; c8++) i6 = i6.add(u5), a4.push(i6);
      u5 = i6.double();
    }
    return a4;
  }, wNAF(n6, r4, o6) {
    const { windows: s4, windowSize: a4 } = Mt(n6, e3);
    let u5 = t2.ZERO, i6 = t2.BASE;
    const D3 = BigInt(2 ** n6 - 1), c8 = 2 ** n6, l9 = BigInt(n6);
    for (let p6 = 0; p6 < s4; p6++) {
      const w6 = p6 * a4;
      let h7 = Number(o6 & D3);
      o6 >>= l9, h7 > a4 && (h7 -= c8, o6 += gt);
      const g4 = w6, S5 = w6 + Math.abs(h7) - 1, v6 = p6 % 2 !== 0, L5 = h7 < 0;
      h7 === 0 ? i6 = i6.add(zt(v6, r4[g4])) : u5 = u5.add(zt(L5, r4[S5]));
    }
    return { p: u5, f: i6 };
  }, wNAFUnsafe(n6, r4, o6, s4 = t2.ZERO) {
    const { windows: a4, windowSize: u5 } = Mt(n6, e3), i6 = BigInt(2 ** n6 - 1), D3 = 2 ** n6, c8 = BigInt(n6);
    for (let l9 = 0; l9 < a4; l9++) {
      const p6 = l9 * u5;
      if (o6 === Se) break;
      let w6 = Number(o6 & i6);
      if (o6 >>= c8, w6 > u5 && (w6 -= D3, o6 += gt), w6 === 0) continue;
      let h7 = r4[p6 + Math.abs(w6) - 1];
      w6 < 0 && (h7 = h7.negate()), s4 = s4.add(h7);
    }
    return s4;
  }, getPrecomputes(n6, r4, o6) {
    let s4 = qt.get(r4);
    return s4 || (s4 = this.precomputeWindow(r4, n6), n6 !== 1 && qt.set(r4, o6(s4))), s4;
  }, wNAFCached(n6, r4, o6) {
    const s4 = $t(n6);
    return this.wNAF(s4, this.getPrecomputes(s4, n6, o6), r4);
  }, wNAFCachedUnsafe(n6, r4, o6, s4) {
    const a4 = $t(n6);
    return a4 === 1 ? this.unsafeLadder(n6, r4, s4) : this.wNAFUnsafe(a4, this.getPrecomputes(a4, n6, o6), r4, s4);
  }, setWindowSize(n6, r4) {
    ve(r4, e3), Ie.set(n6, r4), qt.delete(n6);
  } };
}
function br(t2, e3, n6, r4) {
  if (dr(n6, t2), hr(r4, e3), n6.length !== r4.length) throw new Error("arrays of points and scalars must have equal length");
  const o6 = t2.ZERO, s4 = tr(BigInt(n6.length)), a4 = s4 > 12 ? s4 - 3 : s4 > 4 ? s4 - 2 : s4 ? 2 : 1, u5 = (1 << a4) - 1, i6 = new Array(u5 + 1).fill(o6), D3 = Math.floor((e3.BITS - 1) / a4) * a4;
  let c8 = o6;
  for (let l9 = D3; l9 >= 0; l9 -= a4) {
    i6.fill(o6);
    for (let w6 = 0; w6 < r4.length; w6++) {
      const h7 = r4[w6], g4 = Number(h7 >> BigInt(l9) & BigInt(u5));
      i6[g4] = i6[g4].add(n6[w6]);
    }
    let p6 = o6;
    for (let w6 = i6.length - 1, h7 = o6; w6 > 0; w6--) h7 = h7.add(i6[w6]), p6 = p6.add(h7);
    if (c8 = c8.add(p6), l9 !== 0) for (let w6 = 0; w6 < a4; w6++) c8 = c8.double();
  }
  return c8;
}
function pr(t2) {
  return ar(t2.Fp), Ot(t2, { n: "bigint", h: "bigint", Gx: "field", Gy: "field" }, { nBitLength: "isSafeInteger", nByteLength: "isSafeInteger" }), Object.freeze({ ...me(t2.n, t2.nBitLength), ...t2, p: t2.Fp.ORDER });
}
var G = BigInt(0);
var j2 = BigInt(1);
var yt = BigInt(2);
var wr = BigInt(8);
var Er = { zip215: true };
function gr(t2) {
  const e3 = pr(t2);
  return Ot(t2, { hash: "function", a: "bigint", d: "bigint", randomBytes: "function" }, { adjustScalarBytes: "function", domain: "function", uvRatio: "function", mapToCurve: "function" }), Object.freeze({ ...e3 });
}
function yr(t2) {
  const e3 = gr(t2), { Fp: n6, n: r4, prehash: o6, hash: s4, randomBytes: a4, nByteLength: u5, h: i6 } = e3, D3 = yt << BigInt(u5 * 8) - j2, c8 = n6.create, l9 = _e(e3.n, e3.nBitLength), p6 = e3.uvRatio || ((y7, f9) => {
    try {
      return { isValid: true, value: n6.sqrt(y7 * n6.inv(f9)) };
    } catch {
      return { isValid: false, value: G };
    }
  }), w6 = e3.adjustScalarBytes || ((y7) => y7), h7 = e3.domain || ((y7, f9, b6) => {
    if (Tt("phflag", b6), f9.length || b6) throw new Error("Contexts/pre-hash are not supported");
    return y7;
  });
  function g4(y7, f9) {
    ft("coordinate " + y7, f9, G, D3);
  }
  function S5(y7) {
    if (!(y7 instanceof d6)) throw new Error("ExtendedPoint expected");
  }
  const v6 = xe((y7, f9) => {
    const { ex: b6, ey: E6, ez: B4 } = y7, C5 = y7.is0();
    f9 == null && (f9 = C5 ? wr : n6.inv(B4));
    const A4 = c8(b6 * f9), U4 = c8(E6 * f9), _3 = c8(B4 * f9);
    if (C5) return { x: G, y: j2 };
    if (_3 !== j2) throw new Error("invZ was invalid");
    return { x: A4, y: U4 };
  }), L5 = xe((y7) => {
    const { a: f9, d: b6 } = e3;
    if (y7.is0()) throw new Error("bad point: ZERO");
    const { ex: E6, ey: B4, ez: C5, et: A4 } = y7, U4 = c8(E6 * E6), _3 = c8(B4 * B4), T4 = c8(C5 * C5), $4 = c8(T4 * T4), R4 = c8(U4 * f9), V4 = c8(T4 * c8(R4 + _3)), Y4 = c8($4 + c8(b6 * c8(U4 * _3)));
    if (V4 !== Y4) throw new Error("bad point: equation left != right (1)");
    const Z2 = c8(E6 * B4), X3 = c8(C5 * A4);
    if (Z2 !== X3) throw new Error("bad point: equation left != right (2)");
    return true;
  });
  class d6 {
    constructor(f9, b6, E6, B4) {
      this.ex = f9, this.ey = b6, this.ez = E6, this.et = B4, g4("x", f9), g4("y", b6), g4("z", E6), g4("t", B4), Object.freeze(this);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(f9) {
      if (f9 instanceof d6) throw new Error("extended point not allowed");
      const { x: b6, y: E6 } = f9 || {};
      return g4("x", b6), g4("y", E6), new d6(b6, E6, j2, c8(b6 * E6));
    }
    static normalizeZ(f9) {
      const b6 = n6.invertBatch(f9.map((E6) => E6.ez));
      return f9.map((E6, B4) => E6.toAffine(b6[B4])).map(d6.fromAffine);
    }
    static msm(f9, b6) {
      return br(d6, l9, f9, b6);
    }
    _setWindowSize(f9) {
      q2.setWindowSize(this, f9);
    }
    assertValidity() {
      L5(this);
    }
    equals(f9) {
      S5(f9);
      const { ex: b6, ey: E6, ez: B4 } = this, { ex: C5, ey: A4, ez: U4 } = f9, _3 = c8(b6 * U4), T4 = c8(C5 * B4), $4 = c8(E6 * U4), R4 = c8(A4 * B4);
      return _3 === T4 && $4 === R4;
    }
    is0() {
      return this.equals(d6.ZERO);
    }
    negate() {
      return new d6(c8(-this.ex), this.ey, this.ez, c8(-this.et));
    }
    double() {
      const { a: f9 } = e3, { ex: b6, ey: E6, ez: B4 } = this, C5 = c8(b6 * b6), A4 = c8(E6 * E6), U4 = c8(yt * c8(B4 * B4)), _3 = c8(f9 * C5), T4 = b6 + E6, $4 = c8(c8(T4 * T4) - C5 - A4), R4 = _3 + A4, V4 = R4 - U4, Y4 = _3 - A4, Z2 = c8($4 * V4), X3 = c8(R4 * Y4), et2 = c8($4 * Y4), pt3 = c8(V4 * R4);
      return new d6(Z2, X3, pt3, et2);
    }
    add(f9) {
      S5(f9);
      const { a: b6, d: E6 } = e3, { ex: B4, ey: C5, ez: A4, et: U4 } = this, { ex: _3, ey: T4, ez: $4, et: R4 } = f9;
      if (b6 === BigInt(-1)) {
        const re3 = c8((C5 - B4) * (T4 + _3)), oe2 = c8((C5 + B4) * (T4 - _3)), mt4 = c8(oe2 - re3);
        if (mt4 === G) return this.double();
        const se4 = c8(A4 * yt * R4), ie4 = c8(U4 * yt * $4), ue4 = ie4 + se4, ce4 = oe2 + re3, ae4 = ie4 - se4, Dn3 = c8(ue4 * mt4), dn3 = c8(ce4 * ae4), hn3 = c8(ue4 * ae4), ln3 = c8(mt4 * ce4);
        return new d6(Dn3, dn3, ln3, hn3);
      }
      const V4 = c8(B4 * _3), Y4 = c8(C5 * T4), Z2 = c8(U4 * E6 * R4), X3 = c8(A4 * $4), et2 = c8((B4 + C5) * (_3 + T4) - V4 - Y4), pt3 = X3 - Z2, ee4 = X3 + Z2, ne4 = c8(Y4 - b6 * V4), un3 = c8(et2 * pt3), cn3 = c8(ee4 * ne4), an3 = c8(et2 * ne4), fn3 = c8(pt3 * ee4);
      return new d6(un3, cn3, fn3, an3);
    }
    subtract(f9) {
      return this.add(f9.negate());
    }
    wNAF(f9) {
      return q2.wNAFCached(this, f9, d6.normalizeZ);
    }
    multiply(f9) {
      const b6 = f9;
      ft("scalar", b6, j2, r4);
      const { p: E6, f: B4 } = this.wNAF(b6);
      return d6.normalizeZ([E6, B4])[0];
    }
    multiplyUnsafe(f9, b6 = d6.ZERO) {
      const E6 = f9;
      return ft("scalar", E6, G, r4), E6 === G ? F4 : this.is0() || E6 === j2 ? this : q2.wNAFCachedUnsafe(this, E6, d6.normalizeZ, b6);
    }
    isSmallOrder() {
      return this.multiplyUnsafe(i6).is0();
    }
    isTorsionFree() {
      return q2.unsafeLadder(this, r4).is0();
    }
    toAffine(f9) {
      return v6(this, f9);
    }
    clearCofactor() {
      const { h: f9 } = e3;
      return f9 === j2 ? this : this.multiplyUnsafe(f9);
    }
    static fromHex(f9, b6 = false) {
      const { d: E6, a: B4 } = e3, C5 = n6.BYTES;
      f9 = W("pointHex", f9, C5), Tt("zip215", b6);
      const A4 = f9.slice(), U4 = f9[C5 - 1];
      A4[C5 - 1] = U4 & -129;
      const _3 = Et(A4), T4 = b6 ? D3 : n6.ORDER;
      ft("pointHex.y", _3, G, T4);
      const $4 = c8(_3 * _3), R4 = c8($4 - j2), V4 = c8(E6 * $4 - B4);
      let { isValid: Y4, value: Z2 } = p6(R4, V4);
      if (!Y4) throw new Error("Point.fromHex: invalid y coordinate");
      const X3 = (Z2 & j2) === j2, et2 = (U4 & 128) !== 0;
      if (!b6 && Z2 === G && et2) throw new Error("Point.fromHex: x=0 and x_0=1");
      return et2 !== X3 && (Z2 = c8(-Z2)), d6.fromAffine({ x: Z2, y: _3 });
    }
    static fromPrivateKey(f9) {
      return O7(f9).point;
    }
    toRawBytes() {
      const { x: f9, y: b6 } = this.toAffine(), E6 = Nt(b6, n6.BYTES);
      return E6[E6.length - 1] |= f9 & j2 ? 128 : 0, E6;
    }
    toHex() {
      return Ft(this.toRawBytes());
    }
  }
  d6.BASE = new d6(e3.Gx, e3.Gy, j2, c8(e3.Gx * e3.Gy)), d6.ZERO = new d6(G, j2, j2, G);
  const { BASE: m4, ZERO: F4 } = d6, q2 = lr(d6, u5 * 8);
  function z4(y7) {
    return H(y7, r4);
  }
  function I5(y7) {
    return z4(Et(y7));
  }
  function O7(y7) {
    const f9 = n6.BYTES;
    y7 = W("private key", y7, f9);
    const b6 = W("hashed private key", s4(y7), 2 * f9), E6 = w6(b6.slice(0, f9)), B4 = b6.slice(f9, 2 * f9), C5 = I5(E6), A4 = m4.multiply(C5), U4 = A4.toRawBytes();
    return { head: E6, prefix: B4, scalar: C5, point: A4, pointBytes: U4 };
  }
  function ot3(y7) {
    return O7(y7).pointBytes;
  }
  function tt3(y7 = new Uint8Array(), ...f9) {
    const b6 = ye(...f9);
    return I5(s4(h7(b6, W("context", y7), !!o6)));
  }
  function st2(y7, f9, b6 = {}) {
    y7 = W("message", y7), o6 && (y7 = o6(y7));
    const { prefix: E6, scalar: B4, pointBytes: C5 } = O7(f9), A4 = tt3(b6.context, E6, y7), U4 = m4.multiply(A4).toRawBytes(), _3 = tt3(b6.context, U4, C5, y7), T4 = z4(A4 + _3 * B4);
    ft("signature.s", T4, G, r4);
    const $4 = ye(U4, Nt(T4, n6.BYTES));
    return W("result", $4, n6.BYTES * 2);
  }
  const at3 = Er;
  function Ct3(y7, f9, b6, E6 = at3) {
    const { context: B4, zip215: C5 } = E6, A4 = n6.BYTES;
    y7 = W("signature", y7, 2 * A4), f9 = W("message", f9), b6 = W("publicKey", b6, A4), C5 !== void 0 && Tt("zip215", C5), o6 && (f9 = o6(f9));
    const U4 = Et(y7.slice(A4, 2 * A4));
    let _3, T4, $4;
    try {
      _3 = d6.fromHex(b6, C5), T4 = d6.fromHex(y7.slice(0, A4), C5), $4 = m4.multiplyUnsafe(U4);
    } catch {
      return false;
    }
    if (!C5 && _3.isSmallOrder()) return false;
    const R4 = tt3(B4, T4.toRawBytes(), _3.toRawBytes(), f9);
    return T4.add(_3.multiplyUnsafe(R4)).subtract($4).clearCofactor().equals(d6.ZERO);
  }
  return m4._setWindowSize(8), { CURVE: e3, getPublicKey: ot3, sign: st2, verify: Ct3, ExtendedPoint: d6, utils: { getExtendedPublicKey: O7, randomPrivateKey: () => a4(n6.BYTES), precompute(y7 = 8, f9 = d6.BASE) {
    return f9._setWindowSize(y7), f9.multiply(BigInt(3)), f9;
  } } };
}
BigInt(0), BigInt(1);
var kt = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var Ue = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
BigInt(0);
var xr = BigInt(1);
var Te = BigInt(2);
BigInt(3);
var Br = BigInt(5);
var Cr = BigInt(8);
function Ar(t2) {
  const e3 = BigInt(10), n6 = BigInt(20), r4 = BigInt(40), o6 = BigInt(80), s4 = kt, u5 = t2 * t2 % s4 * t2 % s4, i6 = J2(u5, Te, s4) * u5 % s4, D3 = J2(i6, xr, s4) * t2 % s4, c8 = J2(D3, Br, s4) * D3 % s4, l9 = J2(c8, e3, s4) * c8 % s4, p6 = J2(l9, n6, s4) * l9 % s4, w6 = J2(p6, r4, s4) * p6 % s4, h7 = J2(w6, o6, s4) * w6 % s4, g4 = J2(h7, o6, s4) * w6 % s4, S5 = J2(g4, e3, s4) * c8 % s4;
  return { pow_p_5_8: J2(S5, Te, s4) * t2 % s4, b2: u5 };
}
function mr(t2) {
  return t2[0] &= 248, t2[31] &= 127, t2[31] |= 64, t2;
}
function _r(t2, e3) {
  const n6 = kt, r4 = H(e3 * e3 * e3, n6), o6 = H(r4 * r4 * e3, n6), s4 = Ar(t2 * o6).pow_p_5_8;
  let a4 = H(t2 * r4 * s4, n6);
  const u5 = H(e3 * a4 * a4, n6), i6 = a4, D3 = H(a4 * Ue, n6), c8 = u5 === t2, l9 = u5 === H(-t2, n6), p6 = u5 === H(-t2 * Ue, n6);
  return c8 && (a4 = i6), (l9 || p6) && (a4 = D3), ur(a4, n6) && (a4 = H(-a4, n6)), { isValid: c8 || l9, value: a4 };
}
var Sr = (() => _e(kt, void 0, true))();
var vr = (() => ({ a: BigInt(-1), d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"), Fp: Sr, n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"), h: Cr, Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"), Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"), hash: Kn, randomBytes: he, adjustScalarBytes: mr, uvRatio: _r }))();
var Rt = (() => yr(vr))();
var jt = "EdDSA";
var Zt = "JWT";
var ut = ".";
var Dt = "base64url";
var Gt = "utf8";
var xt = "utf8";
var Vt = ":";
var Yt = "did";
var Jt = "key";
var dt = "base58btc";
var Kt = "z";
var Wt = "K36";
var Ne = 32;
function Xt(t2) {
  return globalThis.Buffer != null ? new Uint8Array(t2.buffer, t2.byteOffset, t2.byteLength) : t2;
}
function Le(t2 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Xt(globalThis.Buffer.allocUnsafe(t2)) : new Uint8Array(t2);
}
function Oe(t2, e3) {
  e3 || (e3 = t2.reduce((o6, s4) => o6 + s4.length, 0));
  const n6 = Le(e3);
  let r4 = 0;
  for (const o6 of t2) n6.set(o6, r4), r4 += o6.length;
  return Xt(n6);
}
function Ir(t2, e3) {
  if (t2.length >= 255) throw new TypeError("Alphabet too long");
  for (var n6 = new Uint8Array(256), r4 = 0; r4 < n6.length; r4++) n6[r4] = 255;
  for (var o6 = 0; o6 < t2.length; o6++) {
    var s4 = t2.charAt(o6), a4 = s4.charCodeAt(0);
    if (n6[a4] !== 255) throw new TypeError(s4 + " is ambiguous");
    n6[a4] = o6;
  }
  var u5 = t2.length, i6 = t2.charAt(0), D3 = Math.log(u5) / Math.log(256), c8 = Math.log(256) / Math.log(u5);
  function l9(h7) {
    if (h7 instanceof Uint8Array || (ArrayBuffer.isView(h7) ? h7 = new Uint8Array(h7.buffer, h7.byteOffset, h7.byteLength) : Array.isArray(h7) && (h7 = Uint8Array.from(h7))), !(h7 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (h7.length === 0) return "";
    for (var g4 = 0, S5 = 0, v6 = 0, L5 = h7.length; v6 !== L5 && h7[v6] === 0; ) v6++, g4++;
    for (var d6 = (L5 - v6) * c8 + 1 >>> 0, m4 = new Uint8Array(d6); v6 !== L5; ) {
      for (var F4 = h7[v6], q2 = 0, z4 = d6 - 1; (F4 !== 0 || q2 < S5) && z4 !== -1; z4--, q2++) F4 += 256 * m4[z4] >>> 0, m4[z4] = F4 % u5 >>> 0, F4 = F4 / u5 >>> 0;
      if (F4 !== 0) throw new Error("Non-zero carry");
      S5 = q2, v6++;
    }
    for (var I5 = d6 - S5; I5 !== d6 && m4[I5] === 0; ) I5++;
    for (var O7 = i6.repeat(g4); I5 < d6; ++I5) O7 += t2.charAt(m4[I5]);
    return O7;
  }
  function p6(h7) {
    if (typeof h7 != "string") throw new TypeError("Expected String");
    if (h7.length === 0) return new Uint8Array();
    var g4 = 0;
    if (h7[g4] !== " ") {
      for (var S5 = 0, v6 = 0; h7[g4] === i6; ) S5++, g4++;
      for (var L5 = (h7.length - g4) * D3 + 1 >>> 0, d6 = new Uint8Array(L5); h7[g4]; ) {
        var m4 = n6[h7.charCodeAt(g4)];
        if (m4 === 255) return;
        for (var F4 = 0, q2 = L5 - 1; (m4 !== 0 || F4 < v6) && q2 !== -1; q2--, F4++) m4 += u5 * d6[q2] >>> 0, d6[q2] = m4 % 256 >>> 0, m4 = m4 / 256 >>> 0;
        if (m4 !== 0) throw new Error("Non-zero carry");
        v6 = F4, g4++;
      }
      if (h7[g4] !== " ") {
        for (var z4 = L5 - v6; z4 !== L5 && d6[z4] === 0; ) z4++;
        for (var I5 = new Uint8Array(S5 + (L5 - z4)), O7 = S5; z4 !== L5; ) I5[O7++] = d6[z4++];
        return I5;
      }
    }
  }
  function w6(h7) {
    var g4 = p6(h7);
    if (g4) return g4;
    throw new Error(`Non-${e3} character`);
  }
  return { encode: l9, decodeUnsafe: p6, decode: w6 };
}
var Ur = Ir;
var Tr = Ur;
var He = (t2) => {
  if (t2 instanceof Uint8Array && t2.constructor.name === "Uint8Array") return t2;
  if (t2 instanceof ArrayBuffer) return new Uint8Array(t2);
  if (ArrayBuffer.isView(t2)) return new Uint8Array(t2.buffer, t2.byteOffset, t2.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var Fr = (t2) => new TextEncoder().encode(t2);
var Nr = (t2) => new TextDecoder().decode(t2);
var Lr = class {
  constructor(e3, n6, r4) {
    this.name = e3, this.prefix = n6, this.baseEncode = r4;
  }
  encode(e3) {
    if (e3 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e3)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var Or = class {
  constructor(e3, n6, r4) {
    if (this.name = e3, this.prefix = n6, n6.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = n6.codePointAt(0), this.baseDecode = r4;
  }
  decode(e3) {
    if (typeof e3 == "string") {
      if (e3.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e3)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e3.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e3) {
    return ze(this, e3);
  }
};
var Hr = class {
  constructor(e3) {
    this.decoders = e3;
  }
  or(e3) {
    return ze(this, e3);
  }
  decode(e3) {
    const n6 = e3[0], r4 = this.decoders[n6];
    if (r4) return r4.decode(e3);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e3)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ze = (t2, e3) => new Hr({ ...t2.decoders || { [t2.prefix]: t2 }, ...e3.decoders || { [e3.prefix]: e3 } });
var zr = class {
  constructor(e3, n6, r4, o6) {
    this.name = e3, this.prefix = n6, this.baseEncode = r4, this.baseDecode = o6, this.encoder = new Lr(e3, n6, r4), this.decoder = new Or(e3, n6, o6);
  }
  encode(e3) {
    return this.encoder.encode(e3);
  }
  decode(e3) {
    return this.decoder.decode(e3);
  }
};
var Bt = ({ name: t2, prefix: e3, encode: n6, decode: r4 }) => new zr(t2, e3, n6, r4);
var ht = ({ prefix: t2, name: e3, alphabet: n6 }) => {
  const { encode: r4, decode: o6 } = Tr(n6, e3);
  return Bt({ prefix: t2, name: e3, encode: r4, decode: (s4) => He(o6(s4)) });
};
var Mr = (t2, e3, n6, r4) => {
  const o6 = {};
  for (let c8 = 0; c8 < e3.length; ++c8) o6[e3[c8]] = c8;
  let s4 = t2.length;
  for (; t2[s4 - 1] === "="; ) --s4;
  const a4 = new Uint8Array(s4 * n6 / 8 | 0);
  let u5 = 0, i6 = 0, D3 = 0;
  for (let c8 = 0; c8 < s4; ++c8) {
    const l9 = o6[t2[c8]];
    if (l9 === void 0) throw new SyntaxError(`Non-${r4} character`);
    i6 = i6 << n6 | l9, u5 += n6, u5 >= 8 && (u5 -= 8, a4[D3++] = 255 & i6 >> u5);
  }
  if (u5 >= n6 || 255 & i6 << 8 - u5) throw new SyntaxError("Unexpected end of data");
  return a4;
};
var qr = (t2, e3, n6) => {
  const r4 = e3[e3.length - 1] === "=", o6 = (1 << n6) - 1;
  let s4 = "", a4 = 0, u5 = 0;
  for (let i6 = 0; i6 < t2.length; ++i6) for (u5 = u5 << 8 | t2[i6], a4 += 8; a4 > n6; ) a4 -= n6, s4 += e3[o6 & u5 >> a4];
  if (a4 && (s4 += e3[o6 & u5 << n6 - a4]), r4) for (; s4.length * n6 & 7; ) s4 += "=";
  return s4;
};
var k4 = ({ name: t2, prefix: e3, bitsPerChar: n6, alphabet: r4 }) => Bt({ prefix: e3, name: t2, encode(o6) {
  return qr(o6, r4, n6);
}, decode(o6) {
  return Mr(o6, r4, n6, t2);
} });
var $r = Bt({ prefix: "\0", name: "identity", encode: (t2) => Nr(t2), decode: (t2) => Fr(t2) });
var kr = Object.freeze({ __proto__: null, identity: $r });
var Rr = k4({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var jr = Object.freeze({ __proto__: null, base2: Rr });
var Zr = k4({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Gr = Object.freeze({ __proto__: null, base8: Zr });
var Vr = ht({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Yr = Object.freeze({ __proto__: null, base10: Vr });
var Jr = k4({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Kr = k4({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Wr = Object.freeze({ __proto__: null, base16: Jr, base16upper: Kr });
var Xr = k4({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Pr = k4({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Qr = k4({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var to = k4({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var eo = k4({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var no = k4({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var ro = k4({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var oo = k4({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var so = k4({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var io = Object.freeze({ __proto__: null, base32: Xr, base32upper: Pr, base32pad: Qr, base32padupper: to, base32hex: eo, base32hexupper: no, base32hexpad: ro, base32hexpadupper: oo, base32z: so });
var uo = ht({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var co = ht({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var ao = Object.freeze({ __proto__: null, base36: uo, base36upper: co });
var fo = ht({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Do = ht({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var ho = Object.freeze({ __proto__: null, base58btc: fo, base58flickr: Do });
var lo = k4({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var bo = k4({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var po = k4({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var wo = k4({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Eo = Object.freeze({ __proto__: null, base64: lo, base64pad: bo, base64url: po, base64urlpad: wo });
var Me = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var go = Me.reduce((t2, e3, n6) => (t2[n6] = e3, t2), []);
var yo = Me.reduce((t2, e3, n6) => (t2[e3.codePointAt(0)] = n6, t2), []);
function xo(t2) {
  return t2.reduce((e3, n6) => (e3 += go[n6], e3), "");
}
function Bo(t2) {
  const e3 = [];
  for (const n6 of t2) {
    const r4 = yo[n6.codePointAt(0)];
    if (r4 === void 0) throw new Error(`Non-base256emoji character: ${n6}`);
    e3.push(r4);
  }
  return new Uint8Array(e3);
}
var Co = Bt({ prefix: "🚀", name: "base256emoji", encode: xo, decode: Bo });
var Ao = Object.freeze({ __proto__: null, base256emoji: Co });
var mo = $e;
var qe = 128;
var _o = 127;
var So = ~_o;
var vo = Math.pow(2, 31);
function $e(t2, e3, n6) {
  e3 = e3 || [], n6 = n6 || 0;
  for (var r4 = n6; t2 >= vo; ) e3[n6++] = t2 & 255 | qe, t2 /= 128;
  for (; t2 & So; ) e3[n6++] = t2 & 255 | qe, t2 >>>= 7;
  return e3[n6] = t2 | 0, $e.bytes = n6 - r4 + 1, e3;
}
var Io = Pt;
var Uo = 128;
var ke = 127;
function Pt(t2, r4) {
  var n6 = 0, r4 = r4 || 0, o6 = 0, s4 = r4, a4, u5 = t2.length;
  do {
    if (s4 >= u5) throw Pt.bytes = 0, new RangeError("Could not decode varint");
    a4 = t2[s4++], n6 += o6 < 28 ? (a4 & ke) << o6 : (a4 & ke) * Math.pow(2, o6), o6 += 7;
  } while (a4 >= Uo);
  return Pt.bytes = s4 - r4, n6;
}
var To = Math.pow(2, 7);
var Fo = Math.pow(2, 14);
var No = Math.pow(2, 21);
var Lo = Math.pow(2, 28);
var Oo = Math.pow(2, 35);
var Ho = Math.pow(2, 42);
var zo = Math.pow(2, 49);
var Mo = Math.pow(2, 56);
var qo = Math.pow(2, 63);
var $o = function(t2) {
  return t2 < To ? 1 : t2 < Fo ? 2 : t2 < No ? 3 : t2 < Lo ? 4 : t2 < Oo ? 5 : t2 < Ho ? 6 : t2 < zo ? 7 : t2 < Mo ? 8 : t2 < qo ? 9 : 10;
};
var ko = { encode: mo, decode: Io, encodingLength: $o };
var Re = ko;
var je = (t2, e3, n6 = 0) => (Re.encode(t2, e3, n6), e3);
var Ze = (t2) => Re.encodingLength(t2);
var Qt = (t2, e3) => {
  const n6 = e3.byteLength, r4 = Ze(t2), o6 = r4 + Ze(n6), s4 = new Uint8Array(o6 + n6);
  return je(t2, s4, 0), je(n6, s4, r4), s4.set(e3, o6), new Ro(t2, n6, e3, s4);
};
var Ro = class {
  constructor(e3, n6, r4, o6) {
    this.code = e3, this.size = n6, this.digest = r4, this.bytes = o6;
  }
};
var Ge = ({ name: t2, code: e3, encode: n6 }) => new jo(t2, e3, n6);
var jo = class {
  constructor(e3, n6, r4) {
    this.name = e3, this.code = n6, this.encode = r4;
  }
  digest(e3) {
    if (e3 instanceof Uint8Array) {
      const n6 = this.encode(e3);
      return n6 instanceof Uint8Array ? Qt(this.code, n6) : n6.then((r4) => Qt(this.code, r4));
    } else throw Error("Unknown type, must be binary type");
  }
};
var Ve = (t2) => async (e3) => new Uint8Array(await crypto.subtle.digest(t2, e3));
var Zo = Ge({ name: "sha2-256", code: 18, encode: Ve("SHA-256") });
var Go = Ge({ name: "sha2-512", code: 19, encode: Ve("SHA-512") });
var Vo = Object.freeze({ __proto__: null, sha256: Zo, sha512: Go });
var Ye = 0;
var Yo = "identity";
var Je = He;
var Jo = (t2) => Qt(Ye, Je(t2));
var Ko = { code: Ye, name: Yo, encode: Je, digest: Jo };
var Wo = Object.freeze({ __proto__: null, identity: Ko });
new TextEncoder(), new TextDecoder();
var Ke = { ...kr, ...jr, ...Gr, ...Yr, ...Wr, ...io, ...ao, ...ho, ...Eo, ...Ao };
({ ...Vo, ...Wo });
function We(t2, e3, n6, r4) {
  return { name: t2, prefix: e3, encoder: { name: t2, prefix: e3, encode: n6 }, decoder: { decode: r4 } };
}
var Xe = We("utf8", "u", (t2) => "u" + new TextDecoder("utf8").decode(t2), (t2) => new TextEncoder().encode(t2.substring(1)));
var te = We("ascii", "a", (t2) => {
  let e3 = "a";
  for (let n6 = 0; n6 < t2.length; n6++) e3 += String.fromCharCode(t2[n6]);
  return e3;
}, (t2) => {
  t2 = t2.substring(1);
  const e3 = Le(t2.length);
  for (let n6 = 0; n6 < t2.length; n6++) e3[n6] = t2.charCodeAt(n6);
  return e3;
});
var Pe = { utf8: Xe, "utf-8": Xe, hex: Ke.base16, latin1: te, ascii: te, binary: te, ...Ke };
function ct(t2, e3 = "utf8") {
  const n6 = Pe[e3];
  if (!n6) throw new Error(`Unsupported encoding "${e3}"`);
  return (e3 === "utf8" || e3 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(t2.buffer, t2.byteOffset, t2.byteLength).toString("utf8") : n6.encoder.encode(t2).substring(1);
}
function rt(t2, e3 = "utf8") {
  const n6 = Pe[e3];
  if (!n6) throw new Error(`Unsupported encoding "${e3}"`);
  return (e3 === "utf8" || e3 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Xt(globalThis.Buffer.from(t2, "utf-8")) : n6.decoder.decode(`${n6.prefix}${t2}`);
}
function lt(t2) {
  return safeJsonParse(ct(rt(t2, Dt), Gt));
}
function bt(t2) {
  return ct(rt(safeJsonStringify(t2), Gt), Dt);
}
function Qe(t2) {
  const e3 = rt(Wt, dt), n6 = Kt + ct(Oe([e3, t2]), dt);
  return [Yt, Jt, n6].join(Vt);
}
function en(t2) {
  return ct(t2, Dt);
}
function nn(t2) {
  return rt(t2, Dt);
}
function rn(t2) {
  return rt([bt(t2.header), bt(t2.payload)].join(ut), xt);
}
function on(t2) {
  return [bt(t2.header), bt(t2.payload), en(t2.signature)].join(ut);
}
function sn(t2) {
  const e3 = t2.split(ut), n6 = lt(e3[0]), r4 = lt(e3[1]), o6 = nn(e3[2]), s4 = rt(e3.slice(0, 2).join(ut), xt);
  return { header: n6, payload: r4, signature: o6, data: s4 };
}
function Po(t2 = he(Ne)) {
  const e3 = Rt.getPublicKey(t2);
  return { secretKey: Oe([t2, e3]), publicKey: e3 };
}
async function Qo(t2, e3, n6, r4, o6 = (0, import_time2.fromMiliseconds)(Date.now())) {
  const s4 = { alg: jt, typ: Zt }, a4 = Qe(r4.publicKey), u5 = o6 + n6, i6 = { iss: a4, sub: t2, aud: e3, iat: o6, exp: u5 }, D3 = rn({ header: s4, payload: i6 }), c8 = Rt.sign(D3, r4.secretKey.slice(0, 32));
  return on({ header: s4, payload: i6, signature: c8 });
}

// node_modules/detect-browser/es/index.js
var __spreadArray = function(to4, from8, pack) {
  if (pack || arguments.length === 2) for (var i6 = 0, l9 = from8.length, ar3; i6 < l9; i6++) {
    if (ar3 || !(i6 in from8)) {
      if (!ar3) ar3 = Array.prototype.slice.call(from8, 0, i6);
      ar3[i6] = from8[i6];
    }
  }
  return to4.concat(ar3 || Array.prototype.slice.call(from8));
};
var BrowserInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function BrowserInfo2(name2, version2, os2) {
      this.name = name2;
      this.version = version2;
      this.os = os2;
      this.type = "browser";
    }
    return BrowserInfo2;
  }()
);
var NodeInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function NodeInfo2(version2) {
      this.version = version2;
      this.type = "node";
      this.name = "node";
      this.os = process.platform;
    }
    return NodeInfo2;
  }()
);
var SearchBotDeviceInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function SearchBotDeviceInfo2(name2, version2, os2, bot) {
      this.name = name2;
      this.version = version2;
      this.os = os2;
      this.bot = bot;
      this.type = "bot-device";
    }
    return SearchBotDeviceInfo2;
  }()
);
var BotInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function BotInfo2() {
      this.type = "bot";
      this.bot = true;
      this.name = "bot";
      this.version = null;
      this.os = null;
    }
    return BotInfo2;
  }()
);
var ReactNativeInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function ReactNativeInfo2() {
      this.type = "react-native";
      this.name = "react-native";
      this.version = null;
      this.os = null;
    }
    return ReactNativeInfo2;
  }()
);
var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS = 3;
var userAgentRules = [
  ["aol", /AOLShield\/([0-9\._]+)/],
  ["edge", /Edge\/([0-9\._]+)/],
  ["edge-ios", /EdgiOS\/([0-9\._]+)/],
  ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
  ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
  ["samsung", /SamsungBrowser\/([0-9\.]+)/],
  ["silk", /\bSilk\/([0-9._-]+)\b/],
  ["miui", /MiuiBrowser\/([0-9\.]+)$/],
  ["beaker", /BeakerBrowser\/([0-9\.]+)/],
  ["edge-chromium", /EdgA?\/([0-9\.]+)/],
  [
    "chromium-webview",
    /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
  ],
  ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
  ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
  ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
  ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
  ["fxios", /FxiOS\/([0-9\.]+)/],
  ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
  ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
  ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
  ["pie", /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],
  ["pie", /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],
  ["netfront", /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],
  ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
  ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
  ["ie", /MSIE\s(7\.0)/],
  ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
  ["android", /Android\s([0-9\.]+)/],
  ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
  ["safari", /Version\/([0-9\._]+).*Safari/],
  ["facebook", /FB[AS]V\/([0-9\.]+)/],
  ["instagram", /Instagram\s([0-9\.]+)/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
  ["curl", /^curl\/([0-9\.]+)$/],
  ["searchbot", SEARCHBOX_UA_REGEX]
];
var operatingSystemRules = [
  ["iOS", /iP(hone|od|ad)/],
  ["Android OS", /Android/],
  ["BlackBerry OS", /BlackBerry|BB10/],
  ["Windows Mobile", /IEMobile/],
  ["Amazon OS", /Kindle/],
  ["Windows 3.11", /Win16/],
  ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
  ["Windows 98", /(Windows 98)|(Win98)/],
  ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
  ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
  ["Windows Server 2003", /(Windows NT 5.2)/],
  ["Windows Vista", /(Windows NT 6.0)/],
  ["Windows 7", /(Windows NT 6.1)/],
  ["Windows 8", /(Windows NT 6.2)/],
  ["Windows 8.1", /(Windows NT 6.3)/],
  ["Windows 10", /(Windows NT 10.0)/],
  ["Windows ME", /Windows ME/],
  ["Windows CE", /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],
  ["Open BSD", /OpenBSD/],
  ["Sun OS", /SunOS/],
  ["Chrome OS", /CrOS/],
  ["Linux", /(Linux)|(X11)/],
  ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
  ["QNX", /QNX/],
  ["BeOS", /BeOS/],
  ["OS/2", /OS\/2/]
];
function detect(userAgent) {
  if (!!userAgent) {
    return parseUserAgent(userAgent);
  }
  if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
    return new ReactNativeInfo();
  }
  if (typeof navigator !== "undefined") {
    return parseUserAgent(navigator.userAgent);
  }
  return getNodeVersion();
}
function matchUserAgent(ua2) {
  return ua2 !== "" && userAgentRules.reduce(function(matched, _a2) {
    var browser = _a2[0], regex = _a2[1];
    if (matched) {
      return matched;
    }
    var uaMatch = regex.exec(ua2);
    return !!uaMatch && [browser, uaMatch];
  }, false);
}
function parseUserAgent(ua2) {
  var matchedRule = matchUserAgent(ua2);
  if (!matchedRule) {
    return null;
  }
  var name2 = matchedRule[0], match = matchedRule[1];
  if (name2 === "searchbot") {
    return new BotInfo();
  }
  var versionParts = match[1] && match[1].split(".").join("_").split("_").slice(0, 3);
  if (versionParts) {
    if (versionParts.length < REQUIRED_VERSION_PARTS) {
      versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);
    }
  } else {
    versionParts = [];
  }
  var version2 = versionParts.join(".");
  var os2 = detectOS(ua2);
  var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua2);
  if (searchBotMatch && searchBotMatch[1]) {
    return new SearchBotDeviceInfo(name2, version2, os2, searchBotMatch[1]);
  }
  return new BrowserInfo(name2, version2, os2);
}
function detectOS(ua2) {
  for (var ii3 = 0, count = operatingSystemRules.length; ii3 < count; ii3++) {
    var _a2 = operatingSystemRules[ii3], os2 = _a2[0], regex = _a2[1];
    var match = regex.exec(ua2);
    if (match) {
      return os2;
    }
  }
  return null;
}
function getNodeVersion() {
  var isNode2 = typeof process !== "undefined" && process.version;
  return isNode2 ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
  var output = [];
  for (var ii3 = 0; ii3 < count; ii3++) {
    output.push("0");
  }
  return output;
}

// node_modules/@walletconnect/utils/dist/index.es.js
var import_time3 = __toESM(require_cjs());
var import_window_getters = __toESM(require_cjs2());
var import_window_metadata = __toESM(require_cjs3());

// node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js
function publicKeyToAddress(publicKey) {
  const address = keccak256(`0x${publicKey.substring(4)}`).substring(26);
  return checksumAddress(`0x${address}`);
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js
async function recoverPublicKey({ hash, signature }) {
  const hashHex = isHex(hash) ? hash : toHex(hash);
  const { secp256k1: secp256k12 } = await import("./secp256k1-2MJ2LSHL.js");
  const signature_ = (() => {
    if (typeof signature === "object" && "r" in signature && "s" in signature) {
      const { r: r4, s: s4, v: v6, yParity } = signature;
      const yParityOrV2 = Number(yParity ?? v6);
      const recoveryBit2 = toRecoveryBit(yParityOrV2);
      return new secp256k12.Signature(hexToBigInt(r4), hexToBigInt(s4)).addRecoveryBit(recoveryBit2);
    }
    const signatureHex = isHex(signature) ? signature : toHex(signature);
    if (size(signatureHex) !== 65)
      throw new Error("invalid signature length");
    const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`);
    const recoveryBit = toRecoveryBit(yParityOrV);
    return secp256k12.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);
  })();
  const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);
  return `0x${publicKey}`;
}
function toRecoveryBit(yParityOrV) {
  if (yParityOrV === 0 || yParityOrV === 1)
    return yParityOrV;
  if (yParityOrV === 27)
    return 0;
  if (yParityOrV === 28)
    return 1;
  throw new Error("Invalid yParityOrV value");
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js
async function recoverAddress({ hash, signature }) {
  return publicKeyToAddress(await recoverPublicKey({ hash, signature }));
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/transaction.js
var transactionType = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function formatTransaction(transaction) {
  const transaction_ = {
    ...transaction,
    blockHash: transaction.blockHash ? transaction.blockHash : null,
    blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
    chainId: transaction.chainId ? hexToNumber(transaction.chainId) : void 0,
    gas: transaction.gas ? BigInt(transaction.gas) : void 0,
    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
    maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
    maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
    nonce: transaction.nonce ? hexToNumber(transaction.nonce) : void 0,
    to: transaction.to ? transaction.to : null,
    transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
    type: transaction.type ? transactionType[transaction.type] : void 0,
    typeHex: transaction.type ? transaction.type : void 0,
    value: transaction.value ? BigInt(transaction.value) : void 0,
    v: transaction.v ? BigInt(transaction.v) : void 0
  };
  if (transaction.authorizationList)
    transaction_.authorizationList = formatAuthorizationList(transaction.authorizationList);
  transaction_.yParity = (() => {
    if (transaction.yParity)
      return Number(transaction.yParity);
    if (typeof transaction_.v === "bigint") {
      if (transaction_.v === 0n || transaction_.v === 27n)
        return 0;
      if (transaction_.v === 1n || transaction_.v === 28n)
        return 1;
      if (transaction_.v >= 35n)
        return transaction_.v % 2n === 0n ? 1 : 0;
    }
    return void 0;
  })();
  if (transaction_.type === "legacy") {
    delete transaction_.accessList;
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
    delete transaction_.yParity;
  }
  if (transaction_.type === "eip2930") {
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
  }
  if (transaction_.type === "eip1559") {
    delete transaction_.maxFeePerBlobGas;
  }
  return transaction_;
}
var defineTransaction = defineFormatter("transaction", formatTransaction);
function formatAuthorizationList(authorizationList) {
  return authorizationList.map((authorization) => ({
    address: authorization.address,
    chainId: Number(authorization.chainId),
    nonce: Number(authorization.nonce),
    r: authorization.r,
    s: authorization.s,
    yParity: Number(authorization.yParity)
  }));
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/block.js
function formatBlock(block) {
  const transactions = (block.transactions ?? []).map((transaction) => {
    if (typeof transaction === "string")
      return transaction;
    return formatTransaction(transaction);
  });
  return {
    ...block,
    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
    difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
    excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
    hash: block.hash ? block.hash : null,
    logsBloom: block.logsBloom ? block.logsBloom : null,
    nonce: block.nonce ? block.nonce : null,
    number: block.number ? BigInt(block.number) : null,
    size: block.size ? BigInt(block.size) : void 0,
    timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
    transactions,
    totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
  };
}
var defineBlock = defineFormatter("block", formatBlock);

// node_modules/@walletconnect/utils/node_modules/viem/_esm/actions/public/getTransactionCount.js
async function getTransactionCount(client, { address, blockTag = "latest", blockNumber }) {
  const count = await client.request({
    method: "eth_getTransactionCount",
    params: [
      address,
      typeof blockNumber === "bigint" ? numberToHex(blockNumber) : blockTag
    ]
  }, {
    dedupe: Boolean(blockNumber)
  });
  return hexToNumber(count);
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/constants/blob.js
var blobsPerTransaction = 6;
var bytesPerFieldElement = 32;
var fieldElementsPerBlob = 4096;
var bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;
var maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob * blobsPerTransaction;

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/log.js
function formatLog(log, { args, eventName } = {}) {
  return {
    ...log,
    blockHash: log.blockHash ? log.blockHash : null,
    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
    logIndex: log.logIndex ? Number(log.logIndex) : null,
    transactionHash: log.transactionHash ? log.transactionHash : null,
    transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
    ...eventName ? { args, eventName } : {}
  };
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/actions/wallet/sendTransaction.js
var supportsWalletNamespace = new LruMap(128);

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/transactionReceipt.js
var receiptStatuses = {
  "0x0": "reverted",
  "0x1": "success"
};
function formatTransactionReceipt(transactionReceipt) {
  const receipt = {
    ...transactionReceipt,
    blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
    contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
    effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
    gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
    logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog(log)) : null,
    to: transactionReceipt.to ? transactionReceipt.to : null,
    transactionIndex: transactionReceipt.transactionIndex ? hexToNumber(transactionReceipt.transactionIndex) : null,
    status: transactionReceipt.status ? receiptStatuses[transactionReceipt.status] : null,
    type: transactionReceipt.type ? transactionType[transactionReceipt.type] || transactionReceipt.type : null
  };
  if (transactionReceipt.blobGasPrice)
    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
  if (transactionReceipt.blobGasUsed)
    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
  return receipt;
}
var defineTransactionReceipt = defineFormatter("transactionReceipt", formatTransactionReceipt);

// node_modules/@walletconnect/utils/node_modules/viem/_esm/actions/wallet/sendCalls.js
var fallbackTransactionErrorMagicIdentifier = numberToHex(0, {
  size: 32
});

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/promise/withDedupe.js
var promiseCache = new LruMap(8192);

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/rpc/id.js
function createIdStore() {
  return {
    current: 0,
    take() {
      return this.current++;
    },
    reset() {
      this.current = 0;
    }
  };
}
var idCache = createIdStore();

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/nonceManager.js
function createNonceManager(parameters) {
  const { source } = parameters;
  const deltaMap = /* @__PURE__ */ new Map();
  const nonceMap = new LruMap(8192);
  const promiseMap = /* @__PURE__ */ new Map();
  const getKey = ({ address, chainId }) => `${address}.${chainId}`;
  return {
    async consume({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      const promise = this.get({ address, chainId, client });
      this.increment({ address, chainId });
      const nonce = await promise;
      await source.set({ address, chainId }, nonce);
      nonceMap.set(key, nonce);
      return nonce;
    },
    async increment({ address, chainId }) {
      const key = getKey({ address, chainId });
      const delta = deltaMap.get(key) ?? 0;
      deltaMap.set(key, delta + 1);
    },
    async get({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      let promise = promiseMap.get(key);
      if (!promise) {
        promise = (async () => {
          try {
            const nonce = await source.get({ address, chainId, client });
            const previousNonce = nonceMap.get(key) ?? 0;
            if (previousNonce > 0 && nonce <= previousNonce)
              return previousNonce + 1;
            nonceMap.delete(key);
            return nonce;
          } finally {
            this.reset({ address, chainId });
          }
        })();
        promiseMap.set(key, promise);
      }
      const delta = deltaMap.get(key) ?? 0;
      return delta + await promise;
    },
    reset({ address, chainId }) {
      const key = getKey({ address, chainId });
      deltaMap.delete(key);
      promiseMap.delete(key);
    }
  };
}
function jsonRpc() {
  return {
    async get(parameters) {
      const { address, client } = parameters;
      return getTransactionCount(client, {
        address,
        blockTag: "pending"
      });
    },
    set() {
    }
  };
}
var nonceManager = createNonceManager({
  source: jsonRpc()
});

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Hash.js
function keccak2562(value, options = {}) {
  const { as: as2 = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_256(from(value));
  if (as2 === "Bytes")
    return bytes;
  return fromBytes(bytes);
}

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/internal/lru.js
var LruMap2 = class extends Map {
  constructor(size4) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size4;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Caches.js
var caches = {
  checksum: new LruMap2(8192)
};
var checksum = caches.checksum;

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Address.js
var addressRegex = /^0x[a-fA-F0-9]{40}$/;
function assert(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex.test(value))
    throw new InvalidAddressError2({
      address: value,
      cause: new InvalidInputError()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum2(value) !== value)
      throw new InvalidAddressError2({
        address: value,
        cause: new InvalidChecksumError()
      });
  }
}
function checksum2(address) {
  if (checksum.has(address))
    return checksum.get(address);
  assert(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash = keccak2562(fromString(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i6 = 0; i6 < 40; i6 += 2) {
    if (hash[i6 >> 1] >> 4 >= 8 && characters[i6]) {
      characters[i6] = characters[i6].toUpperCase();
    }
    if ((hash[i6 >> 1] & 15) >= 8 && characters[i6 + 1]) {
      characters[i6 + 1] = characters[i6 + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum.set(address, result);
  return result;
}
var InvalidAddressError2 = class extends BaseError {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError = class extends BaseError {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError = class extends BaseError {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Solidity.js
var arrayRegex2 = /^(.*)\[([0-9]*)\]$/;
var bytesRegex2 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex2 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt8 = 2n ** (8n - 1n) - 1n;
var maxInt16 = 2n ** (16n - 1n) - 1n;
var maxInt24 = 2n ** (24n - 1n) - 1n;
var maxInt32 = 2n ** (32n - 1n) - 1n;
var maxInt40 = 2n ** (40n - 1n) - 1n;
var maxInt48 = 2n ** (48n - 1n) - 1n;
var maxInt56 = 2n ** (56n - 1n) - 1n;
var maxInt64 = 2n ** (64n - 1n) - 1n;
var maxInt72 = 2n ** (72n - 1n) - 1n;
var maxInt80 = 2n ** (80n - 1n) - 1n;
var maxInt88 = 2n ** (88n - 1n) - 1n;
var maxInt96 = 2n ** (96n - 1n) - 1n;
var maxInt104 = 2n ** (104n - 1n) - 1n;
var maxInt112 = 2n ** (112n - 1n) - 1n;
var maxInt120 = 2n ** (120n - 1n) - 1n;
var maxInt128 = 2n ** (128n - 1n) - 1n;
var maxInt136 = 2n ** (136n - 1n) - 1n;
var maxInt144 = 2n ** (144n - 1n) - 1n;
var maxInt152 = 2n ** (152n - 1n) - 1n;
var maxInt160 = 2n ** (160n - 1n) - 1n;
var maxInt168 = 2n ** (168n - 1n) - 1n;
var maxInt176 = 2n ** (176n - 1n) - 1n;
var maxInt184 = 2n ** (184n - 1n) - 1n;
var maxInt192 = 2n ** (192n - 1n) - 1n;
var maxInt200 = 2n ** (200n - 1n) - 1n;
var maxInt208 = 2n ** (208n - 1n) - 1n;
var maxInt216 = 2n ** (216n - 1n) - 1n;
var maxInt224 = 2n ** (224n - 1n) - 1n;
var maxInt232 = 2n ** (232n - 1n) - 1n;
var maxInt240 = 2n ** (240n - 1n) - 1n;
var maxInt248 = 2n ** (248n - 1n) - 1n;
var maxInt256 = 2n ** (256n - 1n) - 1n;
var minInt8 = -(2n ** (8n - 1n));
var minInt16 = -(2n ** (16n - 1n));
var minInt24 = -(2n ** (24n - 1n));
var minInt32 = -(2n ** (32n - 1n));
var minInt40 = -(2n ** (40n - 1n));
var minInt48 = -(2n ** (48n - 1n));
var minInt56 = -(2n ** (56n - 1n));
var minInt64 = -(2n ** (64n - 1n));
var minInt72 = -(2n ** (72n - 1n));
var minInt80 = -(2n ** (80n - 1n));
var minInt88 = -(2n ** (88n - 1n));
var minInt96 = -(2n ** (96n - 1n));
var minInt104 = -(2n ** (104n - 1n));
var minInt112 = -(2n ** (112n - 1n));
var minInt120 = -(2n ** (120n - 1n));
var minInt128 = -(2n ** (128n - 1n));
var minInt136 = -(2n ** (136n - 1n));
var minInt144 = -(2n ** (144n - 1n));
var minInt152 = -(2n ** (152n - 1n));
var minInt160 = -(2n ** (160n - 1n));
var minInt168 = -(2n ** (168n - 1n));
var minInt176 = -(2n ** (176n - 1n));
var minInt184 = -(2n ** (184n - 1n));
var minInt192 = -(2n ** (192n - 1n));
var minInt200 = -(2n ** (200n - 1n));
var minInt208 = -(2n ** (208n - 1n));
var minInt216 = -(2n ** (216n - 1n));
var minInt224 = -(2n ** (224n - 1n));
var minInt232 = -(2n ** (232n - 1n));
var minInt240 = -(2n ** (240n - 1n));
var minInt248 = -(2n ** (248n - 1n));
var minInt256 = -(2n ** (256n - 1n));
var maxUint8 = 2n ** 8n - 1n;
var maxUint16 = 2n ** 16n - 1n;
var maxUint24 = 2n ** 24n - 1n;
var maxUint32 = 2n ** 32n - 1n;
var maxUint40 = 2n ** 40n - 1n;
var maxUint48 = 2n ** 48n - 1n;
var maxUint56 = 2n ** 56n - 1n;
var maxUint64 = 2n ** 64n - 1n;
var maxUint72 = 2n ** 72n - 1n;
var maxUint80 = 2n ** 80n - 1n;
var maxUint88 = 2n ** 88n - 1n;
var maxUint96 = 2n ** 96n - 1n;
var maxUint104 = 2n ** 104n - 1n;
var maxUint112 = 2n ** 112n - 1n;
var maxUint120 = 2n ** 120n - 1n;
var maxUint128 = 2n ** 128n - 1n;
var maxUint136 = 2n ** 136n - 1n;
var maxUint144 = 2n ** 144n - 1n;
var maxUint152 = 2n ** 152n - 1n;
var maxUint160 = 2n ** 160n - 1n;
var maxUint168 = 2n ** 168n - 1n;
var maxUint176 = 2n ** 176n - 1n;
var maxUint184 = 2n ** 184n - 1n;
var maxUint192 = 2n ** 192n - 1n;
var maxUint200 = 2n ** 200n - 1n;
var maxUint208 = 2n ** 208n - 1n;
var maxUint216 = 2n ** 216n - 1n;
var maxUint224 = 2n ** 224n - 1n;
var maxUint232 = 2n ** 232n - 1n;
var maxUint240 = 2n ** 240n - 1n;
var maxUint248 = 2n ** 248n - 1n;
var maxUint2562 = 2n ** 256n - 1n;

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/internal/cursor.js
var staticCursor = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError2({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length2, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length2 - 1);
    return this.bytes.subarray(position, position + length2);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length2, size4) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length2);
    this.position += size4 ?? length2;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
var NegativeOffsetError = class extends BaseError {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError2 = class extends BaseError {
  constructor({ length: length2, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length2}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError = class extends BaseError {
  constructor({ count, limit }) {
    super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/AbiParameters.js
function encodePacked2(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i6 = 0; i6 < types.length; i6++) {
    const type = types[i6];
    const value = values[i6];
    data.push(encodePacked2.encode(type, value));
  }
  return concat(...data);
}
(function(encodePacked3) {
  function encode9(type, value, isArray = false) {
    if (type === "address") {
      const address = value;
      assert(address);
      return padLeft(address.toLowerCase(), isArray ? 32 : 0);
    }
    if (type === "string")
      return fromString2(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft(fromBoolean(value), isArray ? 32 : 1);
    const intMatch = type.match(integerRegex2);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size4 = Number.parseInt(bits) / 8;
      return fromNumber(value, {
        size: isArray ? 32 : size4,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex2);
    if (bytesMatch) {
      const [_type, size4] = bytesMatch;
      if (Number.parseInt(size4) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError2({
          expectedSize: Number.parseInt(size4),
          value
        });
      return padRight(value, isArray ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex2);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i6 = 0; i6 < value.length; i6++) {
        data.push(encode9(childType, value[i6], true));
      }
      if (data.length === 0)
        return "0x";
      return concat(...data);
    }
    throw new InvalidTypeError(type);
  }
  encodePacked3.encode = encode9;
})(encodePacked2 || (encodePacked2 = {}));
var BytesSizeMismatchError2 = class extends BaseError {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size2(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError = class extends BaseError {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidTypeError = class extends BaseError {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// node_modules/base-x/src/esm/index.js
function base(ALPHABET2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  const BASE_MAP = new Uint8Array(256);
  for (let j5 = 0; j5 < BASE_MAP.length; j5++) {
    BASE_MAP[j5] = 255;
  }
  for (let i6 = 0; i6 < ALPHABET2.length; i6++) {
    const x6 = ALPHABET2.charAt(i6);
    const xc2 = x6.charCodeAt(0);
    if (BASE_MAP[xc2] !== 255) {
      throw new TypeError(x6 + " is ambiguous");
    }
    BASE_MAP[xc2] = i6;
  }
  const BASE = ALPHABET2.length;
  const LEADER = ALPHABET2.charAt(0);
  const FACTOR = Math.log(BASE) / Math.log(256);
  const iFACTOR = Math.log(256) / Math.log(BASE);
  function encode9(source) {
    if (source instanceof Uint8Array) {
    } else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    let zeroes = 0;
    let length2 = 0;
    let pbegin = 0;
    const pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    const size4 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    const b58 = new Uint8Array(size4);
    while (pbegin !== pend) {
      let carry = source[pbegin];
      let i6 = 0;
      for (let it1 = size4 - 1; (carry !== 0 || i6 < length2) && it1 !== -1; it1--, i6++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i6;
      pbegin++;
    }
    let it22 = size4 - length2;
    while (it22 !== size4 && b58[it22] === 0) {
      it22++;
    }
    let str = LEADER.repeat(zeroes);
    for (; it22 < size4; ++it22) {
      str += ALPHABET2.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    let psz = 0;
    let zeroes = 0;
    let length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    const size4 = (source.length - psz) * FACTOR + 1 >>> 0;
    const b256 = new Uint8Array(size4);
    while (psz < source.length) {
      const charCode = source.charCodeAt(psz);
      if (charCode > 255) {
        return;
      }
      let carry = BASE_MAP[charCode];
      if (carry === 255) {
        return;
      }
      let i6 = 0;
      for (let it32 = size4 - 1; (carry !== 0 || i6 < length2) && it32 !== -1; it32--, i6++) {
        carry += BASE * b256[it32] >>> 0;
        b256[it32] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i6;
      psz++;
    }
    let it42 = size4 - length2;
    while (it42 !== size4 && b256[it42] === 0) {
      it42++;
    }
    const vch = new Uint8Array(zeroes + (size4 - it42));
    let j5 = zeroes;
    while (it42 !== size4) {
      vch[j5++] = b256[it42++];
    }
    return vch;
  }
  function decode8(string2) {
    const buffer = decodeUnsafe(string2);
    if (buffer) {
      return buffer;
    }
    throw new Error("Non-base" + BASE + " character");
  }
  return {
    encode: encode9,
    decodeUnsafe,
    decode: decode8
  };
}
var esm_default = base;

// node_modules/bs58/src/esm/index.js
var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var esm_default2 = esm_default(ALPHABET);

// node_modules/@msgpack/msgpack/dist.esm/utils/utf8.mjs
function utf8Count(str) {
  const strLength = str.length;
  let byteLength = 0;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      byteLength++;
      continue;
    } else if ((value & 4294965248) === 0) {
      byteLength += 2;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        byteLength += 3;
      } else {
        byteLength += 4;
      }
    }
  }
  return byteLength;
}
function utf8EncodeJs(str, output, outputOffset) {
  const strLength = str.length;
  let offset = outputOffset;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      output[offset++] = value;
      continue;
    } else if ((value & 4294965248) === 0) {
      output[offset++] = value >> 6 & 31 | 192;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        output[offset++] = value >> 12 & 15 | 224;
        output[offset++] = value >> 6 & 63 | 128;
      } else {
        output[offset++] = value >> 18 & 7 | 240;
        output[offset++] = value >> 12 & 63 | 128;
        output[offset++] = value >> 6 & 63 | 128;
      }
    }
    output[offset++] = value & 63 | 128;
  }
}
var sharedTextEncoder = new TextEncoder();
var TEXT_ENCODER_THRESHOLD = 50;
function utf8EncodeTE(str, output, outputOffset) {
  sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));
}
function utf8Encode(str, output, outputOffset) {
  if (str.length > TEXT_ENCODER_THRESHOLD) {
    utf8EncodeTE(str, output, outputOffset);
  } else {
    utf8EncodeJs(str, output, outputOffset);
  }
}
var CHUNK_SIZE = 4096;
function utf8DecodeJs(bytes, inputOffset, byteLength) {
  let offset = inputOffset;
  const end = offset + byteLength;
  const units = [];
  let result = "";
  while (offset < end) {
    const byte1 = bytes[offset++];
    if ((byte1 & 128) === 0) {
      units.push(byte1);
    } else if ((byte1 & 224) === 192) {
      const byte2 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 6 | byte2);
    } else if ((byte1 & 240) === 224) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 12 | byte2 << 6 | byte3);
    } else if ((byte1 & 248) === 240) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      const byte4 = bytes[offset++] & 63;
      let unit = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
      if (unit > 65535) {
        unit -= 65536;
        units.push(unit >>> 10 & 1023 | 55296);
        unit = 56320 | unit & 1023;
      }
      units.push(unit);
    } else {
      units.push(byte1);
    }
    if (units.length >= CHUNK_SIZE) {
      result += String.fromCharCode(...units);
      units.length = 0;
    }
  }
  if (units.length > 0) {
    result += String.fromCharCode(...units);
  }
  return result;
}
var sharedTextDecoder = new TextDecoder();
var TEXT_DECODER_THRESHOLD = 200;
function utf8DecodeTD(bytes, inputOffset, byteLength) {
  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);
  return sharedTextDecoder.decode(stringBytes);
}
function utf8Decode(bytes, inputOffset, byteLength) {
  if (byteLength > TEXT_DECODER_THRESHOLD) {
    return utf8DecodeTD(bytes, inputOffset, byteLength);
  } else {
    return utf8DecodeJs(bytes, inputOffset, byteLength);
  }
}

// node_modules/@msgpack/msgpack/dist.esm/ExtData.mjs
var ExtData = class {
  constructor(type, data) {
    this.type = type;
    this.data = data;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/DecodeError.mjs
var DecodeError = class _DecodeError extends Error {
  constructor(message) {
    super(message);
    const proto = Object.create(_DecodeError.prototype);
    Object.setPrototypeOf(this, proto);
    Object.defineProperty(this, "name", {
      configurable: true,
      enumerable: false,
      value: _DecodeError.name
    });
  }
};

// node_modules/@msgpack/msgpack/dist.esm/utils/int.mjs
var UINT32_MAX = 4294967295;
function setUint64(view, offset, value) {
  const high = value / 4294967296;
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function setInt64(view, offset, value) {
  const high = Math.floor(value / 4294967296);
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function getInt64(view, offset) {
  const high = view.getInt32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}
function getUint64(view, offset) {
  const high = view.getUint32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}

// node_modules/@msgpack/msgpack/dist.esm/timestamp.mjs
var EXT_TIMESTAMP = -1;
var TIMESTAMP32_MAX_SEC = 4294967296 - 1;
var TIMESTAMP64_MAX_SEC = 17179869184 - 1;
function encodeTimeSpecToTimestamp({ sec, nsec }) {
  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {
    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {
      const rv = new Uint8Array(4);
      const view = new DataView(rv.buffer);
      view.setUint32(0, sec);
      return rv;
    } else {
      const secHigh = sec / 4294967296;
      const secLow = sec & 4294967295;
      const rv = new Uint8Array(8);
      const view = new DataView(rv.buffer);
      view.setUint32(0, nsec << 2 | secHigh & 3);
      view.setUint32(4, secLow);
      return rv;
    }
  } else {
    const rv = new Uint8Array(12);
    const view = new DataView(rv.buffer);
    view.setUint32(0, nsec);
    setInt64(view, 4, sec);
    return rv;
  }
}
function encodeDateToTimeSpec(date) {
  const msec = date.getTime();
  const sec = Math.floor(msec / 1e3);
  const nsec = (msec - sec * 1e3) * 1e6;
  const nsecInSec = Math.floor(nsec / 1e9);
  return {
    sec: sec + nsecInSec,
    nsec: nsec - nsecInSec * 1e9
  };
}
function encodeTimestampExtension(object) {
  if (object instanceof Date) {
    const timeSpec = encodeDateToTimeSpec(object);
    return encodeTimeSpecToTimestamp(timeSpec);
  } else {
    return null;
  }
}
function decodeTimestampToTimeSpec(data) {
  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);
  switch (data.byteLength) {
    case 4: {
      const sec = view.getUint32(0);
      const nsec = 0;
      return { sec, nsec };
    }
    case 8: {
      const nsec30AndSecHigh2 = view.getUint32(0);
      const secLow32 = view.getUint32(4);
      const sec = (nsec30AndSecHigh2 & 3) * 4294967296 + secLow32;
      const nsec = nsec30AndSecHigh2 >>> 2;
      return { sec, nsec };
    }
    case 12: {
      const sec = getInt64(view, 4);
      const nsec = view.getUint32(0);
      return { sec, nsec };
    }
    default:
      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);
  }
}
function decodeTimestampExtension(data) {
  const timeSpec = decodeTimestampToTimeSpec(data);
  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);
}
var timestampExtension = {
  type: EXT_TIMESTAMP,
  encode: encodeTimestampExtension,
  decode: decodeTimestampExtension
};

// node_modules/@msgpack/msgpack/dist.esm/ExtensionCodec.mjs
var ExtensionCodec = class {
  constructor() {
    this.builtInEncoders = [];
    this.builtInDecoders = [];
    this.encoders = [];
    this.decoders = [];
    this.register(timestampExtension);
  }
  register({ type, encode: encode9, decode: decode8 }) {
    if (type >= 0) {
      this.encoders[type] = encode9;
      this.decoders[type] = decode8;
    } else {
      const index = -1 - type;
      this.builtInEncoders[index] = encode9;
      this.builtInDecoders[index] = decode8;
    }
  }
  tryToEncode(object, context) {
    for (let i6 = 0; i6 < this.builtInEncoders.length; i6++) {
      const encodeExt = this.builtInEncoders[i6];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = -1 - i6;
          return new ExtData(type, data);
        }
      }
    }
    for (let i6 = 0; i6 < this.encoders.length; i6++) {
      const encodeExt = this.encoders[i6];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = i6;
          return new ExtData(type, data);
        }
      }
    }
    if (object instanceof ExtData) {
      return object;
    }
    return null;
  }
  decode(data, type, context) {
    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];
    if (decodeExt) {
      return decodeExt(data, type, context);
    } else {
      return new ExtData(type, data);
    }
  }
};
ExtensionCodec.defaultCodec = new ExtensionCodec();

// node_modules/@msgpack/msgpack/dist.esm/utils/typedArrays.mjs
function isArrayBufferLike(buffer) {
  return buffer instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && buffer instanceof SharedArrayBuffer;
}
function ensureUint8Array(buffer) {
  if (buffer instanceof Uint8Array) {
    return buffer;
  } else if (ArrayBuffer.isView(buffer)) {
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
  } else if (isArrayBufferLike(buffer)) {
    return new Uint8Array(buffer);
  } else {
    return Uint8Array.from(buffer);
  }
}

// node_modules/@msgpack/msgpack/dist.esm/Encoder.mjs
var DEFAULT_MAX_DEPTH = 100;
var DEFAULT_INITIAL_BUFFER_SIZE = 2048;
var Encoder = class _Encoder {
  constructor(options) {
    this.entered = false;
    this.extensionCodec = (options == null ? void 0 : options.extensionCodec) ?? ExtensionCodec.defaultCodec;
    this.context = options == null ? void 0 : options.context;
    this.useBigInt64 = (options == null ? void 0 : options.useBigInt64) ?? false;
    this.maxDepth = (options == null ? void 0 : options.maxDepth) ?? DEFAULT_MAX_DEPTH;
    this.initialBufferSize = (options == null ? void 0 : options.initialBufferSize) ?? DEFAULT_INITIAL_BUFFER_SIZE;
    this.sortKeys = (options == null ? void 0 : options.sortKeys) ?? false;
    this.forceFloat32 = (options == null ? void 0 : options.forceFloat32) ?? false;
    this.ignoreUndefined = (options == null ? void 0 : options.ignoreUndefined) ?? false;
    this.forceIntegerToFloat = (options == null ? void 0 : options.forceIntegerToFloat) ?? false;
    this.pos = 0;
    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));
    this.bytes = new Uint8Array(this.view.buffer);
  }
  clone() {
    return new _Encoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      maxDepth: this.maxDepth,
      initialBufferSize: this.initialBufferSize,
      sortKeys: this.sortKeys,
      forceFloat32: this.forceFloat32,
      ignoreUndefined: this.ignoreUndefined,
      forceIntegerToFloat: this.forceIntegerToFloat
    });
  }
  reinitializeState() {
    this.pos = 0;
  }
  /**
   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.
   *
   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.
   */
  encodeSharedRef(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encodeSharedRef(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.subarray(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  /**
   * @returns Encodes the object and returns a copy of the encoder's internal buffer.
   */
  encode(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encode(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.slice(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  doEncode(object, depth) {
    if (depth > this.maxDepth) {
      throw new Error(`Too deep objects in depth ${depth}`);
    }
    if (object == null) {
      this.encodeNil();
    } else if (typeof object === "boolean") {
      this.encodeBoolean(object);
    } else if (typeof object === "number") {
      if (!this.forceIntegerToFloat) {
        this.encodeNumber(object);
      } else {
        this.encodeNumberAsFloat(object);
      }
    } else if (typeof object === "string") {
      this.encodeString(object);
    } else if (this.useBigInt64 && typeof object === "bigint") {
      this.encodeBigInt64(object);
    } else {
      this.encodeObject(object, depth);
    }
  }
  ensureBufferSizeToWrite(sizeToWrite) {
    const requiredSize = this.pos + sizeToWrite;
    if (this.view.byteLength < requiredSize) {
      this.resizeBuffer(requiredSize * 2);
    }
  }
  resizeBuffer(newSize) {
    const newBuffer = new ArrayBuffer(newSize);
    const newBytes = new Uint8Array(newBuffer);
    const newView = new DataView(newBuffer);
    newBytes.set(this.bytes);
    this.view = newView;
    this.bytes = newBytes;
  }
  encodeNil() {
    this.writeU8(192);
  }
  encodeBoolean(object) {
    if (object === false) {
      this.writeU8(194);
    } else {
      this.writeU8(195);
    }
  }
  encodeNumber(object) {
    if (!this.forceIntegerToFloat && Number.isSafeInteger(object)) {
      if (object >= 0) {
        if (object < 128) {
          this.writeU8(object);
        } else if (object < 256) {
          this.writeU8(204);
          this.writeU8(object);
        } else if (object < 65536) {
          this.writeU8(205);
          this.writeU16(object);
        } else if (object < 4294967296) {
          this.writeU8(206);
          this.writeU32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(207);
          this.writeU64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      } else {
        if (object >= -32) {
          this.writeU8(224 | object + 32);
        } else if (object >= -128) {
          this.writeU8(208);
          this.writeI8(object);
        } else if (object >= -32768) {
          this.writeU8(209);
          this.writeI16(object);
        } else if (object >= -2147483648) {
          this.writeU8(210);
          this.writeI32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(211);
          this.writeI64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      }
    } else {
      this.encodeNumberAsFloat(object);
    }
  }
  encodeNumberAsFloat(object) {
    if (this.forceFloat32) {
      this.writeU8(202);
      this.writeF32(object);
    } else {
      this.writeU8(203);
      this.writeF64(object);
    }
  }
  encodeBigInt64(object) {
    if (object >= BigInt(0)) {
      this.writeU8(207);
      this.writeBigUint64(object);
    } else {
      this.writeU8(211);
      this.writeBigInt64(object);
    }
  }
  writeStringHeader(byteLength) {
    if (byteLength < 32) {
      this.writeU8(160 + byteLength);
    } else if (byteLength < 256) {
      this.writeU8(217);
      this.writeU8(byteLength);
    } else if (byteLength < 65536) {
      this.writeU8(218);
      this.writeU16(byteLength);
    } else if (byteLength < 4294967296) {
      this.writeU8(219);
      this.writeU32(byteLength);
    } else {
      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);
    }
  }
  encodeString(object) {
    const maxHeaderSize = 1 + 4;
    const byteLength = utf8Count(object);
    this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
    this.writeStringHeader(byteLength);
    utf8Encode(object, this.bytes, this.pos);
    this.pos += byteLength;
  }
  encodeObject(object, depth) {
    const ext = this.extensionCodec.tryToEncode(object, this.context);
    if (ext != null) {
      this.encodeExtension(ext);
    } else if (Array.isArray(object)) {
      this.encodeArray(object, depth);
    } else if (ArrayBuffer.isView(object)) {
      this.encodeBinary(object);
    } else if (typeof object === "object") {
      this.encodeMap(object, depth);
    } else {
      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);
    }
  }
  encodeBinary(object) {
    const size4 = object.byteLength;
    if (size4 < 256) {
      this.writeU8(196);
      this.writeU8(size4);
    } else if (size4 < 65536) {
      this.writeU8(197);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(198);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large binary: ${size4}`);
    }
    const bytes = ensureUint8Array(object);
    this.writeU8a(bytes);
  }
  encodeArray(object, depth) {
    const size4 = object.length;
    if (size4 < 16) {
      this.writeU8(144 + size4);
    } else if (size4 < 65536) {
      this.writeU8(220);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(221);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large array: ${size4}`);
    }
    for (const item of object) {
      this.doEncode(item, depth + 1);
    }
  }
  countWithoutUndefined(object, keys2) {
    let count = 0;
    for (const key of keys2) {
      if (object[key] !== void 0) {
        count++;
      }
    }
    return count;
  }
  encodeMap(object, depth) {
    const keys2 = Object.keys(object);
    if (this.sortKeys) {
      keys2.sort();
    }
    const size4 = this.ignoreUndefined ? this.countWithoutUndefined(object, keys2) : keys2.length;
    if (size4 < 16) {
      this.writeU8(128 + size4);
    } else if (size4 < 65536) {
      this.writeU8(222);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(223);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large map object: ${size4}`);
    }
    for (const key of keys2) {
      const value = object[key];
      if (!(this.ignoreUndefined && value === void 0)) {
        this.encodeString(key);
        this.doEncode(value, depth + 1);
      }
    }
  }
  encodeExtension(ext) {
    if (typeof ext.data === "function") {
      const data = ext.data(this.pos + 6);
      const size5 = data.length;
      if (size5 >= 4294967296) {
        throw new Error(`Too large extension object: ${size5}`);
      }
      this.writeU8(201);
      this.writeU32(size5);
      this.writeI8(ext.type);
      this.writeU8a(data);
      return;
    }
    const size4 = ext.data.length;
    if (size4 === 1) {
      this.writeU8(212);
    } else if (size4 === 2) {
      this.writeU8(213);
    } else if (size4 === 4) {
      this.writeU8(214);
    } else if (size4 === 8) {
      this.writeU8(215);
    } else if (size4 === 16) {
      this.writeU8(216);
    } else if (size4 < 256) {
      this.writeU8(199);
      this.writeU8(size4);
    } else if (size4 < 65536) {
      this.writeU8(200);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(201);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large extension object: ${size4}`);
    }
    this.writeI8(ext.type);
    this.writeU8a(ext.data);
  }
  writeU8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setUint8(this.pos, value);
    this.pos++;
  }
  writeU8a(values) {
    const size4 = values.length;
    this.ensureBufferSizeToWrite(size4);
    this.bytes.set(values, this.pos);
    this.pos += size4;
  }
  writeI8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setInt8(this.pos, value);
    this.pos++;
  }
  writeU16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setUint16(this.pos, value);
    this.pos += 2;
  }
  writeI16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setInt16(this.pos, value);
    this.pos += 2;
  }
  writeU32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setUint32(this.pos, value);
    this.pos += 4;
  }
  writeI32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setInt32(this.pos, value);
    this.pos += 4;
  }
  writeF32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setFloat32(this.pos, value);
    this.pos += 4;
  }
  writeF64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setFloat64(this.pos, value);
    this.pos += 8;
  }
  writeU64(value) {
    this.ensureBufferSizeToWrite(8);
    setUint64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeI64(value) {
    this.ensureBufferSizeToWrite(8);
    setInt64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeBigUint64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigUint64(this.pos, value);
    this.pos += 8;
  }
  writeBigInt64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigInt64(this.pos, value);
    this.pos += 8;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/encode.mjs
function encode4(value, options) {
  const encoder = new Encoder(options);
  return encoder.encodeSharedRef(value);
}

// node_modules/@msgpack/msgpack/dist.esm/utils/prettyByte.mjs
function prettyByte(byte) {
  return `${byte < 0 ? "-" : ""}0x${Math.abs(byte).toString(16).padStart(2, "0")}`;
}

// node_modules/@msgpack/msgpack/dist.esm/CachedKeyDecoder.mjs
var DEFAULT_MAX_KEY_LENGTH = 16;
var DEFAULT_MAX_LENGTH_PER_KEY = 16;
var CachedKeyDecoder = class {
  constructor(maxKeyLength = DEFAULT_MAX_KEY_LENGTH, maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {
    this.hit = 0;
    this.miss = 0;
    this.maxKeyLength = maxKeyLength;
    this.maxLengthPerKey = maxLengthPerKey;
    this.caches = [];
    for (let i6 = 0; i6 < this.maxKeyLength; i6++) {
      this.caches.push([]);
    }
  }
  canBeCached(byteLength) {
    return byteLength > 0 && byteLength <= this.maxKeyLength;
  }
  find(bytes, inputOffset, byteLength) {
    const records = this.caches[byteLength - 1];
    FIND_CHUNK: for (const record of records) {
      const recordBytes = record.bytes;
      for (let j5 = 0; j5 < byteLength; j5++) {
        if (recordBytes[j5] !== bytes[inputOffset + j5]) {
          continue FIND_CHUNK;
        }
      }
      return record.str;
    }
    return null;
  }
  store(bytes, value) {
    const records = this.caches[bytes.length - 1];
    const record = { bytes, str: value };
    if (records.length >= this.maxLengthPerKey) {
      records[Math.random() * records.length | 0] = record;
    } else {
      records.push(record);
    }
  }
  decode(bytes, inputOffset, byteLength) {
    const cachedValue = this.find(bytes, inputOffset, byteLength);
    if (cachedValue != null) {
      this.hit++;
      return cachedValue;
    }
    this.miss++;
    const str = utf8DecodeJs(bytes, inputOffset, byteLength);
    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);
    this.store(slicedCopyOfBytes, str);
    return str;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/Decoder.mjs
var STATE_ARRAY = "array";
var STATE_MAP_KEY = "map_key";
var STATE_MAP_VALUE = "map_value";
var mapKeyConverter = (key) => {
  if (typeof key === "string" || typeof key === "number") {
    return key;
  }
  throw new DecodeError("The type of key must be string or number but " + typeof key);
};
var StackPool = class {
  constructor() {
    this.stack = [];
    this.stackHeadPosition = -1;
  }
  get length() {
    return this.stackHeadPosition + 1;
  }
  top() {
    return this.stack[this.stackHeadPosition];
  }
  pushArrayState(size4) {
    const state25 = this.getUninitializedStateFromPool();
    state25.type = STATE_ARRAY;
    state25.position = 0;
    state25.size = size4;
    state25.array = new Array(size4);
  }
  pushMapState(size4) {
    const state25 = this.getUninitializedStateFromPool();
    state25.type = STATE_MAP_KEY;
    state25.readCount = 0;
    state25.size = size4;
    state25.map = {};
  }
  getUninitializedStateFromPool() {
    this.stackHeadPosition++;
    if (this.stackHeadPosition === this.stack.length) {
      const partialState = {
        type: void 0,
        size: 0,
        array: void 0,
        position: 0,
        readCount: 0,
        map: void 0,
        key: null
      };
      this.stack.push(partialState);
    }
    return this.stack[this.stackHeadPosition];
  }
  release(state25) {
    const topStackState = this.stack[this.stackHeadPosition];
    if (topStackState !== state25) {
      throw new Error("Invalid stack state. Released state is not on top of the stack.");
    }
    if (state25.type === STATE_ARRAY) {
      const partialState = state25;
      partialState.size = 0;
      partialState.array = void 0;
      partialState.position = 0;
      partialState.type = void 0;
    }
    if (state25.type === STATE_MAP_KEY || state25.type === STATE_MAP_VALUE) {
      const partialState = state25;
      partialState.size = 0;
      partialState.map = void 0;
      partialState.readCount = 0;
      partialState.type = void 0;
    }
    this.stackHeadPosition--;
  }
  reset() {
    this.stack.length = 0;
    this.stackHeadPosition = -1;
  }
};
var HEAD_BYTE_REQUIRED = -1;
var EMPTY_VIEW = new DataView(new ArrayBuffer(0));
var EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);
try {
  EMPTY_VIEW.getInt8(0);
} catch (e3) {
  if (!(e3 instanceof RangeError)) {
    throw new Error("This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access");
  }
}
var MORE_DATA = new RangeError("Insufficient data");
var sharedCachedKeyDecoder = new CachedKeyDecoder();
var Decoder = class _Decoder {
  constructor(options) {
    this.totalPos = 0;
    this.pos = 0;
    this.view = EMPTY_VIEW;
    this.bytes = EMPTY_BYTES;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack = new StackPool();
    this.entered = false;
    this.extensionCodec = (options == null ? void 0 : options.extensionCodec) ?? ExtensionCodec.defaultCodec;
    this.context = options == null ? void 0 : options.context;
    this.useBigInt64 = (options == null ? void 0 : options.useBigInt64) ?? false;
    this.rawStrings = (options == null ? void 0 : options.rawStrings) ?? false;
    this.maxStrLength = (options == null ? void 0 : options.maxStrLength) ?? UINT32_MAX;
    this.maxBinLength = (options == null ? void 0 : options.maxBinLength) ?? UINT32_MAX;
    this.maxArrayLength = (options == null ? void 0 : options.maxArrayLength) ?? UINT32_MAX;
    this.maxMapLength = (options == null ? void 0 : options.maxMapLength) ?? UINT32_MAX;
    this.maxExtLength = (options == null ? void 0 : options.maxExtLength) ?? UINT32_MAX;
    this.keyDecoder = (options == null ? void 0 : options.keyDecoder) !== void 0 ? options.keyDecoder : sharedCachedKeyDecoder;
    this.mapKeyConverter = (options == null ? void 0 : options.mapKeyConverter) ?? mapKeyConverter;
  }
  clone() {
    return new _Decoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      rawStrings: this.rawStrings,
      maxStrLength: this.maxStrLength,
      maxBinLength: this.maxBinLength,
      maxArrayLength: this.maxArrayLength,
      maxMapLength: this.maxMapLength,
      maxExtLength: this.maxExtLength,
      keyDecoder: this.keyDecoder
    });
  }
  reinitializeState() {
    this.totalPos = 0;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack.reset();
  }
  setBuffer(buffer) {
    const bytes = ensureUint8Array(buffer);
    this.bytes = bytes;
    this.view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    this.pos = 0;
  }
  appendBuffer(buffer) {
    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {
      this.setBuffer(buffer);
    } else {
      const remainingData = this.bytes.subarray(this.pos);
      const newData = ensureUint8Array(buffer);
      const newBuffer = new Uint8Array(remainingData.length + newData.length);
      newBuffer.set(remainingData);
      newBuffer.set(newData, remainingData.length);
      this.setBuffer(newBuffer);
    }
  }
  hasRemaining(size4) {
    return this.view.byteLength - this.pos >= size4;
  }
  createExtraByteError(posToShow) {
    const { view, pos } = this;
    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);
  }
  /**
   * @throws {@link DecodeError}
   * @throws {@link RangeError}
   */
  decode(buffer) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decode(buffer);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer);
      const object = this.doDecodeSync();
      if (this.hasRemaining(1)) {
        throw this.createExtraByteError(this.pos);
      }
      return object;
    } finally {
      this.entered = false;
    }
  }
  *decodeMulti(buffer) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMulti(buffer);
      return;
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer);
      while (this.hasRemaining(1)) {
        yield this.doDecodeSync();
      }
    } finally {
      this.entered = false;
    }
  }
  async decodeAsync(stream) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decodeAsync(stream);
    }
    try {
      this.entered = true;
      let decoded = false;
      let object;
      for await (const buffer of stream) {
        if (decoded) {
          this.entered = false;
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer);
        try {
          object = this.doDecodeSync();
          decoded = true;
        } catch (e3) {
          if (!(e3 instanceof RangeError)) {
            throw e3;
          }
        }
        this.totalPos += this.pos;
      }
      if (decoded) {
        if (this.hasRemaining(1)) {
          throw this.createExtraByteError(this.totalPos);
        }
        return object;
      }
      const { headByte, pos, totalPos } = this;
      throw new RangeError(`Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`);
    } finally {
      this.entered = false;
    }
  }
  decodeArrayStream(stream) {
    return this.decodeMultiAsync(stream, true);
  }
  decodeStream(stream) {
    return this.decodeMultiAsync(stream, false);
  }
  async *decodeMultiAsync(stream, isArray) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMultiAsync(stream, isArray);
      return;
    }
    try {
      this.entered = true;
      let isArrayHeaderRequired = isArray;
      let arrayItemsLeft = -1;
      for await (const buffer of stream) {
        if (isArray && arrayItemsLeft === 0) {
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer);
        if (isArrayHeaderRequired) {
          arrayItemsLeft = this.readArraySize();
          isArrayHeaderRequired = false;
          this.complete();
        }
        try {
          while (true) {
            yield this.doDecodeSync();
            if (--arrayItemsLeft === 0) {
              break;
            }
          }
        } catch (e3) {
          if (!(e3 instanceof RangeError)) {
            throw e3;
          }
        }
        this.totalPos += this.pos;
      }
    } finally {
      this.entered = false;
    }
  }
  doDecodeSync() {
    DECODE: while (true) {
      const headByte = this.readHeadByte();
      let object;
      if (headByte >= 224) {
        object = headByte - 256;
      } else if (headByte < 192) {
        if (headByte < 128) {
          object = headByte;
        } else if (headByte < 144) {
          const size4 = headByte - 128;
          if (size4 !== 0) {
            this.pushMapState(size4);
            this.complete();
            continue DECODE;
          } else {
            object = {};
          }
        } else if (headByte < 160) {
          const size4 = headByte - 144;
          if (size4 !== 0) {
            this.pushArrayState(size4);
            this.complete();
            continue DECODE;
          } else {
            object = [];
          }
        } else {
          const byteLength = headByte - 160;
          object = this.decodeString(byteLength, 0);
        }
      } else if (headByte === 192) {
        object = null;
      } else if (headByte === 194) {
        object = false;
      } else if (headByte === 195) {
        object = true;
      } else if (headByte === 202) {
        object = this.readF32();
      } else if (headByte === 203) {
        object = this.readF64();
      } else if (headByte === 204) {
        object = this.readU8();
      } else if (headByte === 205) {
        object = this.readU16();
      } else if (headByte === 206) {
        object = this.readU32();
      } else if (headByte === 207) {
        if (this.useBigInt64) {
          object = this.readU64AsBigInt();
        } else {
          object = this.readU64();
        }
      } else if (headByte === 208) {
        object = this.readI8();
      } else if (headByte === 209) {
        object = this.readI16();
      } else if (headByte === 210) {
        object = this.readI32();
      } else if (headByte === 211) {
        if (this.useBigInt64) {
          object = this.readI64AsBigInt();
        } else {
          object = this.readI64();
        }
      } else if (headByte === 217) {
        const byteLength = this.lookU8();
        object = this.decodeString(byteLength, 1);
      } else if (headByte === 218) {
        const byteLength = this.lookU16();
        object = this.decodeString(byteLength, 2);
      } else if (headByte === 219) {
        const byteLength = this.lookU32();
        object = this.decodeString(byteLength, 4);
      } else if (headByte === 220) {
        const size4 = this.readU16();
        if (size4 !== 0) {
          this.pushArrayState(size4);
          this.complete();
          continue DECODE;
        } else {
          object = [];
        }
      } else if (headByte === 221) {
        const size4 = this.readU32();
        if (size4 !== 0) {
          this.pushArrayState(size4);
          this.complete();
          continue DECODE;
        } else {
          object = [];
        }
      } else if (headByte === 222) {
        const size4 = this.readU16();
        if (size4 !== 0) {
          this.pushMapState(size4);
          this.complete();
          continue DECODE;
        } else {
          object = {};
        }
      } else if (headByte === 223) {
        const size4 = this.readU32();
        if (size4 !== 0) {
          this.pushMapState(size4);
          this.complete();
          continue DECODE;
        } else {
          object = {};
        }
      } else if (headByte === 196) {
        const size4 = this.lookU8();
        object = this.decodeBinary(size4, 1);
      } else if (headByte === 197) {
        const size4 = this.lookU16();
        object = this.decodeBinary(size4, 2);
      } else if (headByte === 198) {
        const size4 = this.lookU32();
        object = this.decodeBinary(size4, 4);
      } else if (headByte === 212) {
        object = this.decodeExtension(1, 0);
      } else if (headByte === 213) {
        object = this.decodeExtension(2, 0);
      } else if (headByte === 214) {
        object = this.decodeExtension(4, 0);
      } else if (headByte === 215) {
        object = this.decodeExtension(8, 0);
      } else if (headByte === 216) {
        object = this.decodeExtension(16, 0);
      } else if (headByte === 199) {
        const size4 = this.lookU8();
        object = this.decodeExtension(size4, 1);
      } else if (headByte === 200) {
        const size4 = this.lookU16();
        object = this.decodeExtension(size4, 2);
      } else if (headByte === 201) {
        const size4 = this.lookU32();
        object = this.decodeExtension(size4, 4);
      } else {
        throw new DecodeError(`Unrecognized type byte: ${prettyByte(headByte)}`);
      }
      this.complete();
      const stack = this.stack;
      while (stack.length > 0) {
        const state25 = stack.top();
        if (state25.type === STATE_ARRAY) {
          state25.array[state25.position] = object;
          state25.position++;
          if (state25.position === state25.size) {
            object = state25.array;
            stack.release(state25);
          } else {
            continue DECODE;
          }
        } else if (state25.type === STATE_MAP_KEY) {
          if (object === "__proto__") {
            throw new DecodeError("The key __proto__ is not allowed");
          }
          state25.key = this.mapKeyConverter(object);
          state25.type = STATE_MAP_VALUE;
          continue DECODE;
        } else {
          state25.map[state25.key] = object;
          state25.readCount++;
          if (state25.readCount === state25.size) {
            object = state25.map;
            stack.release(state25);
          } else {
            state25.key = null;
            state25.type = STATE_MAP_KEY;
            continue DECODE;
          }
        }
      }
      return object;
    }
  }
  readHeadByte() {
    if (this.headByte === HEAD_BYTE_REQUIRED) {
      this.headByte = this.readU8();
    }
    return this.headByte;
  }
  complete() {
    this.headByte = HEAD_BYTE_REQUIRED;
  }
  readArraySize() {
    const headByte = this.readHeadByte();
    switch (headByte) {
      case 220:
        return this.readU16();
      case 221:
        return this.readU32();
      default: {
        if (headByte < 160) {
          return headByte - 144;
        } else {
          throw new DecodeError(`Unrecognized array type byte: ${prettyByte(headByte)}`);
        }
      }
    }
  }
  pushMapState(size4) {
    if (size4 > this.maxMapLength) {
      throw new DecodeError(`Max length exceeded: map length (${size4}) > maxMapLengthLength (${this.maxMapLength})`);
    }
    this.stack.pushMapState(size4);
  }
  pushArrayState(size4) {
    if (size4 > this.maxArrayLength) {
      throw new DecodeError(`Max length exceeded: array length (${size4}) > maxArrayLength (${this.maxArrayLength})`);
    }
    this.stack.pushArrayState(size4);
  }
  decodeString(byteLength, headerOffset) {
    if (!this.rawStrings || this.stateIsMapKey()) {
      return this.decodeUtf8String(byteLength, headerOffset);
    }
    return this.decodeBinary(byteLength, headerOffset);
  }
  /**
   * @throws {@link RangeError}
   */
  decodeUtf8String(byteLength, headerOffset) {
    var _a2;
    if (byteLength > this.maxStrLength) {
      throw new DecodeError(`Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`);
    }
    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {
      throw MORE_DATA;
    }
    const offset = this.pos + headerOffset;
    let object;
    if (this.stateIsMapKey() && ((_a2 = this.keyDecoder) == null ? void 0 : _a2.canBeCached(byteLength))) {
      object = this.keyDecoder.decode(this.bytes, offset, byteLength);
    } else {
      object = utf8Decode(this.bytes, offset, byteLength);
    }
    this.pos += headerOffset + byteLength;
    return object;
  }
  stateIsMapKey() {
    if (this.stack.length > 0) {
      const state25 = this.stack.top();
      return state25.type === STATE_MAP_KEY;
    }
    return false;
  }
  /**
   * @throws {@link RangeError}
   */
  decodeBinary(byteLength, headOffset) {
    if (byteLength > this.maxBinLength) {
      throw new DecodeError(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);
    }
    if (!this.hasRemaining(byteLength + headOffset)) {
      throw MORE_DATA;
    }
    const offset = this.pos + headOffset;
    const object = this.bytes.subarray(offset, offset + byteLength);
    this.pos += headOffset + byteLength;
    return object;
  }
  decodeExtension(size4, headOffset) {
    if (size4 > this.maxExtLength) {
      throw new DecodeError(`Max length exceeded: ext length (${size4}) > maxExtLength (${this.maxExtLength})`);
    }
    const extType = this.view.getInt8(this.pos + headOffset);
    const data = this.decodeBinary(
      size4,
      headOffset + 1
      /* extType */
    );
    return this.extensionCodec.decode(data, extType, this.context);
  }
  lookU8() {
    return this.view.getUint8(this.pos);
  }
  lookU16() {
    return this.view.getUint16(this.pos);
  }
  lookU32() {
    return this.view.getUint32(this.pos);
  }
  readU8() {
    const value = this.view.getUint8(this.pos);
    this.pos++;
    return value;
  }
  readI8() {
    const value = this.view.getInt8(this.pos);
    this.pos++;
    return value;
  }
  readU16() {
    const value = this.view.getUint16(this.pos);
    this.pos += 2;
    return value;
  }
  readI16() {
    const value = this.view.getInt16(this.pos);
    this.pos += 2;
    return value;
  }
  readU32() {
    const value = this.view.getUint32(this.pos);
    this.pos += 4;
    return value;
  }
  readI32() {
    const value = this.view.getInt32(this.pos);
    this.pos += 4;
    return value;
  }
  readU64() {
    const value = getUint64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readI64() {
    const value = getInt64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readU64AsBigInt() {
    const value = this.view.getBigUint64(this.pos);
    this.pos += 8;
    return value;
  }
  readI64AsBigInt() {
    const value = this.view.getBigInt64(this.pos);
    this.pos += 8;
    return value;
  }
  readF32() {
    const value = this.view.getFloat32(this.pos);
    this.pos += 4;
    return value;
  }
  readF64() {
    const value = this.view.getFloat64(this.pos);
    this.pos += 8;
    return value;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/decode.mjs
function decode2(buffer, options) {
  const decoder = new Decoder(options);
  return decoder.decode(buffer);
}

// node_modules/@scure/base/lib/esm/index.js
function isBytes2(a4) {
  return a4 instanceof Uint8Array || ArrayBuffer.isView(a4) && a4.constructor.name === "Uint8Array";
}
function abytes(b6, ...lengths) {
  if (!isBytes2(b6))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b6.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b6.length);
}
function isArrayOf(isString, arr) {
  if (!Array.isArray(arr))
    return false;
  if (arr.length === 0)
    return true;
  if (isString) {
    return arr.every((item) => typeof item === "string");
  } else {
    return arr.every((item) => Number.isSafeInteger(item));
  }
}
function afn(input) {
  if (typeof input !== "function")
    throw new Error("function expected");
  return true;
}
function astr(label, input) {
  if (typeof input !== "string")
    throw new Error(`${label}: string expected`);
  return true;
}
function anumber(n6) {
  if (!Number.isSafeInteger(n6))
    throw new Error(`invalid integer: ${n6}`);
}
function aArr(input) {
  if (!Array.isArray(input))
    throw new Error("array expected");
}
function astrArr(label, input) {
  if (!isArrayOf(true, input))
    throw new Error(`${label}: array of strings expected`);
}
function anumArr(label, input) {
  if (!isArrayOf(false, input))
    throw new Error(`${label}: array of numbers expected`);
}
function chain(...args) {
  const id = (a4) => a4;
  const wrap = (a4, b6) => (c8) => a4(b6(c8));
  const encode9 = args.map((x6) => x6.encode).reduceRight(wrap, id);
  const decode8 = args.map((x6) => x6.decode).reduce(wrap, id);
  return { encode: encode9, decode: decode8 };
}
function alphabet(letters) {
  const lettersA = typeof letters === "string" ? letters.split("") : letters;
  const len = lettersA.length;
  astrArr("alphabet", lettersA);
  const indexes = new Map(lettersA.map((l9, i6) => [l9, i6]));
  return {
    encode: (digits) => {
      aArr(digits);
      return digits.map((i6) => {
        if (!Number.isSafeInteger(i6) || i6 < 0 || i6 >= len)
          throw new Error(`alphabet.encode: digit index outside alphabet "${i6}". Allowed: ${letters}`);
        return lettersA[i6];
      });
    },
    decode: (input) => {
      aArr(input);
      return input.map((letter) => {
        astr("alphabet.decode", letter);
        const i6 = indexes.get(letter);
        if (i6 === void 0)
          throw new Error(`Unknown letter: "${letter}". Allowed: ${letters}`);
        return i6;
      });
    }
  };
}
function join(separator = "") {
  astr("join", separator);
  return {
    encode: (from8) => {
      astrArr("join.decode", from8);
      return from8.join(separator);
    },
    decode: (to4) => {
      astr("join.decode", to4);
      return to4.split(separator);
    }
  };
}
function padding(bits, chr = "=") {
  anumber(bits);
  astr("padding", chr);
  return {
    encode(data) {
      astrArr("padding.encode", data);
      while (data.length * bits % 8)
        data.push(chr);
      return data;
    },
    decode(input) {
      astrArr("padding.decode", input);
      let end = input.length;
      if (end * bits % 8)
        throw new Error("padding: invalid, string should have whole number of bytes");
      for (; end > 0 && input[end - 1] === chr; end--) {
        const last = end - 1;
        const byte = last * bits;
        if (byte % 8 === 0)
          throw new Error("padding: invalid, string has too much padding");
      }
      return input.slice(0, end);
    }
  };
}
function normalize(fn3) {
  afn(fn3);
  return { encode: (from8) => from8, decode: (to4) => fn3(to4) };
}
function convertRadix(data, from8, to4) {
  if (from8 < 2)
    throw new Error(`convertRadix: invalid from=${from8}, base cannot be less than 2`);
  if (to4 < 2)
    throw new Error(`convertRadix: invalid to=${to4}, base cannot be less than 2`);
  aArr(data);
  if (!data.length)
    return [];
  let pos = 0;
  const res = [];
  const digits = Array.from(data, (d6) => {
    anumber(d6);
    if (d6 < 0 || d6 >= from8)
      throw new Error(`invalid integer: ${d6}`);
    return d6;
  });
  const dlen = digits.length;
  while (true) {
    let carry = 0;
    let done = true;
    for (let i6 = pos; i6 < dlen; i6++) {
      const digit = digits[i6];
      const fromCarry = from8 * carry;
      const digitBase = fromCarry + digit;
      if (!Number.isSafeInteger(digitBase) || fromCarry / from8 !== carry || digitBase - digit !== fromCarry) {
        throw new Error("convertRadix: carry overflow");
      }
      const div = digitBase / to4;
      carry = digitBase % to4;
      const rounded = Math.floor(div);
      digits[i6] = rounded;
      if (!Number.isSafeInteger(rounded) || rounded * to4 + carry !== digitBase)
        throw new Error("convertRadix: carry overflow");
      if (!done)
        continue;
      else if (!rounded)
        pos = i6;
      else
        done = false;
    }
    res.push(carry);
    if (done)
      break;
  }
  for (let i6 = 0; i6 < data.length - 1 && data[i6] === 0; i6++)
    res.push(0);
  return res.reverse();
}
var gcd = (a4, b6) => b6 === 0 ? a4 : gcd(b6, a4 % b6);
var radix2carry = (from8, to4) => from8 + (to4 - gcd(from8, to4));
var powers = (() => {
  let res = [];
  for (let i6 = 0; i6 < 40; i6++)
    res.push(2 ** i6);
  return res;
})();
function convertRadix2(data, from8, to4, padding2) {
  aArr(data);
  if (from8 <= 0 || from8 > 32)
    throw new Error(`convertRadix2: wrong from=${from8}`);
  if (to4 <= 0 || to4 > 32)
    throw new Error(`convertRadix2: wrong to=${to4}`);
  if (radix2carry(from8, to4) > 32) {
    throw new Error(`convertRadix2: carry overflow from=${from8} to=${to4} carryBits=${radix2carry(from8, to4)}`);
  }
  let carry = 0;
  let pos = 0;
  const max = powers[from8];
  const mask = powers[to4] - 1;
  const res = [];
  for (const n6 of data) {
    anumber(n6);
    if (n6 >= max)
      throw new Error(`convertRadix2: invalid data word=${n6} from=${from8}`);
    carry = carry << from8 | n6;
    if (pos + from8 > 32)
      throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from8}`);
    pos += from8;
    for (; pos >= to4; pos -= to4)
      res.push((carry >> pos - to4 & mask) >>> 0);
    const pow = powers[pos];
    if (pow === void 0)
      throw new Error("invalid carry");
    carry &= pow - 1;
  }
  carry = carry << to4 - pos & mask;
  if (!padding2 && pos >= from8)
    throw new Error("Excess padding");
  if (!padding2 && carry > 0)
    throw new Error(`Non-zero padding: ${carry}`);
  if (padding2 && pos > 0)
    res.push(carry >>> 0);
  return res;
}
function radix(num) {
  anumber(num);
  const _256 = 2 ** 8;
  return {
    encode: (bytes) => {
      if (!isBytes2(bytes))
        throw new Error("radix.encode input should be Uint8Array");
      return convertRadix(Array.from(bytes), _256, num);
    },
    decode: (digits) => {
      anumArr("radix.decode", digits);
      return Uint8Array.from(convertRadix(digits, num, _256));
    }
  };
}
function radix2(bits, revPadding = false) {
  anumber(bits);
  if (bits <= 0 || bits > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (bytes) => {
      if (!isBytes2(bytes))
        throw new Error("radix2.encode input should be Uint8Array");
      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);
    },
    decode: (digits) => {
      anumArr("radix2.decode", digits);
      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
    }
  };
}
function unsafeWrapper(fn3) {
  afn(fn3);
  return function(...args) {
    try {
      return fn3.apply(null, args);
    } catch (e3) {
    }
  };
}
var base16 = chain(radix2(4), alphabet("0123456789ABCDEF"), join(""));
var base32 = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding(5), join(""));
var base32nopad = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), join(""));
var base32hex = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding(5), join(""));
var base32hexnopad = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), join(""));
var base32crockford = chain(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize((s4) => s4.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
var hasBase64Builtin = (() => typeof Uint8Array.from([]).toBase64 === "function" && typeof Uint8Array.fromBase64 === "function")();
var decodeBase64Builtin = (s4, isUrl) => {
  astr("base64", s4);
  const re3 = isUrl ? /^[A-Za-z0-9=_-]+$/ : /^[A-Za-z0-9=+/]+$/;
  const alphabet3 = isUrl ? "base64url" : "base64";
  if (s4.length > 0 && !re3.test(s4))
    throw new Error("invalid base64");
  return Uint8Array.fromBase64(s4, { alphabet: alphabet3, lastChunkHandling: "strict" });
};
var base64 = hasBase64Builtin ? {
  encode(b6) {
    abytes(b6);
    return b6.toBase64();
  },
  decode(s4) {
    return decodeBase64Builtin(s4, false);
  }
} : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding(6), join(""));
var base64nopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), join(""));
var base64url = hasBase64Builtin ? {
  encode(b6) {
    abytes(b6);
    return b6.toBase64({ alphabet: "base64url" });
  },
  decode(s4) {
    return decodeBase64Builtin(s4, true);
  }
} : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding(6), join(""));
var base64urlnopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), join(""));
var genBase58 = (abc) => chain(radix(58), alphabet(abc), join(""));
var base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
var base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
var base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
var BECH_ALPHABET = chain(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
var POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
function bech32Polymod(pre) {
  const b6 = pre >> 25;
  let chk = (pre & 33554431) << 5;
  for (let i6 = 0; i6 < POLYMOD_GENERATORS.length; i6++) {
    if ((b6 >> i6 & 1) === 1)
      chk ^= POLYMOD_GENERATORS[i6];
  }
  return chk;
}
function bechChecksum(prefix, words, encodingConst = 1) {
  const len = prefix.length;
  let chk = 1;
  for (let i6 = 0; i6 < len; i6++) {
    const c8 = prefix.charCodeAt(i6);
    if (c8 < 33 || c8 > 126)
      throw new Error(`Invalid prefix (${prefix})`);
    chk = bech32Polymod(chk) ^ c8 >> 5;
  }
  chk = bech32Polymod(chk);
  for (let i6 = 0; i6 < len; i6++)
    chk = bech32Polymod(chk) ^ prefix.charCodeAt(i6) & 31;
  for (let v6 of words)
    chk = bech32Polymod(chk) ^ v6;
  for (let i6 = 0; i6 < 6; i6++)
    chk = bech32Polymod(chk);
  chk ^= encodingConst;
  return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]], 30, 5, false));
}
function genBech32(encoding) {
  const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
  const _words = radix2(5);
  const fromWords = _words.decode;
  const toWords = _words.encode;
  const fromWordsUnsafe = unsafeWrapper(fromWords);
  function encode9(prefix, words, limit = 90) {
    astr("bech32.encode prefix", prefix);
    if (isBytes2(words))
      words = Array.from(words);
    anumArr("bech32.encode", words);
    const plen = prefix.length;
    if (plen === 0)
      throw new TypeError(`Invalid prefix length ${plen}`);
    const actualLength = plen + 7 + words.length;
    if (limit !== false && actualLength > limit)
      throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
    const lowered = prefix.toLowerCase();
    const sum = bechChecksum(lowered, words, ENCODING_CONST);
    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
  }
  function decode8(str, limit = 90) {
    astr("bech32.decode input", str);
    const slen = str.length;
    if (slen < 8 || limit !== false && slen > limit)
      throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit})`);
    const lowered = str.toLowerCase();
    if (str !== lowered && str !== str.toUpperCase())
      throw new Error(`String must be lowercase or uppercase`);
    const sepIndex = lowered.lastIndexOf("1");
    if (sepIndex === 0 || sepIndex === -1)
      throw new Error(`Letter "1" must be present between prefix and data only`);
    const prefix = lowered.slice(0, sepIndex);
    const data = lowered.slice(sepIndex + 1);
    if (data.length < 6)
      throw new Error("Data must be at least 6 characters long");
    const words = BECH_ALPHABET.decode(data).slice(0, -6);
    const sum = bechChecksum(prefix, words, ENCODING_CONST);
    if (!data.endsWith(sum))
      throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
    return { prefix, words };
  }
  const decodeUnsafe = unsafeWrapper(decode8);
  function decodeToBytes(str) {
    const { prefix, words } = decode8(str, false);
    return { prefix, words, bytes: fromWords(words) };
  }
  function encodeFromBytes(prefix, bytes) {
    return encode9(prefix, toWords(bytes));
  }
  return {
    encode: encode9,
    decode: decode8,
    encodeFromBytes,
    decodeToBytes,
    decodeUnsafe,
    fromWords,
    fromWordsUnsafe,
    toWords
  };
}
var bech32 = genBech32("bech32");
var bech32m = genBech32("bech32m");
var hasHexBuiltin = (() => typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function")();
var hexBuiltin = {
  encode(data) {
    abytes(data);
    return data.toHex();
  },
  decode(s4) {
    astr("hex", s4);
    return Uint8Array.fromHex(s4);
  }
};
var hex = hasHexBuiltin ? hexBuiltin : chain(radix2(4), alphabet("0123456789abcdef"), join(""), normalize((s4) => {
  if (typeof s4 !== "string" || s4.length % 2 !== 0)
    throw new TypeError(`hex.decode: expected string, got ${typeof s4} with length ${s4.length}`);
  return s4.toLowerCase();
}));

// node_modules/uint8arrays/esm/src/util/as-uint8array.js
function asUint8Array(buf) {
  if (globalThis.Buffer != null) {
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }
  return buf;
}

// node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe(size4 = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return asUint8Array(globalThis.Buffer.allocUnsafe(size4));
  }
  return new Uint8Array(size4);
}

// node_modules/uint8arrays/esm/src/concat.js
function concat3(arrays, length2) {
  if (!length2) {
    length2 = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe(length2);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return asUint8Array(output);
}

// node_modules/multiformats/esm/src/bases/identity.js
var identity_exports = {};
__export(identity_exports, {
  identity: () => identity
});

// node_modules/multiformats/esm/vendor/base-x.js
function base2(ALPHABET2, name2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j5 = 0; j5 < BASE_MAP.length; j5++) {
    BASE_MAP[j5] = 255;
  }
  for (var i6 = 0; i6 < ALPHABET2.length; i6++) {
    var x6 = ALPHABET2.charAt(i6);
    var xc2 = x6.charCodeAt(0);
    if (BASE_MAP[xc2] !== 255) {
      throw new TypeError(x6 + " is ambiguous");
    }
    BASE_MAP[xc2] = i6;
  }
  var BASE = ALPHABET2.length;
  var LEADER = ALPHABET2.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256);
  var iFACTOR = Math.log(256) / Math.log(BASE);
  function encode9(source) {
    if (source instanceof Uint8Array) ;
    else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    var zeroes = 0;
    var length2 = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    var size4 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size4);
    while (pbegin !== pend) {
      var carry = source[pbegin];
      var i7 = 0;
      for (var it1 = size4 - 1; (carry !== 0 || i7 < length2) && it1 !== -1; it1--, i7++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i7;
      pbegin++;
    }
    var it22 = size4 - length2;
    while (it22 !== size4 && b58[it22] === 0) {
      it22++;
    }
    var str = LEADER.repeat(zeroes);
    for (; it22 < size4; ++it22) {
      str += ALPHABET2.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    var psz = 0;
    if (source[psz] === " ") {
      return;
    }
    var zeroes = 0;
    var length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    var size4 = (source.length - psz) * FACTOR + 1 >>> 0;
    var b256 = new Uint8Array(size4);
    while (source[psz]) {
      var carry = BASE_MAP[source.charCodeAt(psz)];
      if (carry === 255) {
        return;
      }
      var i7 = 0;
      for (var it32 = size4 - 1; (carry !== 0 || i7 < length2) && it32 !== -1; it32--, i7++) {
        carry += BASE * b256[it32] >>> 0;
        b256[it32] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i7;
      psz++;
    }
    if (source[psz] === " ") {
      return;
    }
    var it42 = size4 - length2;
    while (it42 !== size4 && b256[it42] === 0) {
      it42++;
    }
    var vch = new Uint8Array(zeroes + (size4 - it42));
    var j6 = zeroes;
    while (it42 !== size4) {
      vch[j6++] = b256[it42++];
    }
    return vch;
  }
  function decode8(string2) {
    var buffer = decodeUnsafe(string2);
    if (buffer) {
      return buffer;
    }
    throw new Error(`Non-${name2} character`);
  }
  return {
    encode: encode9,
    decodeUnsafe,
    decode: decode8
  };
}
var src = base2;
var _brrp__multiformats_scope_baseX = src;
var base_x_default = _brrp__multiformats_scope_baseX;

// node_modules/multiformats/esm/src/bytes.js
var empty = new Uint8Array(0);
var equals = (aa2, bb) => {
  if (aa2 === bb)
    return true;
  if (aa2.byteLength !== bb.byteLength) {
    return false;
  }
  for (let ii3 = 0; ii3 < aa2.byteLength; ii3++) {
    if (aa2[ii3] !== bb[ii3]) {
      return false;
    }
  }
  return true;
};
var coerce = (o6) => {
  if (o6 instanceof Uint8Array && o6.constructor.name === "Uint8Array")
    return o6;
  if (o6 instanceof ArrayBuffer)
    return new Uint8Array(o6);
  if (ArrayBuffer.isView(o6)) {
    return new Uint8Array(o6.buffer, o6.byteOffset, o6.byteLength);
  }
  throw new Error("Unknown type, must be binary type");
};
var fromString3 = (str) => new TextEncoder().encode(str);
var toString2 = (b6) => new TextDecoder().decode(b6);

// node_modules/multiformats/esm/src/bases/base.js
var Encoder2 = class {
  constructor(name2, prefix, baseEncode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
  }
  encode(bytes) {
    if (bytes instanceof Uint8Array) {
      return `${this.prefix}${this.baseEncode(bytes)}`;
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};
var Decoder2 = class {
  constructor(name2, prefix, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    if (prefix.codePointAt(0) === void 0) {
      throw new Error("Invalid prefix character");
    }
    this.prefixCodePoint = prefix.codePointAt(0);
    this.baseDecode = baseDecode;
  }
  decode(text) {
    if (typeof text === "string") {
      if (text.codePointAt(0) !== this.prefixCodePoint) {
        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      }
      return this.baseDecode(text.slice(this.prefix.length));
    } else {
      throw Error("Can only multibase decode strings");
    }
  }
  or(decoder) {
    return or2(this, decoder);
  }
};
var ComposedDecoder = class {
  constructor(decoders) {
    this.decoders = decoders;
  }
  or(decoder) {
    return or2(this, decoder);
  }
  decode(input) {
    const prefix = input[0];
    const decoder = this.decoders[prefix];
    if (decoder) {
      return decoder.decode(input);
    } else {
      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
  }
};
var or2 = (left, right) => new ComposedDecoder({
  ...left.decoders || { [left.prefix]: left },
  ...right.decoders || { [right.prefix]: right }
});
var Codec = class {
  constructor(name2, prefix, baseEncode, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
    this.baseDecode = baseDecode;
    this.encoder = new Encoder2(name2, prefix, baseEncode);
    this.decoder = new Decoder2(name2, prefix, baseDecode);
  }
  encode(input) {
    return this.encoder.encode(input);
  }
  decode(input) {
    return this.decoder.decode(input);
  }
};
var from6 = ({ name: name2, prefix, encode: encode9, decode: decode8 }) => new Codec(name2, prefix, encode9, decode8);
var baseX = ({ prefix, name: name2, alphabet: alphabet3 }) => {
  const { encode: encode9, decode: decode8 } = base_x_default(alphabet3, name2);
  return from6({
    prefix,
    name: name2,
    encode: encode9,
    decode: (text) => coerce(decode8(text))
  });
};
var decode3 = (string2, alphabet3, bitsPerChar, name2) => {
  const codes = {};
  for (let i6 = 0; i6 < alphabet3.length; ++i6) {
    codes[alphabet3[i6]] = i6;
  }
  let end = string2.length;
  while (string2[end - 1] === "=") {
    --end;
  }
  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
  let bits = 0;
  let buffer = 0;
  let written = 0;
  for (let i6 = 0; i6 < end; ++i6) {
    const value = codes[string2[i6]];
    if (value === void 0) {
      throw new SyntaxError(`Non-${name2} character`);
    }
    buffer = buffer << bitsPerChar | value;
    bits += bitsPerChar;
    if (bits >= 8) {
      bits -= 8;
      out[written++] = 255 & buffer >> bits;
    }
  }
  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
    throw new SyntaxError("Unexpected end of data");
  }
  return out;
};
var encode5 = (data, alphabet3, bitsPerChar) => {
  const pad2 = alphabet3[alphabet3.length - 1] === "=";
  const mask = (1 << bitsPerChar) - 1;
  let out = "";
  let bits = 0;
  let buffer = 0;
  for (let i6 = 0; i6 < data.length; ++i6) {
    buffer = buffer << 8 | data[i6];
    bits += 8;
    while (bits > bitsPerChar) {
      bits -= bitsPerChar;
      out += alphabet3[mask & buffer >> bits];
    }
  }
  if (bits) {
    out += alphabet3[mask & buffer << bitsPerChar - bits];
  }
  if (pad2) {
    while (out.length * bitsPerChar & 7) {
      out += "=";
    }
  }
  return out;
};
var rfc4648 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet3 }) => {
  return from6({
    prefix,
    name: name2,
    encode(input) {
      return encode5(input, alphabet3, bitsPerChar);
    },
    decode(input) {
      return decode3(input, alphabet3, bitsPerChar, name2);
    }
  });
};

// node_modules/multiformats/esm/src/bases/identity.js
var identity = from6({
  prefix: "\0",
  name: "identity",
  encode: (buf) => toString2(buf),
  decode: (str) => fromString3(str)
});

// node_modules/multiformats/esm/src/bases/base2.js
var base2_exports = {};
__export(base2_exports, {
  base2: () => base22
});
var base22 = rfc4648({
  prefix: "0",
  name: "base2",
  alphabet: "01",
  bitsPerChar: 1
});

// node_modules/multiformats/esm/src/bases/base8.js
var base8_exports = {};
__export(base8_exports, {
  base8: () => base8
});
var base8 = rfc4648({
  prefix: "7",
  name: "base8",
  alphabet: "01234567",
  bitsPerChar: 3
});

// node_modules/multiformats/esm/src/bases/base10.js
var base10_exports = {};
__export(base10_exports, {
  base10: () => base10
});
var base10 = baseX({
  prefix: "9",
  name: "base10",
  alphabet: "0123456789"
});

// node_modules/multiformats/esm/src/bases/base16.js
var base16_exports = {};
__export(base16_exports, {
  base16: () => base162,
  base16upper: () => base16upper
});
var base162 = rfc4648({
  prefix: "f",
  name: "base16",
  alphabet: "0123456789abcdef",
  bitsPerChar: 4
});
var base16upper = rfc4648({
  prefix: "F",
  name: "base16upper",
  alphabet: "0123456789ABCDEF",
  bitsPerChar: 4
});

// node_modules/multiformats/esm/src/bases/base32.js
var base32_exports = {};
__export(base32_exports, {
  base32: () => base322,
  base32hex: () => base32hex2,
  base32hexpad: () => base32hexpad,
  base32hexpadupper: () => base32hexpadupper,
  base32hexupper: () => base32hexupper,
  base32pad: () => base32pad,
  base32padupper: () => base32padupper,
  base32upper: () => base32upper,
  base32z: () => base32z
});
var base322 = rfc4648({
  prefix: "b",
  name: "base32",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567",
  bitsPerChar: 5
});
var base32upper = rfc4648({
  prefix: "B",
  name: "base32upper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
  bitsPerChar: 5
});
var base32pad = rfc4648({
  prefix: "c",
  name: "base32pad",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
  bitsPerChar: 5
});
var base32padupper = rfc4648({
  prefix: "C",
  name: "base32padupper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
  bitsPerChar: 5
});
var base32hex2 = rfc4648({
  prefix: "v",
  name: "base32hex",
  alphabet: "0123456789abcdefghijklmnopqrstuv",
  bitsPerChar: 5
});
var base32hexupper = rfc4648({
  prefix: "V",
  name: "base32hexupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
  bitsPerChar: 5
});
var base32hexpad = rfc4648({
  prefix: "t",
  name: "base32hexpad",
  alphabet: "0123456789abcdefghijklmnopqrstuv=",
  bitsPerChar: 5
});
var base32hexpadupper = rfc4648({
  prefix: "T",
  name: "base32hexpadupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
  bitsPerChar: 5
});
var base32z = rfc4648({
  prefix: "h",
  name: "base32z",
  alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
  bitsPerChar: 5
});

// node_modules/multiformats/esm/src/bases/base36.js
var base36_exports = {};
__export(base36_exports, {
  base36: () => base36,
  base36upper: () => base36upper
});
var base36 = baseX({
  prefix: "k",
  name: "base36",
  alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
});
var base36upper = baseX({
  prefix: "K",
  name: "base36upper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
});

// node_modules/multiformats/esm/src/bases/base58.js
var base58_exports = {};
__export(base58_exports, {
  base58btc: () => base58btc,
  base58flickr: () => base58flickr2
});
var base58btc = baseX({
  name: "base58btc",
  prefix: "z",
  alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
var base58flickr2 = baseX({
  name: "base58flickr",
  prefix: "Z",
  alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});

// node_modules/multiformats/esm/src/bases/base64.js
var base64_exports = {};
__export(base64_exports, {
  base64: () => base642,
  base64pad: () => base64pad,
  base64url: () => base64url2,
  base64urlpad: () => base64urlpad
});
var base642 = rfc4648({
  prefix: "m",
  name: "base64",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  bitsPerChar: 6
});
var base64pad = rfc4648({
  prefix: "M",
  name: "base64pad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  bitsPerChar: 6
});
var base64url2 = rfc4648({
  prefix: "u",
  name: "base64url",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
  bitsPerChar: 6
});
var base64urlpad = rfc4648({
  prefix: "U",
  name: "base64urlpad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
  bitsPerChar: 6
});

// node_modules/multiformats/esm/src/bases/base256emoji.js
var base256emoji_exports = {};
__export(base256emoji_exports, {
  base256emoji: () => base256emoji
});
var alphabet2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var alphabetBytesToChars = alphabet2.reduce((p6, c8, i6) => {
  p6[i6] = c8;
  return p6;
}, []);
var alphabetCharsToBytes = alphabet2.reduce((p6, c8, i6) => {
  p6[c8.codePointAt(0)] = i6;
  return p6;
}, []);
function encode6(data) {
  return data.reduce((p6, c8) => {
    p6 += alphabetBytesToChars[c8];
    return p6;
  }, "");
}
function decode4(str) {
  const byts = [];
  for (const char of str) {
    const byt = alphabetCharsToBytes[char.codePointAt(0)];
    if (byt === void 0) {
      throw new Error(`Non-base256emoji character: ${char}`);
    }
    byts.push(byt);
  }
  return new Uint8Array(byts);
}
var base256emoji = from6({
  prefix: "🚀",
  name: "base256emoji",
  encode: encode6,
  decode: decode4
});

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha2_browser_exports = {};
__export(sha2_browser_exports, {
  sha256: () => sha2563,
  sha512: () => sha512
});

// node_modules/multiformats/esm/vendor/varint.js
var encode_1 = encode7;
var MSB = 128;
var REST = 127;
var MSBALL = ~REST;
var INT = Math.pow(2, 31);
function encode7(num, out, offset) {
  out = out || [];
  offset = offset || 0;
  var oldOffset = offset;
  while (num >= INT) {
    out[offset++] = num & 255 | MSB;
    num /= 128;
  }
  while (num & MSBALL) {
    out[offset++] = num & 255 | MSB;
    num >>>= 7;
  }
  out[offset] = num | 0;
  encode7.bytes = offset - oldOffset + 1;
  return out;
}
var decode5 = read;
var MSB$1 = 128;
var REST$1 = 127;
function read(buf, offset) {
  var res = 0, offset = offset || 0, shift = 0, counter = offset, b6, l9 = buf.length;
  do {
    if (counter >= l9) {
      read.bytes = 0;
      throw new RangeError("Could not decode varint");
    }
    b6 = buf[counter++];
    res += shift < 28 ? (b6 & REST$1) << shift : (b6 & REST$1) * Math.pow(2, shift);
    shift += 7;
  } while (b6 >= MSB$1);
  read.bytes = counter - offset;
  return res;
}
var N1 = Math.pow(2, 7);
var N22 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
var length = function(value) {
  return value < N1 ? 1 : value < N22 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};
var varint = {
  encode: encode_1,
  decode: decode5,
  encodingLength: length
};
var _brrp_varint = varint;
var varint_default = _brrp_varint;

// node_modules/multiformats/esm/src/varint.js
var decode6 = (data, offset = 0) => {
  const code2 = varint_default.decode(data, offset);
  return [
    code2,
    varint_default.decode.bytes
  ];
};
var encodeTo = (int, target, offset = 0) => {
  varint_default.encode(int, target, offset);
  return target;
};
var encodingLength = (int) => {
  return varint_default.encodingLength(int);
};

// node_modules/multiformats/esm/src/hashes/digest.js
var create2 = (code2, digest2) => {
  const size4 = digest2.byteLength;
  const sizeOffset = encodingLength(code2);
  const digestOffset = sizeOffset + encodingLength(size4);
  const bytes = new Uint8Array(digestOffset + size4);
  encodeTo(code2, bytes, 0);
  encodeTo(size4, bytes, sizeOffset);
  bytes.set(digest2, digestOffset);
  return new Digest(code2, size4, digest2, bytes);
};
var decode7 = (multihash) => {
  const bytes = coerce(multihash);
  const [code2, sizeOffset] = decode6(bytes);
  const [size4, digestOffset] = decode6(bytes.subarray(sizeOffset));
  const digest2 = bytes.subarray(sizeOffset + digestOffset);
  if (digest2.byteLength !== size4) {
    throw new Error("Incorrect length");
  }
  return new Digest(code2, size4, digest2, bytes);
};
var equals2 = (a4, b6) => {
  if (a4 === b6) {
    return true;
  } else {
    return a4.code === b6.code && a4.size === b6.size && equals(a4.bytes, b6.bytes);
  }
};
var Digest = class {
  constructor(code2, size4, digest2, bytes) {
    this.code = code2;
    this.size = size4;
    this.digest = digest2;
    this.bytes = bytes;
  }
};

// node_modules/multiformats/esm/src/hashes/hasher.js
var from7 = ({ name: name2, code: code2, encode: encode9 }) => new Hasher(name2, code2, encode9);
var Hasher = class {
  constructor(name2, code2, encode9) {
    this.name = name2;
    this.code = code2;
    this.encode = encode9;
  }
  digest(input) {
    if (input instanceof Uint8Array) {
      const result = this.encode(input);
      return result instanceof Uint8Array ? create2(this.code, result) : result.then((digest2) => create2(this.code, digest2));
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha = (name2) => async (data) => new Uint8Array(await crypto.subtle.digest(name2, data));
var sha2563 = from7({
  name: "sha2-256",
  code: 18,
  encode: sha("SHA-256")
});
var sha512 = from7({
  name: "sha2-512",
  code: 19,
  encode: sha("SHA-512")
});

// node_modules/multiformats/esm/src/hashes/identity.js
var identity_exports2 = {};
__export(identity_exports2, {
  identity: () => identity2
});
var code = 0;
var name = "identity";
var encode8 = coerce;
var digest = (input) => create2(code, encode8(input));
var identity2 = {
  code,
  name,
  encode: encode8,
  digest
};

// node_modules/multiformats/esm/src/codecs/json.js
var textEncoder = new TextEncoder();
var textDecoder = new TextDecoder();

// node_modules/multiformats/esm/src/cid.js
var CID = class _CID {
  constructor(version2, code2, multihash, bytes) {
    this.code = code2;
    this.version = version2;
    this.multihash = multihash;
    this.bytes = bytes;
    this.byteOffset = bytes.byteOffset;
    this.byteLength = bytes.byteLength;
    this.asCID = this;
    this._baseCache = /* @__PURE__ */ new Map();
    Object.defineProperties(this, {
      byteOffset: hidden,
      byteLength: hidden,
      code: readonly,
      version: readonly,
      multihash: readonly,
      bytes: readonly,
      _baseCache: hidden,
      asCID: hidden
    });
  }
  toV0() {
    switch (this.version) {
      case 0: {
        return this;
      }
      default: {
        const { code: code2, multihash } = this;
        if (code2 !== DAG_PB_CODE) {
          throw new Error("Cannot convert a non dag-pb CID to CIDv0");
        }
        if (multihash.code !== SHA_256_CODE) {
          throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
        }
        return _CID.createV0(multihash);
      }
    }
  }
  toV1() {
    switch (this.version) {
      case 0: {
        const { code: code2, digest: digest2 } = this.multihash;
        const multihash = create2(code2, digest2);
        return _CID.createV1(this.code, multihash);
      }
      case 1: {
        return this;
      }
      default: {
        throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
      }
    }
  }
  equals(other) {
    return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);
  }
  toString(base3) {
    const { bytes, version: version2, _baseCache } = this;
    switch (version2) {
      case 0:
        return toStringV0(bytes, _baseCache, base3 || base58btc.encoder);
      default:
        return toStringV1(bytes, _baseCache, base3 || base322.encoder);
    }
  }
  toJSON() {
    return {
      code: this.code,
      version: this.version,
      hash: this.multihash.bytes
    };
  }
  get [Symbol.toStringTag]() {
    return "CID";
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return "CID(" + this.toString() + ")";
  }
  static isCID(value) {
    deprecate(/^0\.0/, IS_CID_DEPRECATION);
    return !!(value && (value[cidSymbol] || value.asCID === value));
  }
  get toBaseEncodedString() {
    throw new Error("Deprecated, use .toString()");
  }
  get codec() {
    throw new Error('"codec" property is deprecated, use integer "code" property instead');
  }
  get buffer() {
    throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
  }
  get multibaseName() {
    throw new Error('"multibaseName" property is deprecated');
  }
  get prefix() {
    throw new Error('"prefix" property is deprecated');
  }
  static asCID(value) {
    if (value instanceof _CID) {
      return value;
    } else if (value != null && value.asCID === value) {
      const { version: version2, code: code2, multihash, bytes } = value;
      return new _CID(version2, code2, multihash, bytes || encodeCID(version2, code2, multihash.bytes));
    } else if (value != null && value[cidSymbol] === true) {
      const { version: version2, multihash, code: code2 } = value;
      const digest2 = decode7(multihash);
      return _CID.create(version2, code2, digest2);
    } else {
      return null;
    }
  }
  static create(version2, code2, digest2) {
    if (typeof code2 !== "number") {
      throw new Error("String codecs are no longer supported");
    }
    switch (version2) {
      case 0: {
        if (code2 !== DAG_PB_CODE) {
          throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
        } else {
          return new _CID(version2, code2, digest2, digest2.bytes);
        }
      }
      case 1: {
        const bytes = encodeCID(version2, code2, digest2.bytes);
        return new _CID(version2, code2, digest2, bytes);
      }
      default: {
        throw new Error("Invalid version");
      }
    }
  }
  static createV0(digest2) {
    return _CID.create(0, DAG_PB_CODE, digest2);
  }
  static createV1(code2, digest2) {
    return _CID.create(1, code2, digest2);
  }
  static decode(bytes) {
    const [cid, remainder] = _CID.decodeFirst(bytes);
    if (remainder.length) {
      throw new Error("Incorrect length");
    }
    return cid;
  }
  static decodeFirst(bytes) {
    const specs = _CID.inspectBytes(bytes);
    const prefixSize = specs.size - specs.multihashSize;
    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
    if (multihashBytes.byteLength !== specs.multihashSize) {
      throw new Error("Incorrect length");
    }
    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
    const digest2 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
    const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
    return [
      cid,
      bytes.subarray(specs.size)
    ];
  }
  static inspectBytes(initialBytes) {
    let offset = 0;
    const next = () => {
      const [i6, length2] = decode6(initialBytes.subarray(offset));
      offset += length2;
      return i6;
    };
    let version2 = next();
    let codec = DAG_PB_CODE;
    if (version2 === 18) {
      version2 = 0;
      offset = 0;
    } else if (version2 === 1) {
      codec = next();
    }
    if (version2 !== 0 && version2 !== 1) {
      throw new RangeError(`Invalid CID version ${version2}`);
    }
    const prefixSize = offset;
    const multihashCode = next();
    const digestSize = next();
    const size4 = offset + digestSize;
    const multihashSize = size4 - prefixSize;
    return {
      version: version2,
      codec,
      multihashCode,
      digestSize,
      multihashSize,
      size: size4
    };
  }
  static parse(source, base3) {
    const [prefix, bytes] = parseCIDtoBytes(source, base3);
    const cid = _CID.decode(bytes);
    cid._baseCache.set(prefix, source);
    return cid;
  }
};
var parseCIDtoBytes = (source, base3) => {
  switch (source[0]) {
    case "Q": {
      const decoder = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder.decode(`${base58btc.prefix}${source}`)
      ];
    }
    case base58btc.prefix: {
      const decoder = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder.decode(source)
      ];
    }
    case base322.prefix: {
      const decoder = base3 || base322;
      return [
        base322.prefix,
        decoder.decode(source)
      ];
    }
    default: {
      if (base3 == null) {
        throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
      }
      return [
        source[0],
        base3.decode(source)
      ];
    }
  }
};
var toStringV0 = (bytes, cache, base3) => {
  const { prefix } = base3;
  if (prefix !== base58btc.prefix) {
    throw Error(`Cannot string encode V0 in ${base3.name} encoding`);
  }
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes).slice(1);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var toStringV1 = (bytes, cache, base3) => {
  const { prefix } = base3;
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var DAG_PB_CODE = 112;
var SHA_256_CODE = 18;
var encodeCID = (version2, code2, multihash) => {
  const codeOffset = encodingLength(version2);
  const hashOffset = codeOffset + encodingLength(code2);
  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
  encodeTo(version2, bytes, 0);
  encodeTo(code2, bytes, codeOffset);
  bytes.set(multihash, hashOffset);
  return bytes;
};
var cidSymbol = Symbol.for("@ipld/js-cid/CID");
var readonly = {
  writable: false,
  configurable: false,
  enumerable: true
};
var hidden = {
  writable: false,
  enumerable: false,
  configurable: false
};
var version = "0.0.0-dev";
var deprecate = (range, message) => {
  if (range.test(version)) {
    console.warn(message);
  } else {
    throw new Error(message);
  }
};
var IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;

// node_modules/multiformats/esm/src/basics.js
var bases = {
  ...identity_exports,
  ...base2_exports,
  ...base8_exports,
  ...base10_exports,
  ...base16_exports,
  ...base32_exports,
  ...base36_exports,
  ...base58_exports,
  ...base64_exports,
  ...base256emoji_exports
};
var hashes = {
  ...sha2_browser_exports,
  ...identity_exports2
};

// node_modules/uint8arrays/esm/src/util/bases.js
function createCodec(name2, prefix, encode9, decode8) {
  return {
    name: name2,
    prefix,
    encoder: {
      name: name2,
      prefix,
      encode: encode9
    },
    decoder: { decode: decode8 }
  };
}
var string = createCodec("utf8", "u", (buf) => {
  const decoder = new TextDecoder("utf8");
  return "u" + decoder.decode(buf);
}, (str) => {
  const encoder = new TextEncoder();
  return encoder.encode(str.substring(1));
});
var ascii = createCodec("ascii", "a", (buf) => {
  let string2 = "a";
  for (let i6 = 0; i6 < buf.length; i6++) {
    string2 += String.fromCharCode(buf[i6]);
  }
  return string2;
}, (str) => {
  str = str.substring(1);
  const buf = allocUnsafe(str.length);
  for (let i6 = 0; i6 < str.length; i6++) {
    buf[i6] = str.charCodeAt(i6);
  }
  return buf;
});
var BASES = {
  utf8: string,
  "utf-8": string,
  hex: bases.base16,
  latin1: ascii,
  ascii,
  binary: ascii,
  ...bases
};
var bases_default = BASES;

// node_modules/uint8arrays/esm/src/from-string.js
function fromString4(string2, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return asUint8Array(globalThis.Buffer.from(string2, "utf-8"));
  }
  return base3.decoder.decode(`${base3.prefix}${string2}`);
}

// node_modules/uint8arrays/esm/src/to-string.js
function toString3(array, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base3.encoder.encode(array).substring(1);
}

// node_modules/@walletconnect/relay-api/dist/index.es.js
var C2 = { waku: { publish: "waku_publish", batchPublish: "waku_batchPublish", subscribe: "waku_subscribe", batchSubscribe: "waku_batchSubscribe", subscription: "waku_subscription", unsubscribe: "waku_unsubscribe", batchUnsubscribe: "waku_batchUnsubscribe", batchFetchMessages: "waku_batchFetchMessages" }, irn: { publish: "irn_publish", batchPublish: "irn_batchPublish", subscribe: "irn_subscribe", batchSubscribe: "irn_batchSubscribe", subscription: "irn_subscription", unsubscribe: "irn_unsubscribe", batchUnsubscribe: "irn_batchUnsubscribe", batchFetchMessages: "irn_batchFetchMessages" }, iridium: { publish: "iridium_publish", batchPublish: "iridium_batchPublish", subscribe: "iridium_subscribe", batchSubscribe: "iridium_batchSubscribe", subscription: "iridium_subscription", unsubscribe: "iridium_unsubscribe", batchUnsubscribe: "iridium_batchUnsubscribe", batchFetchMessages: "iridium_batchFetchMessages" } };

// node_modules/@walletconnect/utils/dist/index.es.js
var import_blakejs = __toESM(require_blakejs());
var xe2 = ":";
function Fe(t2) {
  const [e3, n6] = t2.split(xe2);
  return { namespace: e3, reference: n6 };
}
function ve2(t2, e3) {
  return t2.includes(":") ? [t2] : e3.chains || [];
}
var Rs = Object.defineProperty;
var $s = Object.defineProperties;
var Cs = Object.getOwnPropertyDescriptors;
var Xn2 = Object.getOwnPropertySymbols;
var Ls = Object.prototype.hasOwnProperty;
var js = Object.prototype.propertyIsEnumerable;
var Jn2 = (t2, e3, n6) => e3 in t2 ? Rs(t2, e3, { enumerable: true, configurable: true, writable: true, value: n6 }) : t2[e3] = n6;
var Qn2 = (t2, e3) => {
  for (var n6 in e3 || (e3 = {})) Ls.call(e3, n6) && Jn2(t2, n6, e3[n6]);
  if (Xn2) for (var n6 of Xn2(e3)) js.call(e3, n6) && Jn2(t2, n6, e3[n6]);
  return t2;
};
var ks = (t2, e3) => $s(t2, Cs(e3));
var tr2 = "ReactNative";
var J3 = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var nr2 = "js";
function We2() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function Bt2() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === tr2;
}
function Ds() {
  return Bt2() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "android";
}
function Ms() {
  return Bt2() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "ios";
}
function zt2() {
  return !We2() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function Pt2() {
  return Bt2() ? J3.reactNative : We2() ? J3.node : zt2() ? J3.browser : J3.unknown;
}
function Vs() {
  var t2;
  try {
    return Bt2() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (t2 = global.Application) == null ? void 0 : t2.applicationId : void 0;
  } catch {
    return;
  }
}
function rr2(t2, e3) {
  const n6 = new URLSearchParams(t2);
  for (const r4 of Object.keys(e3).sort()) if (e3.hasOwnProperty(r4)) {
    const o6 = e3[r4];
    o6 !== void 0 && n6.set(r4, o6);
  }
  return n6.toString();
}
function qs(t2) {
  var e3, n6;
  const r4 = or3();
  try {
    return t2 != null && t2.url && r4.url && new URL(t2.url).host !== new URL(r4.url).host && (console.warn(`The configured WalletConnect 'metadata.url':${t2.url} differs from the actual page url:${r4.url}. This is probably unintended and can lead to issues.`), t2.url = r4.url), (e3 = t2 == null ? void 0 : t2.icons) != null && e3.length && t2.icons.length > 0 && (t2.icons = t2.icons.filter((o6) => o6 !== "")), ks(Qn2(Qn2({}, r4), t2), { url: (t2 == null ? void 0 : t2.url) || r4.url, name: (t2 == null ? void 0 : t2.name) || r4.name, description: (t2 == null ? void 0 : t2.description) || r4.description, icons: (n6 = t2 == null ? void 0 : t2.icons) != null && n6.length && t2.icons.length > 0 ? t2.icons : r4.icons });
  } catch (o6) {
    return console.warn("Error populating app metadata", o6), t2 || r4;
  }
}
function or3() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function sr2() {
  if (Pt2() === J3.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: n6, Version: r4 } = global.Platform;
    return [n6, r4].join("-");
  }
  const t2 = detect();
  if (t2 === null) return "unknown";
  const e3 = t2.os ? t2.os.replace(" ", "").toLowerCase() : "unknown";
  return t2.type === "browser" ? [e3, t2.name, t2.version].join("-") : [e3, t2.version].join("-");
}
function ir2() {
  var t2;
  const e3 = Pt2();
  return e3 === J3.browser ? [e3, ((t2 = (0, import_window_getters.getLocation)()) == null ? void 0 : t2.host) || "unknown"].join(":") : e3;
}
function fr2(t2, e3, n6) {
  const r4 = sr2(), o6 = ir2();
  return [[t2, e3].join("-"), [nr2, n6].join("-"), r4, o6].join("/");
}
function Fs({ protocol: t2, version: e3, relayUrl: n6, sdkVersion: r4, auth: o6, projectId: s4, useOnCloseEvent: i6, bundleId: f9, packageName: c8 }) {
  const u5 = n6.split("?"), a4 = fr2(t2, e3, r4), l9 = { auth: o6, ua: a4, projectId: s4, useOnCloseEvent: i6 || void 0, packageName: c8 || void 0, bundleId: f9 || void 0 }, h7 = rr2(u5[1] || "", l9);
  return u5[0] + "?" + h7;
}
function It2(t2, e3) {
  return t2.filter((n6) => e3.includes(n6)).length === t2.length;
}
function Ws(t2) {
  return Object.fromEntries(t2.entries());
}
function Ys(t2) {
  return new Map(Object.entries(t2));
}
function ti(t2 = import_time3.FIVE_MINUTES, e3) {
  const n6 = (0, import_time3.toMiliseconds)(t2 || import_time3.FIVE_MINUTES);
  let r4, o6, s4, i6;
  return { resolve: (f9) => {
    s4 && r4 && (clearTimeout(s4), r4(f9), i6 = Promise.resolve(f9));
  }, reject: (f9) => {
    s4 && o6 && (clearTimeout(s4), o6(f9));
  }, done: () => new Promise((f9, c8) => {
    if (i6) return f9(i6);
    s4 = setTimeout(() => {
      const u5 = new Error(e3);
      i6 = Promise.reject(u5), c8(u5);
    }, n6), r4 = f9, o6 = c8;
  }) };
}
function ei(t2, e3, n6) {
  return new Promise(async (r4, o6) => {
    const s4 = setTimeout(() => o6(new Error(n6)), e3);
    try {
      const i6 = await t2;
      r4(i6);
    } catch (i6) {
      o6(i6);
    }
    clearTimeout(s4);
  });
}
function Ye2(t2, e3) {
  if (typeof e3 == "string" && e3.startsWith(`${t2}:`)) return e3;
  if (t2.toLowerCase() === "topic") {
    if (typeof e3 != "string") throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${e3}`;
  } else if (t2.toLowerCase() === "id") {
    if (typeof e3 != "number") throw new Error('Value must be "number" for expirer target type: id');
    return `id:${e3}`;
  }
  throw new Error(`Unknown expirer target type: ${t2}`);
}
function ni(t2) {
  return Ye2("topic", t2);
}
function ri(t2) {
  return Ye2("id", t2);
}
function oi(t2) {
  const [e3, n6] = t2.split(":"), r4 = { id: void 0, topic: void 0 };
  if (e3 === "topic" && typeof n6 == "string") r4.topic = n6;
  else if (e3 === "id" && Number.isInteger(Number(n6))) r4.id = Number(n6);
  else throw new Error(`Invalid target, expected id:number or topic:string, got ${e3}:${n6}`);
  return r4;
}
function si(t2, e3) {
  return (0, import_time3.fromMiliseconds)((e3 || Date.now()) + (0, import_time3.toMiliseconds)(t2));
}
function ii(t2) {
  return Date.now() >= (0, import_time3.toMiliseconds)(t2);
}
function fi(t2, e3) {
  return `${t2}${e3 ? `:${e3}` : ""}`;
}
function ct2(t2 = [], e3 = []) {
  return [.../* @__PURE__ */ new Set([...t2, ...e3])];
}
async function ci({ id: t2, topic: e3, wcDeepLink: n6 }) {
  var r4;
  try {
    if (!n6) return;
    const o6 = typeof n6 == "string" ? JSON.parse(n6) : n6, s4 = o6 == null ? void 0 : o6.href;
    if (typeof s4 != "string") return;
    const i6 = lr2(s4, t2, e3), f9 = Pt2();
    if (f9 === J3.browser) {
      if (!((r4 = (0, import_window_getters.getDocument)()) != null && r4.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      dr2(i6);
    } else f9 === J3.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(i6);
  } catch (o6) {
    console.error(o6);
  }
}
function lr2(t2, e3, n6) {
  const r4 = `requestId=${e3}&sessionTopic=${n6}`;
  t2.endsWith("/") && (t2 = t2.slice(0, -1));
  let o6 = `${t2}`;
  if (t2.startsWith("https://t.me")) {
    const s4 = t2.includes("?") ? "&startapp=" : "?startapp=";
    o6 = `${o6}${s4}${gr2(r4, true)}`;
  } else o6 = `${o6}/wc?${r4}`;
  return o6;
}
function dr2(t2) {
  let e3 = "_self";
  pr2() ? e3 = "_top" : (hr2() || t2.startsWith("https://") || t2.startsWith("http://")) && (e3 = "_blank"), window.open(t2, e3, "noreferrer noopener");
}
async function ai(t2, e3) {
  let n6 = "";
  try {
    if (zt2() && (n6 = localStorage.getItem(e3), n6)) return n6;
    n6 = await t2.getItem(e3);
  } catch (r4) {
    console.error(r4);
  }
  return n6;
}
function ui(t2, e3) {
  if (!t2.includes(e3)) return null;
  const n6 = t2.split(/([&,?,=])/), r4 = n6.indexOf(e3);
  return n6[r4 + 2];
}
function li() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (t2) => {
    const e3 = Math.random() * 16 | 0;
    return (t2 === "x" ? e3 : e3 & 3 | 8).toString(16);
  });
}
function di() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function hr2() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function pr2() {
  try {
    return window.self !== window.top;
  } catch {
    return false;
  }
}
function gr2(t2, e3 = false) {
  const n6 = Buffer.from(t2).toString("base64");
  return e3 ? n6.replace(/[=]/g, "") : n6;
}
function Je2(t2) {
  return Buffer.from(t2, "base64").toString("utf-8");
}
function hi(t2) {
  return new Promise((e3) => setTimeout(e3, t2));
}
var Be2 = BigInt(2 ** 32 - 1);
var br2 = BigInt(32);
function yr2(t2, e3 = false) {
  return e3 ? { h: Number(t2 & Be2), l: Number(t2 >> br2 & Be2) } : { h: Number(t2 >> br2 & Be2) | 0, l: Number(t2 & Be2) | 0 };
}
function mr2(t2, e3 = false) {
  const n6 = t2.length;
  let r4 = new Uint32Array(n6), o6 = new Uint32Array(n6);
  for (let s4 = 0; s4 < n6; s4++) {
    const { h: i6, l: f9 } = yr2(t2[s4], e3);
    [r4[s4], o6[s4]] = [i6, f9];
  }
  return [r4, o6];
}
var wr2 = (t2, e3, n6) => t2 >>> n6;
var xr2 = (t2, e3, n6) => t2 << 32 - n6 | e3 >>> n6;
var At = (t2, e3, n6) => t2 >>> n6 | e3 << 32 - n6;
var St2 = (t2, e3, n6) => t2 << 32 - n6 | e3 >>> n6;
var se = (t2, e3, n6) => t2 << 64 - n6 | e3 >>> n6 - 32;
var ie = (t2, e3, n6) => t2 >>> n6 - 32 | e3 << 64 - n6;
var pi = (t2, e3) => e3;
var gi = (t2, e3) => t2;
var bi = (t2, e3, n6) => t2 << n6 | e3 >>> 32 - n6;
var yi = (t2, e3, n6) => e3 << n6 | t2 >>> 32 - n6;
var mi = (t2, e3, n6) => e3 << n6 - 32 | t2 >>> 64 - n6;
var wi = (t2, e3, n6) => t2 << n6 - 32 | e3 >>> 64 - n6;
function dt2(t2, e3, n6, r4) {
  const o6 = (e3 >>> 0) + (r4 >>> 0);
  return { h: t2 + n6 + (o6 / 2 ** 32 | 0) | 0, l: o6 | 0 };
}
var Qe2 = (t2, e3, n6) => (t2 >>> 0) + (e3 >>> 0) + (n6 >>> 0);
var tn = (t2, e3, n6, r4) => e3 + n6 + r4 + (t2 / 2 ** 32 | 0) | 0;
var xi = (t2, e3, n6, r4) => (t2 >>> 0) + (e3 >>> 0) + (n6 >>> 0) + (r4 >>> 0);
var vi = (t2, e3, n6, r4, o6) => e3 + n6 + r4 + o6 + (t2 / 2 ** 32 | 0) | 0;
var Ei = (t2, e3, n6, r4, o6) => (t2 >>> 0) + (e3 >>> 0) + (n6 >>> 0) + (r4 >>> 0) + (o6 >>> 0);
var Bi = (t2, e3, n6, r4, o6, s4) => e3 + n6 + r4 + o6 + s4 + (t2 / 2 ** 32 | 0) | 0;
var Gt2 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function en2(t2) {
  return t2 instanceof Uint8Array || ArrayBuffer.isView(t2) && t2.constructor.name === "Uint8Array";
}
function mt(t2) {
  if (!Number.isSafeInteger(t2) || t2 < 0) throw new Error("positive integer expected, got " + t2);
}
function at(t2, ...e3) {
  if (!en2(t2)) throw new Error("Uint8Array expected");
  if (e3.length > 0 && !e3.includes(t2.length)) throw new Error("Uint8Array expected of length " + e3 + ", got length=" + t2.length);
}
function nn2(t2) {
  if (typeof t2 != "function" || typeof t2.create != "function") throw new Error("Hash should be wrapped by utils.createHasher");
  mt(t2.outputLen), mt(t2.blockLen);
}
function Nt2(t2, e3 = true) {
  if (t2.destroyed) throw new Error("Hash instance has been destroyed");
  if (e3 && t2.finished) throw new Error("Hash#digest() has already been called");
}
function rn2(t2, e3) {
  at(t2);
  const n6 = e3.outputLen;
  if (t2.length < n6) throw new Error("digestInto() expects output buffer of length at least " + n6);
}
function fe2(t2) {
  return new Uint32Array(t2.buffer, t2.byteOffset, Math.floor(t2.byteLength / 4));
}
function ut2(...t2) {
  for (let e3 = 0; e3 < t2.length; e3++) t2[e3].fill(0);
}
function on2(t2) {
  return new DataView(t2.buffer, t2.byteOffset, t2.byteLength);
}
function gt2(t2, e3) {
  return t2 << 32 - e3 | t2 >>> e3;
}
var vr2 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Er2(t2) {
  return t2 << 24 & 4278190080 | t2 << 8 & 16711680 | t2 >>> 8 & 65280 | t2 >>> 24 & 255;
}
var wt2 = vr2 ? (t2) => t2 : (t2) => Er2(t2);
function Ii(t2) {
  for (let e3 = 0; e3 < t2.length; e3++) t2[e3] = Er2(t2[e3]);
  return t2;
}
var Ot2 = vr2 ? (t2) => t2 : Ii;
var Br2 = typeof Uint8Array.from([]).toHex == "function" && typeof Uint8Array.fromHex == "function";
var Ai = Array.from({ length: 256 }, (t2, e3) => e3.toString(16).padStart(2, "0"));
function ce(t2) {
  if (at(t2), Br2) return t2.toHex();
  let e3 = "";
  for (let n6 = 0; n6 < t2.length; n6++) e3 += Ai[t2[n6]];
  return e3;
}
var xt2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Ir2(t2) {
  if (t2 >= xt2._0 && t2 <= xt2._9) return t2 - xt2._0;
  if (t2 >= xt2.A && t2 <= xt2.F) return t2 - (xt2.A - 10);
  if (t2 >= xt2.a && t2 <= xt2.f) return t2 - (xt2.a - 10);
}
function sn2(t2) {
  if (typeof t2 != "string") throw new Error("hex string expected, got " + typeof t2);
  if (Br2) return Uint8Array.fromHex(t2);
  const e3 = t2.length, n6 = e3 / 2;
  if (e3 % 2) throw new Error("hex string expected, got unpadded hex of length " + e3);
  const r4 = new Uint8Array(n6);
  for (let o6 = 0, s4 = 0; o6 < n6; o6++, s4 += 2) {
    const i6 = Ir2(t2.charCodeAt(s4)), f9 = Ir2(t2.charCodeAt(s4 + 1));
    if (i6 === void 0 || f9 === void 0) {
      const c8 = t2[s4] + t2[s4 + 1];
      throw new Error('hex string expected, got non-hex character "' + c8 + '" at index ' + s4);
    }
    r4[o6] = i6 * 16 + f9;
  }
  return r4;
}
function Si(t2) {
  if (typeof t2 != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t2));
}
function ht2(t2) {
  return typeof t2 == "string" && (t2 = Si(t2)), at(t2), t2;
}
function Ht2(...t2) {
  let e3 = 0;
  for (let r4 = 0; r4 < t2.length; r4++) {
    const o6 = t2[r4];
    at(o6), e3 += o6.length;
  }
  const n6 = new Uint8Array(e3);
  for (let r4 = 0, o6 = 0; r4 < t2.length; r4++) {
    const s4 = t2[r4];
    n6.set(s4, o6), o6 += s4.length;
  }
  return n6;
}
var Ie2 = class {
};
function ae(t2) {
  const e3 = (r4) => t2().update(ht2(r4)).digest(), n6 = t2();
  return e3.outputLen = n6.outputLen, e3.blockLen = n6.blockLen, e3.create = () => t2(), e3;
}
function Ni(t2) {
  const e3 = (r4, o6) => t2(o6).update(ht2(r4)).digest(), n6 = t2({});
  return e3.outputLen = n6.outputLen, e3.blockLen = n6.blockLen, e3.create = (r4) => t2(r4), e3;
}
function Zt2(t2 = 32) {
  if (Gt2 && typeof Gt2.getRandomValues == "function") return Gt2.getRandomValues(new Uint8Array(t2));
  if (Gt2 && typeof Gt2.randomBytes == "function") return Uint8Array.from(Gt2.randomBytes(t2));
  throw new Error("crypto.getRandomValues must be defined");
}
var Oi = BigInt(0);
var ue = BigInt(1);
var Ui = BigInt(2);
var _i = BigInt(7);
var Ti = BigInt(256);
var Ri = BigInt(113);
var Ar2 = [];
var Sr2 = [];
var Nr2 = [];
for (let t2 = 0, e3 = ue, n6 = 1, r4 = 0; t2 < 24; t2++) {
  [n6, r4] = [r4, (2 * n6 + 3 * r4) % 5], Ar2.push(2 * (5 * r4 + n6)), Sr2.push((t2 + 1) * (t2 + 2) / 2 % 64);
  let o6 = Oi;
  for (let s4 = 0; s4 < 7; s4++) e3 = (e3 << ue ^ (e3 >> _i) * Ri) % Ti, e3 & Ui && (o6 ^= ue << (ue << BigInt(s4)) - ue);
  Nr2.push(o6);
}
var Or2 = mr2(Nr2, true);
var $i = Or2[0];
var Ci = Or2[1];
var Ur2 = (t2, e3, n6) => n6 > 32 ? mi(t2, e3, n6) : bi(t2, e3, n6);
var _r2 = (t2, e3, n6) => n6 > 32 ? wi(t2, e3, n6) : yi(t2, e3, n6);
function Li(t2, e3 = 24) {
  const n6 = new Uint32Array(10);
  for (let r4 = 24 - e3; r4 < 24; r4++) {
    for (let i6 = 0; i6 < 10; i6++) n6[i6] = t2[i6] ^ t2[i6 + 10] ^ t2[i6 + 20] ^ t2[i6 + 30] ^ t2[i6 + 40];
    for (let i6 = 0; i6 < 10; i6 += 2) {
      const f9 = (i6 + 8) % 10, c8 = (i6 + 2) % 10, u5 = n6[c8], a4 = n6[c8 + 1], l9 = Ur2(u5, a4, 1) ^ n6[f9], h7 = _r2(u5, a4, 1) ^ n6[f9 + 1];
      for (let g4 = 0; g4 < 50; g4 += 10) t2[i6 + g4] ^= l9, t2[i6 + g4 + 1] ^= h7;
    }
    let o6 = t2[2], s4 = t2[3];
    for (let i6 = 0; i6 < 24; i6++) {
      const f9 = Sr2[i6], c8 = Ur2(o6, s4, f9), u5 = _r2(o6, s4, f9), a4 = Ar2[i6];
      o6 = t2[a4], s4 = t2[a4 + 1], t2[a4] = c8, t2[a4 + 1] = u5;
    }
    for (let i6 = 0; i6 < 50; i6 += 10) {
      for (let f9 = 0; f9 < 10; f9++) n6[f9] = t2[i6 + f9];
      for (let f9 = 0; f9 < 10; f9++) t2[i6 + f9] ^= ~n6[(f9 + 2) % 10] & n6[(f9 + 4) % 10];
    }
    t2[0] ^= $i[r4], t2[1] ^= Ci[r4];
  }
  ut2(n6);
}
var Vn2 = class _Vn extends Ie2 {
  constructor(e3, n6, r4, o6 = false, s4 = 24) {
    if (super(), this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, this.enableXOF = false, this.blockLen = e3, this.suffix = n6, this.outputLen = r4, this.enableXOF = o6, this.rounds = s4, mt(r4), !(0 < e3 && e3 < 200)) throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200), this.state32 = fe2(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    Ot2(this.state32), Li(this.state32, this.rounds), Ot2(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(e3) {
    Nt2(this), e3 = ht2(e3), at(e3);
    const { blockLen: n6, state: r4 } = this, o6 = e3.length;
    for (let s4 = 0; s4 < o6; ) {
      const i6 = Math.min(n6 - this.pos, o6 - s4);
      for (let f9 = 0; f9 < i6; f9++) r4[this.pos++] ^= e3[s4++];
      this.pos === n6 && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished) return;
    this.finished = true;
    const { state: e3, suffix: n6, pos: r4, blockLen: o6 } = this;
    e3[r4] ^= n6, (n6 & 128) !== 0 && r4 === o6 - 1 && this.keccak(), e3[o6 - 1] ^= 128, this.keccak();
  }
  writeInto(e3) {
    Nt2(this, false), at(e3), this.finish();
    const n6 = this.state, { blockLen: r4 } = this;
    for (let o6 = 0, s4 = e3.length; o6 < s4; ) {
      this.posOut >= r4 && this.keccak();
      const i6 = Math.min(r4 - this.posOut, s4 - o6);
      e3.set(n6.subarray(this.posOut, this.posOut + i6), o6), this.posOut += i6, o6 += i6;
    }
    return e3;
  }
  xofInto(e3) {
    if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
    return this.writeInto(e3);
  }
  xof(e3) {
    return mt(e3), this.xofInto(new Uint8Array(e3));
  }
  digestInto(e3) {
    if (rn2(e3, this), this.finished) throw new Error("digest() was already called");
    return this.writeInto(e3), this.destroy(), e3;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, ut2(this.state);
  }
  _cloneInto(e3) {
    const { blockLen: n6, suffix: r4, outputLen: o6, rounds: s4, enableXOF: i6 } = this;
    return e3 || (e3 = new _Vn(n6, r4, o6, i6, s4)), e3.state32.set(this.state32), e3.pos = this.pos, e3.posOut = this.posOut, e3.finished = this.finished, e3.rounds = s4, e3.suffix = r4, e3.outputLen = o6, e3.enableXOF = i6, e3.destroyed = this.destroyed, e3;
  }
};
var ji = (t2, e3, n6) => ae(() => new Vn2(e3, t2, n6));
var ki = ji(1, 136, 256 / 8);
function Pi(t2, e3, n6, r4) {
  if (typeof t2.setBigUint64 == "function") return t2.setBigUint64(e3, n6, r4);
  const o6 = BigInt(32), s4 = BigInt(4294967295), i6 = Number(n6 >> o6 & s4), f9 = Number(n6 & s4), c8 = r4 ? 4 : 0, u5 = r4 ? 0 : 4;
  t2.setUint32(e3 + c8, i6, r4), t2.setUint32(e3 + u5, f9, r4);
}
function Hi(t2, e3, n6) {
  return t2 & e3 ^ ~t2 & n6;
}
function Di(t2, e3, n6) {
  return t2 & e3 ^ t2 & n6 ^ e3 & n6;
}
var Tr2 = class extends Ie2 {
  constructor(e3, n6, r4, o6) {
    super(), this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.blockLen = e3, this.outputLen = n6, this.padOffset = r4, this.isLE = o6, this.buffer = new Uint8Array(e3), this.view = on2(this.buffer);
  }
  update(e3) {
    Nt2(this), e3 = ht2(e3), at(e3);
    const { view: n6, buffer: r4, blockLen: o6 } = this, s4 = e3.length;
    for (let i6 = 0; i6 < s4; ) {
      const f9 = Math.min(o6 - this.pos, s4 - i6);
      if (f9 === o6) {
        const c8 = on2(e3);
        for (; o6 <= s4 - i6; i6 += o6) this.process(c8, i6);
        continue;
      }
      r4.set(e3.subarray(i6, i6 + f9), this.pos), this.pos += f9, i6 += f9, this.pos === o6 && (this.process(n6, 0), this.pos = 0);
    }
    return this.length += e3.length, this.roundClean(), this;
  }
  digestInto(e3) {
    Nt2(this), rn2(e3, this), this.finished = true;
    const { buffer: n6, view: r4, blockLen: o6, isLE: s4 } = this;
    let { pos: i6 } = this;
    n6[i6++] = 128, ut2(this.buffer.subarray(i6)), this.padOffset > o6 - i6 && (this.process(r4, 0), i6 = 0);
    for (let l9 = i6; l9 < o6; l9++) n6[l9] = 0;
    Pi(r4, o6 - 8, BigInt(this.length * 8), s4), this.process(r4, 0);
    const f9 = on2(e3), c8 = this.outputLen;
    if (c8 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u5 = c8 / 4, a4 = this.get();
    if (u5 > a4.length) throw new Error("_sha2: outputLen bigger than state");
    for (let l9 = 0; l9 < u5; l9++) f9.setUint32(4 * l9, a4[l9], s4);
  }
  digest() {
    const { buffer: e3, outputLen: n6 } = this;
    this.digestInto(e3);
    const r4 = e3.slice(0, n6);
    return this.destroy(), r4;
  }
  _cloneInto(e3) {
    e3 || (e3 = new this.constructor()), e3.set(...this.get());
    const { blockLen: n6, buffer: r4, length: o6, finished: s4, destroyed: i6, pos: f9 } = this;
    return e3.destroyed = i6, e3.finished = s4, e3.length = o6, e3.pos = f9, o6 % n6 && e3.buffer.set(r4), e3;
  }
  clone() {
    return this._cloneInto();
  }
};
var Ut2 = Uint32Array.from([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var W2 = Uint32Array.from([3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428]);
var Y = Uint32Array.from([1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209]);
var Mi = Uint32Array.from([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var _t2 = new Uint32Array(64);
var Vi = class extends Tr2 {
  constructor(e3 = 32) {
    super(64, e3, 8, false), this.A = Ut2[0] | 0, this.B = Ut2[1] | 0, this.C = Ut2[2] | 0, this.D = Ut2[3] | 0, this.E = Ut2[4] | 0, this.F = Ut2[5] | 0, this.G = Ut2[6] | 0, this.H = Ut2[7] | 0;
  }
  get() {
    const { A: e3, B: n6, C: r4, D: o6, E: s4, F: i6, G: f9, H: c8 } = this;
    return [e3, n6, r4, o6, s4, i6, f9, c8];
  }
  set(e3, n6, r4, o6, s4, i6, f9, c8) {
    this.A = e3 | 0, this.B = n6 | 0, this.C = r4 | 0, this.D = o6 | 0, this.E = s4 | 0, this.F = i6 | 0, this.G = f9 | 0, this.H = c8 | 0;
  }
  process(e3, n6) {
    for (let l9 = 0; l9 < 16; l9++, n6 += 4) _t2[l9] = e3.getUint32(n6, false);
    for (let l9 = 16; l9 < 64; l9++) {
      const h7 = _t2[l9 - 15], g4 = _t2[l9 - 2], m4 = gt2(h7, 7) ^ gt2(h7, 18) ^ h7 >>> 3, b6 = gt2(g4, 17) ^ gt2(g4, 19) ^ g4 >>> 10;
      _t2[l9] = b6 + _t2[l9 - 7] + m4 + _t2[l9 - 16] | 0;
    }
    let { A: r4, B: o6, C: s4, D: i6, E: f9, F: c8, G: u5, H: a4 } = this;
    for (let l9 = 0; l9 < 64; l9++) {
      const h7 = gt2(f9, 6) ^ gt2(f9, 11) ^ gt2(f9, 25), g4 = a4 + h7 + Hi(f9, c8, u5) + Mi[l9] + _t2[l9] | 0, b6 = (gt2(r4, 2) ^ gt2(r4, 13) ^ gt2(r4, 22)) + Di(r4, o6, s4) | 0;
      a4 = u5, u5 = c8, c8 = f9, f9 = i6 + g4 | 0, i6 = s4, s4 = o6, o6 = r4, r4 = g4 + b6 | 0;
    }
    r4 = r4 + this.A | 0, o6 = o6 + this.B | 0, s4 = s4 + this.C | 0, i6 = i6 + this.D | 0, f9 = f9 + this.E | 0, c8 = c8 + this.F | 0, u5 = u5 + this.G | 0, a4 = a4 + this.H | 0, this.set(r4, o6, s4, i6, f9, c8, u5, a4);
  }
  roundClean() {
    ut2(_t2);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), ut2(this.buffer);
  }
};
var Rr2 = mr2(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t2) => BigInt(t2)));
var qi = Rr2[0];
var Ki = Rr2[1];
var Tt2 = new Uint32Array(80);
var Rt2 = new Uint32Array(80);
var fn = class extends Tr2 {
  constructor(e3 = 64) {
    super(128, e3, 16, false), this.Ah = Y[0] | 0, this.Al = Y[1] | 0, this.Bh = Y[2] | 0, this.Bl = Y[3] | 0, this.Ch = Y[4] | 0, this.Cl = Y[5] | 0, this.Dh = Y[6] | 0, this.Dl = Y[7] | 0, this.Eh = Y[8] | 0, this.El = Y[9] | 0, this.Fh = Y[10] | 0, this.Fl = Y[11] | 0, this.Gh = Y[12] | 0, this.Gl = Y[13] | 0, this.Hh = Y[14] | 0, this.Hl = Y[15] | 0;
  }
  get() {
    const { Ah: e3, Al: n6, Bh: r4, Bl: o6, Ch: s4, Cl: i6, Dh: f9, Dl: c8, Eh: u5, El: a4, Fh: l9, Fl: h7, Gh: g4, Gl: m4, Hh: b6, Hl: v6 } = this;
    return [e3, n6, r4, o6, s4, i6, f9, c8, u5, a4, l9, h7, g4, m4, b6, v6];
  }
  set(e3, n6, r4, o6, s4, i6, f9, c8, u5, a4, l9, h7, g4, m4, b6, v6) {
    this.Ah = e3 | 0, this.Al = n6 | 0, this.Bh = r4 | 0, this.Bl = o6 | 0, this.Ch = s4 | 0, this.Cl = i6 | 0, this.Dh = f9 | 0, this.Dl = c8 | 0, this.Eh = u5 | 0, this.El = a4 | 0, this.Fh = l9 | 0, this.Fl = h7 | 0, this.Gh = g4 | 0, this.Gl = m4 | 0, this.Hh = b6 | 0, this.Hl = v6 | 0;
  }
  process(e3, n6) {
    for (let C5 = 0; C5 < 16; C5++, n6 += 4) Tt2[C5] = e3.getUint32(n6), Rt2[C5] = e3.getUint32(n6 += 4);
    for (let C5 = 16; C5 < 80; C5++) {
      const H3 = Tt2[C5 - 15] | 0, _3 = Rt2[C5 - 15] | 0, k7 = At(H3, _3, 1) ^ At(H3, _3, 8) ^ wr2(H3, _3, 7), P6 = St2(H3, _3, 1) ^ St2(H3, _3, 8) ^ xr2(H3, _3, 7), R4 = Tt2[C5 - 2] | 0, d6 = Rt2[C5 - 2] | 0, w6 = At(R4, d6, 19) ^ se(R4, d6, 61) ^ wr2(R4, d6, 6), p6 = St2(R4, d6, 19) ^ ie(R4, d6, 61) ^ xr2(R4, d6, 6), y7 = xi(P6, p6, Rt2[C5 - 7], Rt2[C5 - 16]), x6 = vi(y7, k7, w6, Tt2[C5 - 7], Tt2[C5 - 16]);
      Tt2[C5] = x6 | 0, Rt2[C5] = y7 | 0;
    }
    let { Ah: r4, Al: o6, Bh: s4, Bl: i6, Ch: f9, Cl: c8, Dh: u5, Dl: a4, Eh: l9, El: h7, Fh: g4, Fl: m4, Gh: b6, Gl: v6, Hh: L5, Hl: V4 } = this;
    for (let C5 = 0; C5 < 80; C5++) {
      const H3 = At(l9, h7, 14) ^ At(l9, h7, 18) ^ se(l9, h7, 41), _3 = St2(l9, h7, 14) ^ St2(l9, h7, 18) ^ ie(l9, h7, 41), k7 = l9 & g4 ^ ~l9 & b6, P6 = h7 & m4 ^ ~h7 & v6, R4 = Ei(V4, _3, P6, Ki[C5], Rt2[C5]), d6 = Bi(R4, L5, H3, k7, qi[C5], Tt2[C5]), w6 = R4 | 0, p6 = At(r4, o6, 28) ^ se(r4, o6, 34) ^ se(r4, o6, 39), y7 = St2(r4, o6, 28) ^ ie(r4, o6, 34) ^ ie(r4, o6, 39), x6 = r4 & s4 ^ r4 & f9 ^ s4 & f9, B4 = o6 & i6 ^ o6 & c8 ^ i6 & c8;
      L5 = b6 | 0, V4 = v6 | 0, b6 = g4 | 0, v6 = m4 | 0, g4 = l9 | 0, m4 = h7 | 0, { h: l9, l: h7 } = dt2(u5 | 0, a4 | 0, d6 | 0, w6 | 0), u5 = f9 | 0, a4 = c8 | 0, f9 = s4 | 0, c8 = i6 | 0, s4 = r4 | 0, i6 = o6 | 0;
      const E6 = Qe2(w6, y7, B4);
      r4 = tn(E6, d6, p6, x6), o6 = E6 | 0;
    }
    ({ h: r4, l: o6 } = dt2(this.Ah | 0, this.Al | 0, r4 | 0, o6 | 0)), { h: s4, l: i6 } = dt2(this.Bh | 0, this.Bl | 0, s4 | 0, i6 | 0), { h: f9, l: c8 } = dt2(this.Ch | 0, this.Cl | 0, f9 | 0, c8 | 0), { h: u5, l: a4 } = dt2(this.Dh | 0, this.Dl | 0, u5 | 0, a4 | 0), { h: l9, l: h7 } = dt2(this.Eh | 0, this.El | 0, l9 | 0, h7 | 0), { h: g4, l: m4 } = dt2(this.Fh | 0, this.Fl | 0, g4 | 0, m4 | 0), { h: b6, l: v6 } = dt2(this.Gh | 0, this.Gl | 0, b6 | 0, v6 | 0), { h: L5, l: V4 } = dt2(this.Hh | 0, this.Hl | 0, L5 | 0, V4 | 0), this.set(r4, o6, s4, i6, f9, c8, u5, a4, l9, h7, g4, m4, b6, v6, L5, V4);
  }
  roundClean() {
    ut2(Tt2, Rt2);
  }
  destroy() {
    ut2(this.buffer), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Fi = class extends fn {
  constructor() {
    super(48), this.Ah = W2[0] | 0, this.Al = W2[1] | 0, this.Bh = W2[2] | 0, this.Bl = W2[3] | 0, this.Ch = W2[4] | 0, this.Cl = W2[5] | 0, this.Dh = W2[6] | 0, this.Dl = W2[7] | 0, this.Eh = W2[8] | 0, this.El = W2[9] | 0, this.Fh = W2[10] | 0, this.Fl = W2[11] | 0, this.Gh = W2[12] | 0, this.Gl = W2[13] | 0, this.Hh = W2[14] | 0, this.Hl = W2[15] | 0;
  }
};
var X = Uint32Array.from([573645204, 4230739756, 2673172387, 3360449730, 596883563, 1867755857, 2520282905, 1497426621, 2519219938, 2827943907, 3193839141, 1401305490, 721525244, 746961066, 246885852, 2177182882]);
var zi = class extends fn {
  constructor() {
    super(32), this.Ah = X[0] | 0, this.Al = X[1] | 0, this.Bh = X[2] | 0, this.Bl = X[3] | 0, this.Ch = X[4] | 0, this.Cl = X[5] | 0, this.Dh = X[6] | 0, this.Dl = X[7] | 0, this.Eh = X[8] | 0, this.El = X[9] | 0, this.Fh = X[10] | 0, this.Fl = X[11] | 0, this.Gh = X[12] | 0, this.Gl = X[13] | 0, this.Hh = X[14] | 0, this.Hl = X[15] | 0;
  }
};
var Ae2 = ae(() => new Vi());
var Gi = ae(() => new fn());
var Zi = ae(() => new Fi());
var Wi = ae(() => new zi());
var Yi = Uint8Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9]);
var F = Uint32Array.from([4089235720, 1779033703, 2227873595, 3144134277, 4271175723, 1013904242, 1595750129, 2773480762, 2917565137, 1359893119, 725511199, 2600822924, 4215389547, 528734635, 327033209, 1541459225]);
var N10 = new Uint32Array(32);
function $t2(t2, e3, n6, r4, o6, s4) {
  const i6 = o6[s4], f9 = o6[s4 + 1];
  let c8 = N10[2 * t2], u5 = N10[2 * t2 + 1], a4 = N10[2 * e3], l9 = N10[2 * e3 + 1], h7 = N10[2 * n6], g4 = N10[2 * n6 + 1], m4 = N10[2 * r4], b6 = N10[2 * r4 + 1], v6 = Qe2(c8, a4, i6);
  u5 = tn(v6, u5, l9, f9), c8 = v6 | 0, { Dh: b6, Dl: m4 } = { Dh: b6 ^ u5, Dl: m4 ^ c8 }, { Dh: b6, Dl: m4 } = { Dh: pi(b6, m4), Dl: gi(b6) }, { h: g4, l: h7 } = dt2(g4, h7, b6, m4), { Bh: l9, Bl: a4 } = { Bh: l9 ^ g4, Bl: a4 ^ h7 }, { Bh: l9, Bl: a4 } = { Bh: At(l9, a4, 24), Bl: St2(l9, a4, 24) }, N10[2 * t2] = c8, N10[2 * t2 + 1] = u5, N10[2 * e3] = a4, N10[2 * e3 + 1] = l9, N10[2 * n6] = h7, N10[2 * n6 + 1] = g4, N10[2 * r4] = m4, N10[2 * r4 + 1] = b6;
}
function Ct(t2, e3, n6, r4, o6, s4) {
  const i6 = o6[s4], f9 = o6[s4 + 1];
  let c8 = N10[2 * t2], u5 = N10[2 * t2 + 1], a4 = N10[2 * e3], l9 = N10[2 * e3 + 1], h7 = N10[2 * n6], g4 = N10[2 * n6 + 1], m4 = N10[2 * r4], b6 = N10[2 * r4 + 1], v6 = Qe2(c8, a4, i6);
  u5 = tn(v6, u5, l9, f9), c8 = v6 | 0, { Dh: b6, Dl: m4 } = { Dh: b6 ^ u5, Dl: m4 ^ c8 }, { Dh: b6, Dl: m4 } = { Dh: At(b6, m4, 16), Dl: St2(b6, m4, 16) }, { h: g4, l: h7 } = dt2(g4, h7, b6, m4), { Bh: l9, Bl: a4 } = { Bh: l9 ^ g4, Bl: a4 ^ h7 }, { Bh: l9, Bl: a4 } = { Bh: se(l9, a4, 63), Bl: ie(l9, a4, 63) }, N10[2 * t2] = c8, N10[2 * t2 + 1] = u5, N10[2 * e3] = a4, N10[2 * e3 + 1] = l9, N10[2 * n6] = h7, N10[2 * n6 + 1] = g4, N10[2 * r4] = m4, N10[2 * r4 + 1] = b6;
}
function Xi(t2, e3 = {}, n6, r4, o6) {
  if (mt(n6), t2 < 0 || t2 > n6) throw new Error("outputLen bigger than keyLen");
  const { key: s4, salt: i6, personalization: f9 } = e3;
  if (s4 !== void 0 && (s4.length < 1 || s4.length > n6)) throw new Error("key length must be undefined or 1.." + n6);
  if (i6 !== void 0 && i6.length !== r4) throw new Error("salt must be undefined or " + r4);
  if (f9 !== void 0 && f9.length !== o6) throw new Error("personalization must be undefined or " + o6);
}
var Ji = class extends Ie2 {
  constructor(e3, n6) {
    super(), this.finished = false, this.destroyed = false, this.length = 0, this.pos = 0, mt(e3), mt(n6), this.blockLen = e3, this.outputLen = n6, this.buffer = new Uint8Array(e3), this.buffer32 = fe2(this.buffer);
  }
  update(e3) {
    Nt2(this), e3 = ht2(e3), at(e3);
    const { blockLen: n6, buffer: r4, buffer32: o6 } = this, s4 = e3.length, i6 = e3.byteOffset, f9 = e3.buffer;
    for (let c8 = 0; c8 < s4; ) {
      this.pos === n6 && (Ot2(o6), this.compress(o6, 0, false), Ot2(o6), this.pos = 0);
      const u5 = Math.min(n6 - this.pos, s4 - c8), a4 = i6 + c8;
      if (u5 === n6 && !(a4 % 4) && c8 + u5 < s4) {
        const l9 = new Uint32Array(f9, a4, Math.floor((s4 - c8) / 4));
        Ot2(l9);
        for (let h7 = 0; c8 + n6 < s4; h7 += o6.length, c8 += n6) this.length += n6, this.compress(l9, h7, false);
        Ot2(l9);
        continue;
      }
      r4.set(e3.subarray(c8, c8 + u5), this.pos), this.pos += u5, this.length += u5, c8 += u5;
    }
    return this;
  }
  digestInto(e3) {
    Nt2(this), rn2(e3, this);
    const { pos: n6, buffer32: r4 } = this;
    this.finished = true, ut2(this.buffer.subarray(n6)), Ot2(r4), this.compress(r4, 0, true), Ot2(r4);
    const o6 = fe2(e3);
    this.get().forEach((s4, i6) => o6[i6] = wt2(s4));
  }
  digest() {
    const { buffer: e3, outputLen: n6 } = this;
    this.digestInto(e3);
    const r4 = e3.slice(0, n6);
    return this.destroy(), r4;
  }
  _cloneInto(e3) {
    const { buffer: n6, length: r4, finished: o6, destroyed: s4, outputLen: i6, pos: f9 } = this;
    return e3 || (e3 = new this.constructor({ dkLen: i6 })), e3.set(...this.get()), e3.buffer.set(n6), e3.destroyed = s4, e3.finished = o6, e3.length = r4, e3.pos = f9, e3.outputLen = i6, e3;
  }
  clone() {
    return this._cloneInto();
  }
};
var Qi = class extends Ji {
  constructor(e3 = {}) {
    const n6 = e3.dkLen === void 0 ? 64 : e3.dkLen;
    super(128, n6), this.v0l = F[0] | 0, this.v0h = F[1] | 0, this.v1l = F[2] | 0, this.v1h = F[3] | 0, this.v2l = F[4] | 0, this.v2h = F[5] | 0, this.v3l = F[6] | 0, this.v3h = F[7] | 0, this.v4l = F[8] | 0, this.v4h = F[9] | 0, this.v5l = F[10] | 0, this.v5h = F[11] | 0, this.v6l = F[12] | 0, this.v6h = F[13] | 0, this.v7l = F[14] | 0, this.v7h = F[15] | 0, Xi(n6, e3, 64, 16, 16);
    let { key: r4, personalization: o6, salt: s4 } = e3, i6 = 0;
    if (r4 !== void 0 && (r4 = ht2(r4), i6 = r4.length), this.v0l ^= this.outputLen | i6 << 8 | 65536 | 1 << 24, s4 !== void 0) {
      s4 = ht2(s4);
      const f9 = fe2(s4);
      this.v4l ^= wt2(f9[0]), this.v4h ^= wt2(f9[1]), this.v5l ^= wt2(f9[2]), this.v5h ^= wt2(f9[3]);
    }
    if (o6 !== void 0) {
      o6 = ht2(o6);
      const f9 = fe2(o6);
      this.v6l ^= wt2(f9[0]), this.v6h ^= wt2(f9[1]), this.v7l ^= wt2(f9[2]), this.v7h ^= wt2(f9[3]);
    }
    if (r4 !== void 0) {
      const f9 = new Uint8Array(this.blockLen);
      f9.set(r4), this.update(f9);
    }
  }
  get() {
    let { v0l: e3, v0h: n6, v1l: r4, v1h: o6, v2l: s4, v2h: i6, v3l: f9, v3h: c8, v4l: u5, v4h: a4, v5l: l9, v5h: h7, v6l: g4, v6h: m4, v7l: b6, v7h: v6 } = this;
    return [e3, n6, r4, o6, s4, i6, f9, c8, u5, a4, l9, h7, g4, m4, b6, v6];
  }
  set(e3, n6, r4, o6, s4, i6, f9, c8, u5, a4, l9, h7, g4, m4, b6, v6) {
    this.v0l = e3 | 0, this.v0h = n6 | 0, this.v1l = r4 | 0, this.v1h = o6 | 0, this.v2l = s4 | 0, this.v2h = i6 | 0, this.v3l = f9 | 0, this.v3h = c8 | 0, this.v4l = u5 | 0, this.v4h = a4 | 0, this.v5l = l9 | 0, this.v5h = h7 | 0, this.v6l = g4 | 0, this.v6h = m4 | 0, this.v7l = b6 | 0, this.v7h = v6 | 0;
  }
  compress(e3, n6, r4) {
    this.get().forEach((c8, u5) => N10[u5] = c8), N10.set(F, 16);
    let { h: o6, l: s4 } = yr2(BigInt(this.length));
    N10[24] = F[8] ^ s4, N10[25] = F[9] ^ o6, r4 && (N10[28] = ~N10[28], N10[29] = ~N10[29]);
    let i6 = 0;
    const f9 = Yi;
    for (let c8 = 0; c8 < 12; c8++) $t2(0, 4, 8, 12, e3, n6 + 2 * f9[i6++]), Ct(0, 4, 8, 12, e3, n6 + 2 * f9[i6++]), $t2(1, 5, 9, 13, e3, n6 + 2 * f9[i6++]), Ct(1, 5, 9, 13, e3, n6 + 2 * f9[i6++]), $t2(2, 6, 10, 14, e3, n6 + 2 * f9[i6++]), Ct(2, 6, 10, 14, e3, n6 + 2 * f9[i6++]), $t2(3, 7, 11, 15, e3, n6 + 2 * f9[i6++]), Ct(3, 7, 11, 15, e3, n6 + 2 * f9[i6++]), $t2(0, 5, 10, 15, e3, n6 + 2 * f9[i6++]), Ct(0, 5, 10, 15, e3, n6 + 2 * f9[i6++]), $t2(1, 6, 11, 12, e3, n6 + 2 * f9[i6++]), Ct(1, 6, 11, 12, e3, n6 + 2 * f9[i6++]), $t2(2, 7, 8, 13, e3, n6 + 2 * f9[i6++]), Ct(2, 7, 8, 13, e3, n6 + 2 * f9[i6++]), $t2(3, 4, 9, 14, e3, n6 + 2 * f9[i6++]), Ct(3, 4, 9, 14, e3, n6 + 2 * f9[i6++]);
    this.v0l ^= N10[0] ^ N10[16], this.v0h ^= N10[1] ^ N10[17], this.v1l ^= N10[2] ^ N10[18], this.v1h ^= N10[3] ^ N10[19], this.v2l ^= N10[4] ^ N10[20], this.v2h ^= N10[5] ^ N10[21], this.v3l ^= N10[6] ^ N10[22], this.v3h ^= N10[7] ^ N10[23], this.v4l ^= N10[8] ^ N10[24], this.v4h ^= N10[9] ^ N10[25], this.v5l ^= N10[10] ^ N10[26], this.v5h ^= N10[11] ^ N10[27], this.v6l ^= N10[12] ^ N10[28], this.v6h ^= N10[13] ^ N10[29], this.v7l ^= N10[14] ^ N10[30], this.v7h ^= N10[15] ^ N10[31], ut2(N10);
  }
  destroy() {
    this.destroyed = true, ut2(this.buffer32), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var tf = Ni((t2) => new Qi(t2));
var ef = "https://rpc.walletconnect.org/v1";
function cn(t2) {
  const e3 = `Ethereum Signed Message:
${t2.length}`, n6 = new TextEncoder().encode(e3 + t2);
  return "0x" + Buffer.from(ki(n6)).toString("hex");
}
async function $r2(t2, e3, n6, r4, o6, s4) {
  switch (n6.t) {
    case "eip191":
      return await Cr2(t2, e3, n6.s);
    case "eip1271":
      return await Lr2(t2, e3, n6.s, r4, o6, s4);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n6.t}`);
  }
}
async function Cr2(t2, e3, n6) {
  return (await recoverAddress({ hash: cn(e3), signature: n6 })).toLowerCase() === t2.toLowerCase();
}
async function Lr2(t2, e3, n6, r4, o6, s4) {
  const i6 = Fe(r4);
  if (!i6.namespace || !i6.reference) throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r4}`);
  try {
    const f9 = "0x1626ba7e", c8 = "0000000000000000000000000000000000000000000000000000000000000040", u5 = n6.substring(2), a4 = (u5.length / 2).toString(16).padStart(64, "0"), l9 = (e3.startsWith("0x") ? e3 : cn(e3)).substring(2), h7 = f9 + l9 + c8 + a4 + u5, g4 = await fetch(`${s4 || ef}/?chainId=${r4}&projectId=${o6}`, { headers: { "Content-Type": "application/json" }, method: "POST", body: JSON.stringify({ id: nf(), jsonrpc: "2.0", method: "eth_call", params: [{ to: t2, data: h7 }, "latest"] }) }), { result: m4 } = await g4.json();
    return m4 ? m4.slice(0, f9.length).toLowerCase() === f9.toLowerCase() : false;
  } catch (f9) {
    return console.error("isValidEip1271Signature: ", f9), false;
  }
}
function nf() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
function rf(t2) {
  const e3 = atob(t2), n6 = new Uint8Array(e3.length);
  for (let i6 = 0; i6 < e3.length; i6++) n6[i6] = e3.charCodeAt(i6);
  const r4 = n6[0];
  if (r4 === 0) throw new Error("No signatures found");
  const o6 = 1 + r4 * 64;
  if (n6.length < o6) throw new Error("Transaction data too short for claimed signature count");
  if (n6.length < 100) throw new Error("Transaction too short");
  const s4 = Buffer.from(t2, "base64").slice(1, 65);
  return esm_default2.encode(s4);
}
function of(t2) {
  const e3 = new Uint8Array(Buffer.from(t2, "base64")), n6 = Array.from("TransactionData::").map((s4) => s4.charCodeAt(0)), r4 = new Uint8Array(n6.length + e3.length);
  r4.set(n6), r4.set(e3, n6.length);
  const o6 = tf(r4, { dkLen: 32 });
  return esm_default2.encode(o6);
}
function sf(t2) {
  const e3 = new Uint8Array(Ae2(jr2(t2)));
  return esm_default2.encode(e3);
}
function jr2(t2) {
  if (t2 instanceof Uint8Array) return t2;
  if (Array.isArray(t2)) return new Uint8Array(t2);
  if (typeof t2 == "object" && t2 != null && t2.data) return new Uint8Array(Object.values(t2.data));
  if (typeof t2 == "object" && t2) return new Uint8Array(Object.values(t2));
  throw new Error("getNearUint8ArrayFromBytes: Unexpected result type from bytes array");
}
function ff(t2) {
  const e3 = Buffer.from(t2, "base64"), n6 = decode2(e3).txn;
  if (!n6) throw new Error("Invalid signed transaction: missing 'txn' field");
  const r4 = encode4(n6), o6 = Buffer.from("TX"), s4 = Buffer.concat([o6, Buffer.from(r4)]), i6 = Wi(s4);
  return base32.encode(i6).replace(/=+$/, "");
}
function an(t2) {
  const e3 = [];
  let n6 = BigInt(t2);
  for (; n6 >= BigInt(128); ) e3.push(Number(n6 & BigInt(127) | BigInt(128))), n6 >>= BigInt(7);
  return e3.push(Number(n6)), Buffer.from(e3);
}
function cf(t2) {
  const e3 = Buffer.from(t2.signed.bodyBytes, "base64"), n6 = Buffer.from(t2.signed.authInfoBytes, "base64"), r4 = Buffer.from(t2.signature.signature, "base64"), o6 = [];
  o6.push(Buffer.from([10])), o6.push(an(e3.length)), o6.push(e3), o6.push(Buffer.from([18])), o6.push(an(n6.length)), o6.push(n6), o6.push(Buffer.from([26])), o6.push(an(r4.length)), o6.push(r4);
  const s4 = Buffer.concat(o6), i6 = Ae2(s4);
  return Buffer.from(i6).toString("hex").toUpperCase();
}
var af = Object.defineProperty;
var uf = Object.defineProperties;
var lf = Object.getOwnPropertyDescriptors;
var kr2 = Object.getOwnPropertySymbols;
var df = Object.prototype.hasOwnProperty;
var hf = Object.prototype.propertyIsEnumerable;
var Pr2 = (t2, e3, n6) => e3 in t2 ? af(t2, e3, { enumerable: true, configurable: true, writable: true, value: n6 }) : t2[e3] = n6;
var un = (t2, e3) => {
  for (var n6 in e3 || (e3 = {})) df.call(e3, n6) && Pr2(t2, n6, e3[n6]);
  if (kr2) for (var n6 of kr2(e3)) hf.call(e3, n6) && Pr2(t2, n6, e3[n6]);
  return t2;
};
var Hr2 = (t2, e3) => uf(t2, lf(e3));
var pf = "did:pkh:";
var Se2 = (t2) => t2 == null ? void 0 : t2.split(":");
var Dr2 = (t2) => {
  const e3 = t2 && Se2(t2);
  if (e3) return t2.includes(pf) ? e3[3] : e3[1];
};
var Mr2 = (t2) => {
  const e3 = t2 && Se2(t2);
  if (e3) return e3[2] + ":" + e3[3];
};
var ln = (t2) => {
  const e3 = t2 && Se2(t2);
  if (e3) return e3.pop();
};
async function gf(t2) {
  const { cacao: e3, projectId: n6 } = t2, { s: r4, p: o6 } = e3, s4 = Vr2(o6, o6.iss), i6 = ln(o6.iss);
  return await $r2(i6, s4, r4, Mr2(o6.iss), n6);
}
var Vr2 = (t2, e3) => {
  const n6 = `${t2.domain} wants you to sign in with your Ethereum account:`, r4 = ln(e3);
  if (!t2.aud && !t2.uri) throw new Error("Either `aud` or `uri` is required to construct the message");
  let o6 = t2.statement || void 0;
  const s4 = `URI: ${t2.aud || t2.uri}`, i6 = `Version: ${t2.version}`, f9 = `Chain ID: ${Dr2(e3)}`, c8 = `Nonce: ${t2.nonce}`, u5 = `Issued At: ${t2.iat}`, a4 = t2.exp ? `Expiration Time: ${t2.exp}` : void 0, l9 = t2.nbf ? `Not Before: ${t2.nbf}` : void 0, h7 = t2.requestId ? `Request ID: ${t2.requestId}` : void 0, g4 = t2.resources ? `Resources:${t2.resources.map((b6) => `
- ${b6}`).join("")}` : void 0, m4 = Oe2(t2.resources);
  if (m4) {
    const b6 = Lt2(m4);
    o6 = pn(o6, b6);
  }
  return [n6, r4, "", o6, "", s4, i6, f9, c8, u5, a4, l9, h7, g4].filter((b6) => b6 != null).join(`
`);
};
function zr2(t2) {
  return Buffer.from(JSON.stringify(t2)).toString("base64");
}
function Gr2(t2) {
  return JSON.parse(Buffer.from(t2, "base64").toString("utf-8"));
}
function bt2(t2) {
  if (!t2) throw new Error("No recap provided, value is undefined");
  if (!t2.att) throw new Error("No `att` property found");
  const e3 = Object.keys(t2.att);
  if (!(e3 != null && e3.length)) throw new Error("No resources found in `att` property");
  e3.forEach((n6) => {
    const r4 = t2.att[n6];
    if (Array.isArray(r4)) throw new Error(`Resource must be an object: ${n6}`);
    if (typeof r4 != "object") throw new Error(`Resource must be an object: ${n6}`);
    if (!Object.keys(r4).length) throw new Error(`Resource object is empty: ${n6}`);
    Object.keys(r4).forEach((o6) => {
      const s4 = r4[o6];
      if (!Array.isArray(s4)) throw new Error(`Ability limits ${o6} must be an array of objects, found: ${s4}`);
      if (!s4.length) throw new Error(`Value of ${o6} is empty array, must be an array with objects`);
      s4.forEach((i6) => {
        if (typeof i6 != "object") throw new Error(`Ability limits (${o6}) must be an array of objects, found: ${i6}`);
      });
    });
  });
}
function Zr2(t2, e3, n6, r4 = {}) {
  return n6 == null ? void 0 : n6.sort((o6, s4) => o6.localeCompare(s4)), { att: { [t2]: dn(e3, n6, r4) } };
}
function dn(t2, e3, n6 = {}) {
  e3 = e3 == null ? void 0 : e3.sort((o6, s4) => o6.localeCompare(s4));
  const r4 = e3.map((o6) => ({ [`${t2}/${o6}`]: [n6] }));
  return Object.assign({}, ...r4);
}
function Ne2(t2) {
  return bt2(t2), `urn:recap:${zr2(t2).replace(/=/g, "")}`;
}
function Lt2(t2) {
  const e3 = Gr2(t2.replace("urn:recap:", ""));
  return bt2(e3), e3;
}
function xf(t2, e3, n6) {
  const r4 = Zr2(t2, e3, n6);
  return Ne2(r4);
}
function hn(t2) {
  return t2 && t2.includes("urn:recap:");
}
function vf(t2, e3) {
  const n6 = Lt2(t2), r4 = Lt2(e3), o6 = Yr2(n6, r4);
  return Ne2(o6);
}
function Yr2(t2, e3) {
  bt2(t2), bt2(e3);
  const n6 = Object.keys(t2.att).concat(Object.keys(e3.att)).sort((o6, s4) => o6.localeCompare(s4)), r4 = { att: {} };
  return n6.forEach((o6) => {
    var s4, i6;
    Object.keys(((s4 = t2.att) == null ? void 0 : s4[o6]) || {}).concat(Object.keys(((i6 = e3.att) == null ? void 0 : i6[o6]) || {})).sort((f9, c8) => f9.localeCompare(c8)).forEach((f9) => {
      var c8, u5;
      r4.att[o6] = Hr2(un({}, r4.att[o6]), { [f9]: ((c8 = t2.att[o6]) == null ? void 0 : c8[f9]) || ((u5 = e3.att[o6]) == null ? void 0 : u5[f9]) });
    });
  }), r4;
}
function pn(t2 = "", e3) {
  bt2(e3);
  const n6 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (t2.includes(n6)) return t2;
  const r4 = [];
  let o6 = 0;
  Object.keys(e3.att).forEach((f9) => {
    const c8 = Object.keys(e3.att[f9]).map((l9) => ({ ability: l9.split("/")[0], action: l9.split("/")[1] }));
    c8.sort((l9, h7) => l9.action.localeCompare(h7.action));
    const u5 = {};
    c8.forEach((l9) => {
      u5[l9.ability] || (u5[l9.ability] = []), u5[l9.ability].push(l9.action);
    });
    const a4 = Object.keys(u5).map((l9) => (o6++, `(${o6}) '${l9}': '${u5[l9].join("', '")}' for '${f9}'.`));
    r4.push(a4.join(", ").replace(".,", "."));
  });
  const s4 = r4.join(" "), i6 = `${n6}${s4}`;
  return `${t2 ? t2 + " " : ""}${i6}`;
}
function Ef(t2) {
  var e3;
  const n6 = Lt2(t2);
  bt2(n6);
  const r4 = (e3 = n6.att) == null ? void 0 : e3.eip155;
  return r4 ? Object.keys(r4).map((o6) => o6.split("/")[1]) : [];
}
function Bf(t2) {
  const e3 = Lt2(t2);
  bt2(e3);
  const n6 = [];
  return Object.values(e3.att).forEach((r4) => {
    Object.values(r4).forEach((o6) => {
      var s4;
      (s4 = o6 == null ? void 0 : o6[0]) != null && s4.chains && n6.push(o6[0].chains);
    });
  }), [...new Set(n6.flat())];
}
function Oe2(t2) {
  if (!t2) return;
  const e3 = t2 == null ? void 0 : t2[t2.length - 1];
  return hn(e3) ? e3 : void 0;
}
function Jr2(t2) {
  return t2 instanceof Uint8Array || ArrayBuffer.isView(t2) && t2.constructor.name === "Uint8Array";
}
function gn2(t2) {
  if (typeof t2 != "boolean") throw new Error(`boolean expected, not ${t2}`);
}
function bn2(t2) {
  if (!Number.isSafeInteger(t2) || t2 < 0) throw new Error("positive integer expected, got " + t2);
}
function nt2(t2, ...e3) {
  if (!Jr2(t2)) throw new Error("Uint8Array expected");
  if (e3.length > 0 && !e3.includes(t2.length)) throw new Error("Uint8Array expected of length " + e3 + ", got length=" + t2.length);
}
function Qr2(t2, e3 = true) {
  if (t2.destroyed) throw new Error("Hash instance has been destroyed");
  if (e3 && t2.finished) throw new Error("Hash#digest() has already been called");
}
function If(t2, e3) {
  nt2(t2);
  const n6 = e3.outputLen;
  if (t2.length < n6) throw new Error("digestInto() expects output buffer of length at least " + n6);
}
function jt2(t2) {
  return new Uint32Array(t2.buffer, t2.byteOffset, Math.floor(t2.byteLength / 4));
}
function Wt2(...t2) {
  for (let e3 = 0; e3 < t2.length; e3++) t2[e3].fill(0);
}
function Af(t2) {
  return new DataView(t2.buffer, t2.byteOffset, t2.byteLength);
}
var Sf = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Nf(t2) {
  if (typeof t2 != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t2));
}
function yn2(t2) {
  if (typeof t2 == "string") t2 = Nf(t2);
  else if (Jr2(t2)) t2 = mn2(t2);
  else throw new Error("Uint8Array expected, got " + typeof t2);
  return t2;
}
function Of(t2, e3) {
  if (e3 == null || typeof e3 != "object") throw new Error("options must be defined");
  return Object.assign(t2, e3);
}
function Uf(t2, e3) {
  if (t2.length !== e3.length) return false;
  let n6 = 0;
  for (let r4 = 0; r4 < t2.length; r4++) n6 |= t2[r4] ^ e3[r4];
  return n6 === 0;
}
var _f = (t2, e3) => {
  function n6(r4, ...o6) {
    if (nt2(r4), !Sf) throw new Error("Non little-endian hardware is not yet supported");
    if (t2.nonceLength !== void 0) {
      const a4 = o6[0];
      if (!a4) throw new Error("nonce / iv required");
      t2.varSizeNonce ? nt2(a4) : nt2(a4, t2.nonceLength);
    }
    const s4 = t2.tagLength;
    s4 && o6[1] !== void 0 && nt2(o6[1]);
    const i6 = e3(r4, ...o6), f9 = (a4, l9) => {
      if (l9 !== void 0) {
        if (a4 !== 2) throw new Error("cipher output not supported");
        nt2(l9);
      }
    };
    let c8 = false;
    return { encrypt(a4, l9) {
      if (c8) throw new Error("cannot encrypt() twice with same key + nonce");
      return c8 = true, nt2(a4), f9(i6.encrypt.length, l9), i6.encrypt(a4, l9);
    }, decrypt(a4, l9) {
      if (nt2(a4), s4 && a4.length < s4) throw new Error("invalid ciphertext length: smaller than tagLength=" + s4);
      return f9(i6.decrypt.length, l9), i6.decrypt(a4, l9);
    } };
  }
  return Object.assign(n6, t2), n6;
};
function to2(t2, e3, n6 = true) {
  if (e3 === void 0) return new Uint8Array(t2);
  if (e3.length !== t2) throw new Error("invalid output length, expected " + t2 + ", got: " + e3.length);
  if (n6 && !Rf(e3)) throw new Error("invalid output, must be aligned");
  return e3;
}
function eo2(t2, e3, n6, r4) {
  if (typeof t2.setBigUint64 == "function") return t2.setBigUint64(e3, n6, r4);
  const o6 = BigInt(32), s4 = BigInt(4294967295), i6 = Number(n6 >> o6 & s4), f9 = Number(n6 & s4), c8 = r4 ? 4 : 0, u5 = r4 ? 0 : 4;
  t2.setUint32(e3 + c8, i6, r4), t2.setUint32(e3 + u5, f9, r4);
}
function Tf(t2, e3, n6) {
  gn2(n6);
  const r4 = new Uint8Array(16), o6 = Af(r4);
  return eo2(o6, 0, BigInt(e3), n6), eo2(o6, 8, BigInt(t2), n6), r4;
}
function Rf(t2) {
  return t2.byteOffset % 4 === 0;
}
function mn2(t2) {
  return Uint8Array.from(t2);
}
var no2 = (t2) => Uint8Array.from(t2.split("").map((e3) => e3.charCodeAt(0)));
var $f = no2("expand 16-byte k");
var Cf = no2("expand 32-byte k");
var Lf = jt2($f);
var jf = jt2(Cf);
function M3(t2, e3) {
  return t2 << e3 | t2 >>> 32 - e3;
}
function wn(t2) {
  return t2.byteOffset % 4 === 0;
}
var Ue2 = 64;
var kf = 16;
var ro2 = 2 ** 32 - 1;
var oo2 = new Uint32Array();
function Pf(t2, e3, n6, r4, o6, s4, i6, f9) {
  const c8 = o6.length, u5 = new Uint8Array(Ue2), a4 = jt2(u5), l9 = wn(o6) && wn(s4), h7 = l9 ? jt2(o6) : oo2, g4 = l9 ? jt2(s4) : oo2;
  for (let m4 = 0; m4 < c8; i6++) {
    if (t2(e3, n6, r4, a4, i6, f9), i6 >= ro2) throw new Error("arx: counter overflow");
    const b6 = Math.min(Ue2, c8 - m4);
    if (l9 && b6 === Ue2) {
      const v6 = m4 / 4;
      if (m4 % 4 !== 0) throw new Error("arx: invalid block position");
      for (let L5 = 0, V4; L5 < kf; L5++) V4 = v6 + L5, g4[V4] = h7[V4] ^ a4[L5];
      m4 += Ue2;
      continue;
    }
    for (let v6 = 0, L5; v6 < b6; v6++) L5 = m4 + v6, s4[L5] = o6[L5] ^ u5[v6];
    m4 += b6;
  }
}
function Hf(t2, e3) {
  const { allowShortKeys: n6, extendNonceFn: r4, counterLength: o6, counterRight: s4, rounds: i6 } = Of({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, e3);
  if (typeof t2 != "function") throw new Error("core must be a function");
  return bn2(o6), bn2(i6), gn2(s4), gn2(n6), (f9, c8, u5, a4, l9 = 0) => {
    nt2(f9), nt2(c8), nt2(u5);
    const h7 = u5.length;
    if (a4 === void 0 && (a4 = new Uint8Array(h7)), nt2(a4), bn2(l9), l9 < 0 || l9 >= ro2) throw new Error("arx: counter overflow");
    if (a4.length < h7) throw new Error(`arx: output (${a4.length}) is shorter than data (${h7})`);
    const g4 = [];
    let m4 = f9.length, b6, v6;
    if (m4 === 32) g4.push(b6 = mn2(f9)), v6 = jf;
    else if (m4 === 16 && n6) b6 = new Uint8Array(32), b6.set(f9), b6.set(f9, 16), v6 = Lf, g4.push(b6);
    else throw new Error(`arx: invalid 32-byte key, got length=${m4}`);
    wn(c8) || g4.push(c8 = mn2(c8));
    const L5 = jt2(b6);
    if (r4) {
      if (c8.length !== 24) throw new Error("arx: extended nonce must be 24 bytes");
      r4(v6, L5, jt2(c8.subarray(0, 16)), L5), c8 = c8.subarray(16);
    }
    const V4 = 16 - o6;
    if (V4 !== c8.length) throw new Error(`arx: nonce must be ${V4} or 16 bytes`);
    if (V4 !== 12) {
      const H3 = new Uint8Array(12);
      H3.set(c8, s4 ? 0 : 12 - c8.length), c8 = H3, g4.push(c8);
    }
    const C5 = jt2(c8);
    return Pf(t2, v6, L5, C5, u5, a4, l9, i6), Wt2(...g4), a4;
  };
}
var G2 = (t2, e3) => t2[e3++] & 255 | (t2[e3++] & 255) << 8;
var Df = class {
  constructor(e3) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, e3 = yn2(e3), nt2(e3, 32);
    const n6 = G2(e3, 0), r4 = G2(e3, 2), o6 = G2(e3, 4), s4 = G2(e3, 6), i6 = G2(e3, 8), f9 = G2(e3, 10), c8 = G2(e3, 12), u5 = G2(e3, 14);
    this.r[0] = n6 & 8191, this.r[1] = (n6 >>> 13 | r4 << 3) & 8191, this.r[2] = (r4 >>> 10 | o6 << 6) & 7939, this.r[3] = (o6 >>> 7 | s4 << 9) & 8191, this.r[4] = (s4 >>> 4 | i6 << 12) & 255, this.r[5] = i6 >>> 1 & 8190, this.r[6] = (i6 >>> 14 | f9 << 2) & 8191, this.r[7] = (f9 >>> 11 | c8 << 5) & 8065, this.r[8] = (c8 >>> 8 | u5 << 8) & 8191, this.r[9] = u5 >>> 5 & 127;
    for (let a4 = 0; a4 < 8; a4++) this.pad[a4] = G2(e3, 16 + 2 * a4);
  }
  process(e3, n6, r4 = false) {
    const o6 = r4 ? 0 : 2048, { h: s4, r: i6 } = this, f9 = i6[0], c8 = i6[1], u5 = i6[2], a4 = i6[3], l9 = i6[4], h7 = i6[5], g4 = i6[6], m4 = i6[7], b6 = i6[8], v6 = i6[9], L5 = G2(e3, n6 + 0), V4 = G2(e3, n6 + 2), C5 = G2(e3, n6 + 4), H3 = G2(e3, n6 + 6), _3 = G2(e3, n6 + 8), k7 = G2(e3, n6 + 10), P6 = G2(e3, n6 + 12), R4 = G2(e3, n6 + 14);
    let d6 = s4[0] + (L5 & 8191), w6 = s4[1] + ((L5 >>> 13 | V4 << 3) & 8191), p6 = s4[2] + ((V4 >>> 10 | C5 << 6) & 8191), y7 = s4[3] + ((C5 >>> 7 | H3 << 9) & 8191), x6 = s4[4] + ((H3 >>> 4 | _3 << 12) & 8191), B4 = s4[5] + (_3 >>> 1 & 8191), E6 = s4[6] + ((_3 >>> 14 | k7 << 2) & 8191), I5 = s4[7] + ((k7 >>> 11 | P6 << 5) & 8191), S5 = s4[8] + ((P6 >>> 8 | R4 << 8) & 8191), O7 = s4[9] + (R4 >>> 5 | o6), A4 = 0, T4 = A4 + d6 * f9 + w6 * (5 * v6) + p6 * (5 * b6) + y7 * (5 * m4) + x6 * (5 * g4);
    A4 = T4 >>> 13, T4 &= 8191, T4 += B4 * (5 * h7) + E6 * (5 * l9) + I5 * (5 * a4) + S5 * (5 * u5) + O7 * (5 * c8), A4 += T4 >>> 13, T4 &= 8191;
    let U4 = A4 + d6 * c8 + w6 * f9 + p6 * (5 * v6) + y7 * (5 * b6) + x6 * (5 * m4);
    A4 = U4 >>> 13, U4 &= 8191, U4 += B4 * (5 * g4) + E6 * (5 * h7) + I5 * (5 * l9) + S5 * (5 * a4) + O7 * (5 * u5), A4 += U4 >>> 13, U4 &= 8191;
    let $4 = A4 + d6 * u5 + w6 * c8 + p6 * f9 + y7 * (5 * v6) + x6 * (5 * b6);
    A4 = $4 >>> 13, $4 &= 8191, $4 += B4 * (5 * m4) + E6 * (5 * g4) + I5 * (5 * h7) + S5 * (5 * l9) + O7 * (5 * a4), A4 += $4 >>> 13, $4 &= 8191;
    let D3 = A4 + d6 * a4 + w6 * u5 + p6 * c8 + y7 * f9 + x6 * (5 * v6);
    A4 = D3 >>> 13, D3 &= 8191, D3 += B4 * (5 * b6) + E6 * (5 * m4) + I5 * (5 * g4) + S5 * (5 * h7) + O7 * (5 * l9), A4 += D3 >>> 13, D3 &= 8191;
    let q2 = A4 + d6 * l9 + w6 * a4 + p6 * u5 + y7 * c8 + x6 * f9;
    A4 = q2 >>> 13, q2 &= 8191, q2 += B4 * (5 * v6) + E6 * (5 * b6) + I5 * (5 * m4) + S5 * (5 * g4) + O7 * (5 * h7), A4 += q2 >>> 13, q2 &= 8191;
    let j5 = A4 + d6 * h7 + w6 * l9 + p6 * a4 + y7 * u5 + x6 * c8;
    A4 = j5 >>> 13, j5 &= 8191, j5 += B4 * f9 + E6 * (5 * v6) + I5 * (5 * b6) + S5 * (5 * m4) + O7 * (5 * g4), A4 += j5 >>> 13, j5 &= 8191;
    let K4 = A4 + d6 * g4 + w6 * h7 + p6 * l9 + y7 * a4 + x6 * u5;
    A4 = K4 >>> 13, K4 &= 8191, K4 += B4 * c8 + E6 * f9 + I5 * (5 * v6) + S5 * (5 * b6) + O7 * (5 * m4), A4 += K4 >>> 13, K4 &= 8191;
    let et2 = A4 + d6 * m4 + w6 * g4 + p6 * h7 + y7 * l9 + x6 * a4;
    A4 = et2 >>> 13, et2 &= 8191, et2 += B4 * u5 + E6 * c8 + I5 * f9 + S5 * (5 * v6) + O7 * (5 * b6), A4 += et2 >>> 13, et2 &= 8191;
    let Z2 = A4 + d6 * b6 + w6 * m4 + p6 * g4 + y7 * h7 + x6 * l9;
    A4 = Z2 >>> 13, Z2 &= 8191, Z2 += B4 * a4 + E6 * u5 + I5 * c8 + S5 * f9 + O7 * (5 * v6), A4 += Z2 >>> 13, Z2 &= 8191;
    let z4 = A4 + d6 * v6 + w6 * b6 + p6 * m4 + y7 * g4 + x6 * h7;
    A4 = z4 >>> 13, z4 &= 8191, z4 += B4 * l9 + E6 * a4 + I5 * u5 + S5 * c8 + O7 * f9, A4 += z4 >>> 13, z4 &= 8191, A4 = (A4 << 2) + A4 | 0, A4 = A4 + T4 | 0, T4 = A4 & 8191, A4 = A4 >>> 13, U4 += A4, s4[0] = T4, s4[1] = U4, s4[2] = $4, s4[3] = D3, s4[4] = q2, s4[5] = j5, s4[6] = K4, s4[7] = et2, s4[8] = Z2, s4[9] = z4;
  }
  finalize() {
    const { h: e3, pad: n6 } = this, r4 = new Uint16Array(10);
    let o6 = e3[1] >>> 13;
    e3[1] &= 8191;
    for (let f9 = 2; f9 < 10; f9++) e3[f9] += o6, o6 = e3[f9] >>> 13, e3[f9] &= 8191;
    e3[0] += o6 * 5, o6 = e3[0] >>> 13, e3[0] &= 8191, e3[1] += o6, o6 = e3[1] >>> 13, e3[1] &= 8191, e3[2] += o6, r4[0] = e3[0] + 5, o6 = r4[0] >>> 13, r4[0] &= 8191;
    for (let f9 = 1; f9 < 10; f9++) r4[f9] = e3[f9] + o6, o6 = r4[f9] >>> 13, r4[f9] &= 8191;
    r4[9] -= 8192;
    let s4 = (o6 ^ 1) - 1;
    for (let f9 = 0; f9 < 10; f9++) r4[f9] &= s4;
    s4 = ~s4;
    for (let f9 = 0; f9 < 10; f9++) e3[f9] = e3[f9] & s4 | r4[f9];
    e3[0] = (e3[0] | e3[1] << 13) & 65535, e3[1] = (e3[1] >>> 3 | e3[2] << 10) & 65535, e3[2] = (e3[2] >>> 6 | e3[3] << 7) & 65535, e3[3] = (e3[3] >>> 9 | e3[4] << 4) & 65535, e3[4] = (e3[4] >>> 12 | e3[5] << 1 | e3[6] << 14) & 65535, e3[5] = (e3[6] >>> 2 | e3[7] << 11) & 65535, e3[6] = (e3[7] >>> 5 | e3[8] << 8) & 65535, e3[7] = (e3[8] >>> 8 | e3[9] << 5) & 65535;
    let i6 = e3[0] + n6[0];
    e3[0] = i6 & 65535;
    for (let f9 = 1; f9 < 8; f9++) i6 = (e3[f9] + n6[f9] | 0) + (i6 >>> 16) | 0, e3[f9] = i6 & 65535;
    Wt2(r4);
  }
  update(e3) {
    Qr2(this), e3 = yn2(e3), nt2(e3);
    const { buffer: n6, blockLen: r4 } = this, o6 = e3.length;
    for (let s4 = 0; s4 < o6; ) {
      const i6 = Math.min(r4 - this.pos, o6 - s4);
      if (i6 === r4) {
        for (; r4 <= o6 - s4; s4 += r4) this.process(e3, s4);
        continue;
      }
      n6.set(e3.subarray(s4, s4 + i6), this.pos), this.pos += i6, s4 += i6, this.pos === r4 && (this.process(n6, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    Wt2(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(e3) {
    Qr2(this), If(e3, this), this.finished = true;
    const { buffer: n6, h: r4 } = this;
    let { pos: o6 } = this;
    if (o6) {
      for (n6[o6++] = 1; o6 < 16; o6++) n6[o6] = 0;
      this.process(n6, 0, true);
    }
    this.finalize();
    let s4 = 0;
    for (let i6 = 0; i6 < 8; i6++) e3[s4++] = r4[i6] >>> 0, e3[s4++] = r4[i6] >>> 8;
    return e3;
  }
  digest() {
    const { buffer: e3, outputLen: n6 } = this;
    this.digestInto(e3);
    const r4 = e3.slice(0, n6);
    return this.destroy(), r4;
  }
};
function Mf(t2) {
  const e3 = (r4, o6) => t2(o6).update(yn2(r4)).digest(), n6 = t2(new Uint8Array(32));
  return e3.outputLen = n6.outputLen, e3.blockLen = n6.blockLen, e3.create = (r4) => t2(r4), e3;
}
var Vf = Mf((t2) => new Df(t2));
function qf(t2, e3, n6, r4, o6, s4 = 20) {
  let i6 = t2[0], f9 = t2[1], c8 = t2[2], u5 = t2[3], a4 = e3[0], l9 = e3[1], h7 = e3[2], g4 = e3[3], m4 = e3[4], b6 = e3[5], v6 = e3[6], L5 = e3[7], V4 = o6, C5 = n6[0], H3 = n6[1], _3 = n6[2], k7 = i6, P6 = f9, R4 = c8, d6 = u5, w6 = a4, p6 = l9, y7 = h7, x6 = g4, B4 = m4, E6 = b6, I5 = v6, S5 = L5, O7 = V4, A4 = C5, T4 = H3, U4 = _3;
  for (let D3 = 0; D3 < s4; D3 += 2) k7 = k7 + w6 | 0, O7 = M3(O7 ^ k7, 16), B4 = B4 + O7 | 0, w6 = M3(w6 ^ B4, 12), k7 = k7 + w6 | 0, O7 = M3(O7 ^ k7, 8), B4 = B4 + O7 | 0, w6 = M3(w6 ^ B4, 7), P6 = P6 + p6 | 0, A4 = M3(A4 ^ P6, 16), E6 = E6 + A4 | 0, p6 = M3(p6 ^ E6, 12), P6 = P6 + p6 | 0, A4 = M3(A4 ^ P6, 8), E6 = E6 + A4 | 0, p6 = M3(p6 ^ E6, 7), R4 = R4 + y7 | 0, T4 = M3(T4 ^ R4, 16), I5 = I5 + T4 | 0, y7 = M3(y7 ^ I5, 12), R4 = R4 + y7 | 0, T4 = M3(T4 ^ R4, 8), I5 = I5 + T4 | 0, y7 = M3(y7 ^ I5, 7), d6 = d6 + x6 | 0, U4 = M3(U4 ^ d6, 16), S5 = S5 + U4 | 0, x6 = M3(x6 ^ S5, 12), d6 = d6 + x6 | 0, U4 = M3(U4 ^ d6, 8), S5 = S5 + U4 | 0, x6 = M3(x6 ^ S5, 7), k7 = k7 + p6 | 0, U4 = M3(U4 ^ k7, 16), I5 = I5 + U4 | 0, p6 = M3(p6 ^ I5, 12), k7 = k7 + p6 | 0, U4 = M3(U4 ^ k7, 8), I5 = I5 + U4 | 0, p6 = M3(p6 ^ I5, 7), P6 = P6 + y7 | 0, O7 = M3(O7 ^ P6, 16), S5 = S5 + O7 | 0, y7 = M3(y7 ^ S5, 12), P6 = P6 + y7 | 0, O7 = M3(O7 ^ P6, 8), S5 = S5 + O7 | 0, y7 = M3(y7 ^ S5, 7), R4 = R4 + x6 | 0, A4 = M3(A4 ^ R4, 16), B4 = B4 + A4 | 0, x6 = M3(x6 ^ B4, 12), R4 = R4 + x6 | 0, A4 = M3(A4 ^ R4, 8), B4 = B4 + A4 | 0, x6 = M3(x6 ^ B4, 7), d6 = d6 + w6 | 0, T4 = M3(T4 ^ d6, 16), E6 = E6 + T4 | 0, w6 = M3(w6 ^ E6, 12), d6 = d6 + w6 | 0, T4 = M3(T4 ^ d6, 8), E6 = E6 + T4 | 0, w6 = M3(w6 ^ E6, 7);
  let $4 = 0;
  r4[$4++] = i6 + k7 | 0, r4[$4++] = f9 + P6 | 0, r4[$4++] = c8 + R4 | 0, r4[$4++] = u5 + d6 | 0, r4[$4++] = a4 + w6 | 0, r4[$4++] = l9 + p6 | 0, r4[$4++] = h7 + y7 | 0, r4[$4++] = g4 + x6 | 0, r4[$4++] = m4 + B4 | 0, r4[$4++] = b6 + E6 | 0, r4[$4++] = v6 + I5 | 0, r4[$4++] = L5 + S5 | 0, r4[$4++] = V4 + O7 | 0, r4[$4++] = C5 + A4 | 0, r4[$4++] = H3 + T4 | 0, r4[$4++] = _3 + U4 | 0;
}
var Kf = Hf(qf, { counterRight: false, counterLength: 4, allowShortKeys: false });
var Ff = new Uint8Array(16);
var so2 = (t2, e3) => {
  t2.update(e3);
  const n6 = e3.length % 16;
  n6 && t2.update(Ff.subarray(n6));
};
var zf = new Uint8Array(32);
function io2(t2, e3, n6, r4, o6) {
  const s4 = t2(e3, n6, zf), i6 = Vf.create(s4);
  o6 && so2(i6, o6), so2(i6, r4);
  const f9 = Tf(r4.length, o6 ? o6.length : 0, true);
  i6.update(f9);
  const c8 = i6.digest();
  return Wt2(s4, f9), c8;
}
var Gf = (t2) => (e3, n6, r4) => ({ encrypt(s4, i6) {
  const f9 = s4.length;
  i6 = to2(f9 + 16, i6, false), i6.set(s4);
  const c8 = i6.subarray(0, -16);
  t2(e3, n6, c8, c8, 1);
  const u5 = io2(t2, e3, n6, c8, r4);
  return i6.set(u5, f9), Wt2(u5), i6;
}, decrypt(s4, i6) {
  i6 = to2(s4.length - 16, i6, false);
  const f9 = s4.subarray(0, -16), c8 = s4.subarray(-16), u5 = io2(t2, e3, n6, f9, r4);
  if (!Uf(c8, u5)) throw new Error("invalid tag");
  return i6.set(s4.subarray(0, -16)), t2(e3, n6, i6, i6, 1), Wt2(u5), i6;
} });
var fo2 = _f({ blockSize: 64, nonceLength: 12, tagLength: 16 }, Gf(Kf));
var co2 = class extends Ie2 {
  constructor(e3, n6) {
    super(), this.finished = false, this.destroyed = false, nn2(e3);
    const r4 = ht2(n6);
    if (this.iHash = e3.create(), typeof this.iHash.update != "function") throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o6 = this.blockLen, s4 = new Uint8Array(o6);
    s4.set(r4.length > o6 ? e3.create().update(r4).digest() : r4);
    for (let i6 = 0; i6 < s4.length; i6++) s4[i6] ^= 54;
    this.iHash.update(s4), this.oHash = e3.create();
    for (let i6 = 0; i6 < s4.length; i6++) s4[i6] ^= 106;
    this.oHash.update(s4), ut2(s4);
  }
  update(e3) {
    return Nt2(this), this.iHash.update(e3), this;
  }
  digestInto(e3) {
    Nt2(this), at(e3, this.outputLen), this.finished = true, this.iHash.digestInto(e3), this.oHash.update(e3), this.oHash.digestInto(e3), this.destroy();
  }
  digest() {
    const e3 = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e3), e3;
  }
  _cloneInto(e3) {
    e3 || (e3 = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n6, iHash: r4, finished: o6, destroyed: s4, blockLen: i6, outputLen: f9 } = this;
    return e3 = e3, e3.finished = o6, e3.destroyed = s4, e3.blockLen = i6, e3.outputLen = f9, e3.oHash = n6._cloneInto(e3.oHash), e3.iHash = r4._cloneInto(e3.iHash), e3;
  }
  clone() {
    return this._cloneInto();
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var _e2 = (t2, e3, n6) => new co2(t2, e3).update(n6).digest();
_e2.create = (t2, e3) => new co2(t2, e3);
function Zf(t2, e3, n6) {
  return nn2(t2), n6 === void 0 && (n6 = new Uint8Array(t2.outputLen)), _e2(t2, ht2(n6), ht2(e3));
}
var xn2 = Uint8Array.from([0]);
var ao2 = Uint8Array.of();
function Wf(t2, e3, n6, r4 = 32) {
  nn2(t2), mt(r4);
  const o6 = t2.outputLen;
  if (r4 > 255 * o6) throw new Error("Length should be <= 255*HashLen");
  const s4 = Math.ceil(r4 / o6);
  n6 === void 0 && (n6 = ao2);
  const i6 = new Uint8Array(s4 * o6), f9 = _e2.create(t2, e3), c8 = f9._cloneInto(), u5 = new Uint8Array(f9.outputLen);
  for (let a4 = 0; a4 < s4; a4++) xn2[0] = a4 + 1, c8.update(a4 === 0 ? ao2 : u5).update(n6).update(xn2).digestInto(u5), i6.set(u5, o6 * a4), f9._cloneInto(c8);
  return f9.destroy(), c8.destroy(), ut2(u5, xn2), i6.slice(0, r4);
}
var Yf = (t2, e3, n6, r4, o6) => Wf(t2, Zf(t2, e3, n6), r4, o6);
var Te2 = Ae2;
var vn2 = BigInt(0);
var En2 = BigInt(1);
function Re2(t2, e3) {
  if (typeof e3 != "boolean") throw new Error(t2 + " boolean expected, got " + e3);
}
function $e2(t2) {
  const e3 = t2.toString(16);
  return e3.length & 1 ? "0" + e3 : e3;
}
function uo2(t2) {
  if (typeof t2 != "string") throw new Error("hex string expected, got " + typeof t2);
  return t2 === "" ? vn2 : BigInt("0x" + t2);
}
function Ce2(t2) {
  return uo2(ce(t2));
}
function Le2(t2) {
  return at(t2), uo2(ce(Uint8Array.from(t2).reverse()));
}
function Bn2(t2, e3) {
  return sn2(t2.toString(16).padStart(e3 * 2, "0"));
}
function In2(t2, e3) {
  return Bn2(t2, e3).reverse();
}
function rt2(t2, e3, n6) {
  let r4;
  if (typeof e3 == "string") try {
    r4 = sn2(e3);
  } catch (s4) {
    throw new Error(t2 + " must be hex string or Uint8Array, cause: " + s4);
  }
  else if (en2(e3)) r4 = Uint8Array.from(e3);
  else throw new Error(t2 + " must be hex string or Uint8Array");
  const o6 = r4.length;
  if (typeof n6 == "number" && o6 !== n6) throw new Error(t2 + " of length " + n6 + " expected, got " + o6);
  return r4;
}
var An2 = (t2) => typeof t2 == "bigint" && vn2 <= t2;
function Xf(t2, e3, n6) {
  return An2(t2) && An2(e3) && An2(n6) && e3 <= t2 && t2 < n6;
}
function Sn2(t2, e3, n6, r4) {
  if (!Xf(e3, n6, r4)) throw new Error("expected valid " + t2 + ": " + n6 + " <= n < " + r4 + ", got " + e3);
}
function Jf(t2) {
  let e3;
  for (e3 = 0; t2 > vn2; t2 >>= En2, e3 += 1) ;
  return e3;
}
var je2 = (t2) => (En2 << BigInt(t2)) - En2;
function Qf(t2, e3, n6) {
  if (typeof t2 != "number" || t2 < 2) throw new Error("hashLen must be a number");
  if (typeof e3 != "number" || e3 < 2) throw new Error("qByteLen must be a number");
  if (typeof n6 != "function") throw new Error("hmacFn must be a function");
  const r4 = (g4) => new Uint8Array(g4), o6 = (g4) => Uint8Array.of(g4);
  let s4 = r4(t2), i6 = r4(t2), f9 = 0;
  const c8 = () => {
    s4.fill(1), i6.fill(0), f9 = 0;
  }, u5 = (...g4) => n6(i6, s4, ...g4), a4 = (g4 = r4(0)) => {
    i6 = u5(o6(0), g4), s4 = u5(), g4.length !== 0 && (i6 = u5(o6(1), g4), s4 = u5());
  }, l9 = () => {
    if (f9++ >= 1e3) throw new Error("drbg: tried 1000 values");
    let g4 = 0;
    const m4 = [];
    for (; g4 < e3; ) {
      s4 = u5();
      const b6 = s4.slice();
      m4.push(b6), g4 += s4.length;
    }
    return Ht2(...m4);
  };
  return (g4, m4) => {
    c8(), a4(g4);
    let b6;
    for (; !(b6 = m4(l9())); ) a4();
    return c8(), b6;
  };
}
function ke2(t2, e3, n6 = {}) {
  if (!t2 || typeof t2 != "object") throw new Error("expected valid options object");
  function r4(o6, s4, i6) {
    const f9 = t2[o6];
    if (i6 && f9 === void 0) return;
    const c8 = typeof f9;
    if (c8 !== s4 || f9 === null) throw new Error(`param "${o6}" is invalid: expected ${s4}, got ${c8}`);
  }
  Object.entries(e3).forEach(([o6, s4]) => r4(o6, s4, false)), Object.entries(n6).forEach(([o6, s4]) => r4(o6, s4, true));
}
function lo2(t2) {
  const e3 = /* @__PURE__ */ new WeakMap();
  return (n6, ...r4) => {
    const o6 = e3.get(n6);
    if (o6 !== void 0) return o6;
    const s4 = t2(n6, ...r4);
    return e3.set(n6, s4), s4;
  };
}
var ot = BigInt(0);
var Q2 = BigInt(1);
var Dt2 = BigInt(2);
var tc = BigInt(3);
var ho2 = BigInt(4);
var po2 = BigInt(5);
var go2 = BigInt(8);
function lt2(t2, e3) {
  const n6 = t2 % e3;
  return n6 >= ot ? n6 : e3 + n6;
}
function pt(t2, e3, n6) {
  let r4 = t2;
  for (; e3-- > ot; ) r4 *= r4, r4 %= n6;
  return r4;
}
function bo2(t2, e3) {
  if (t2 === ot) throw new Error("invert: expected non-zero number");
  if (e3 <= ot) throw new Error("invert: expected positive modulus, got " + e3);
  let n6 = lt2(t2, e3), r4 = e3, o6 = ot, s4 = Q2;
  for (; n6 !== ot; ) {
    const f9 = r4 / n6, c8 = r4 % n6, u5 = o6 - s4 * f9;
    r4 = n6, n6 = c8, o6 = s4, s4 = u5;
  }
  if (r4 !== Q2) throw new Error("invert: does not exist");
  return lt2(o6, e3);
}
function yo2(t2, e3) {
  const n6 = (t2.ORDER + Q2) / ho2, r4 = t2.pow(e3, n6);
  if (!t2.eql(t2.sqr(r4), e3)) throw new Error("Cannot find square root");
  return r4;
}
function ec(t2, e3) {
  const n6 = (t2.ORDER - po2) / go2, r4 = t2.mul(e3, Dt2), o6 = t2.pow(r4, n6), s4 = t2.mul(e3, o6), i6 = t2.mul(t2.mul(s4, Dt2), o6), f9 = t2.mul(s4, t2.sub(i6, t2.ONE));
  if (!t2.eql(t2.sqr(f9), e3)) throw new Error("Cannot find square root");
  return f9;
}
function nc(t2) {
  if (t2 < BigInt(3)) throw new Error("sqrt is not defined for small field");
  let e3 = t2 - Q2, n6 = 0;
  for (; e3 % Dt2 === ot; ) e3 /= Dt2, n6++;
  let r4 = Dt2;
  const o6 = Yt2(t2);
  for (; wo2(o6, r4) === 1; ) if (r4++ > 1e3) throw new Error("Cannot find square root: probably non-prime P");
  if (n6 === 1) return yo2;
  let s4 = o6.pow(r4, e3);
  const i6 = (e3 + Q2) / Dt2;
  return function(c8, u5) {
    if (c8.is0(u5)) return u5;
    if (wo2(c8, u5) !== 1) throw new Error("Cannot find square root");
    let a4 = n6, l9 = c8.mul(c8.ONE, s4), h7 = c8.pow(u5, e3), g4 = c8.pow(u5, i6);
    for (; !c8.eql(h7, c8.ONE); ) {
      if (c8.is0(h7)) return c8.ZERO;
      let m4 = 1, b6 = c8.sqr(h7);
      for (; !c8.eql(b6, c8.ONE); ) if (m4++, b6 = c8.sqr(b6), m4 === a4) throw new Error("Cannot find square root");
      const v6 = Q2 << BigInt(a4 - m4 - 1), L5 = c8.pow(l9, v6);
      a4 = m4, l9 = c8.sqr(L5), h7 = c8.mul(h7, l9), g4 = c8.mul(g4, L5);
    }
    return g4;
  };
}
function rc(t2) {
  return t2 % ho2 === tc ? yo2 : t2 % go2 === po2 ? ec : nc(t2);
}
var oc = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function sc(t2) {
  const e3 = { ORDER: "bigint", MASK: "bigint", BYTES: "number", BITS: "number" }, n6 = oc.reduce((r4, o6) => (r4[o6] = "function", r4), e3);
  return ke2(t2, n6), t2;
}
function ic(t2, e3, n6) {
  if (n6 < ot) throw new Error("invalid exponent, negatives unsupported");
  if (n6 === ot) return t2.ONE;
  if (n6 === Q2) return e3;
  let r4 = t2.ONE, o6 = e3;
  for (; n6 > ot; ) n6 & Q2 && (r4 = t2.mul(r4, o6)), o6 = t2.sqr(o6), n6 >>= Q2;
  return r4;
}
function mo2(t2, e3, n6 = false) {
  const r4 = new Array(e3.length).fill(n6 ? t2.ZERO : void 0), o6 = e3.reduce((i6, f9, c8) => t2.is0(f9) ? i6 : (r4[c8] = i6, t2.mul(i6, f9)), t2.ONE), s4 = t2.inv(o6);
  return e3.reduceRight((i6, f9, c8) => t2.is0(f9) ? i6 : (r4[c8] = t2.mul(i6, r4[c8]), t2.mul(i6, f9)), s4), r4;
}
function wo2(t2, e3) {
  const n6 = (t2.ORDER - Q2) / Dt2, r4 = t2.pow(e3, n6), o6 = t2.eql(r4, t2.ONE), s4 = t2.eql(r4, t2.ZERO), i6 = t2.eql(r4, t2.neg(t2.ONE));
  if (!o6 && !s4 && !i6) throw new Error("invalid Legendre symbol result");
  return o6 ? 1 : s4 ? 0 : -1;
}
function fc(t2, e3) {
  e3 !== void 0 && mt(e3);
  const n6 = e3 !== void 0 ? e3 : t2.toString(2).length, r4 = Math.ceil(n6 / 8);
  return { nBitLength: n6, nByteLength: r4 };
}
function Yt2(t2, e3, n6 = false, r4 = {}) {
  if (t2 <= ot) throw new Error("invalid field: expected ORDER > 0, got " + t2);
  let o6, s4;
  if (typeof e3 == "object" && e3 != null) {
    if (r4.sqrt || n6) throw new Error("cannot specify opts in two arguments");
    const a4 = e3;
    a4.BITS && (o6 = a4.BITS), a4.sqrt && (s4 = a4.sqrt), typeof a4.isLE == "boolean" && (n6 = a4.isLE);
  } else typeof e3 == "number" && (o6 = e3), r4.sqrt && (s4 = r4.sqrt);
  const { nBitLength: i6, nByteLength: f9 } = fc(t2, o6);
  if (f9 > 2048) throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let c8;
  const u5 = Object.freeze({ ORDER: t2, isLE: n6, BITS: i6, BYTES: f9, MASK: je2(i6), ZERO: ot, ONE: Q2, create: (a4) => lt2(a4, t2), isValid: (a4) => {
    if (typeof a4 != "bigint") throw new Error("invalid field element: expected bigint, got " + typeof a4);
    return ot <= a4 && a4 < t2;
  }, is0: (a4) => a4 === ot, isValidNot0: (a4) => !u5.is0(a4) && u5.isValid(a4), isOdd: (a4) => (a4 & Q2) === Q2, neg: (a4) => lt2(-a4, t2), eql: (a4, l9) => a4 === l9, sqr: (a4) => lt2(a4 * a4, t2), add: (a4, l9) => lt2(a4 + l9, t2), sub: (a4, l9) => lt2(a4 - l9, t2), mul: (a4, l9) => lt2(a4 * l9, t2), pow: (a4, l9) => ic(u5, a4, l9), div: (a4, l9) => lt2(a4 * bo2(l9, t2), t2), sqrN: (a4) => a4 * a4, addN: (a4, l9) => a4 + l9, subN: (a4, l9) => a4 - l9, mulN: (a4, l9) => a4 * l9, inv: (a4) => bo2(a4, t2), sqrt: s4 || ((a4) => (c8 || (c8 = rc(t2)), c8(u5, a4))), toBytes: (a4) => n6 ? In2(a4, f9) : Bn2(a4, f9), fromBytes: (a4) => {
    if (a4.length !== f9) throw new Error("Field.fromBytes: expected " + f9 + " bytes, got " + a4.length);
    return n6 ? Le2(a4) : Ce2(a4);
  }, invertBatch: (a4) => mo2(u5, a4), cmov: (a4, l9, h7) => h7 ? l9 : a4 });
  return Object.freeze(u5);
}
function xo2(t2) {
  if (typeof t2 != "bigint") throw new Error("field order must be bigint");
  const e3 = t2.toString(2).length;
  return Math.ceil(e3 / 8);
}
function vo2(t2) {
  const e3 = xo2(t2);
  return e3 + Math.ceil(e3 / 2);
}
function cc(t2, e3, n6 = false) {
  const r4 = t2.length, o6 = xo2(e3), s4 = vo2(e3);
  if (r4 < 16 || r4 < s4 || r4 > 1024) throw new Error("expected " + s4 + "-1024 bytes of input, got " + r4);
  const i6 = n6 ? Le2(t2) : Ce2(t2), f9 = lt2(i6, e3 - Q2) + Q2;
  return n6 ? In2(f9, o6) : Bn2(f9, o6);
}
var Xt2 = BigInt(0);
var Mt2 = BigInt(1);
function le2(t2, e3) {
  const n6 = e3.negate();
  return t2 ? n6 : e3;
}
function ac(t2, e3, n6) {
  const r4 = e3 === "pz" ? (i6) => i6.pz : (i6) => i6.ez, o6 = mo2(t2.Fp, n6.map(r4));
  return n6.map((i6, f9) => i6.toAffine(o6[f9])).map(t2.fromAffine);
}
function Eo2(t2, e3) {
  if (!Number.isSafeInteger(t2) || t2 <= 0 || t2 > e3) throw new Error("invalid window size, expected [1.." + e3 + "], got W=" + t2);
}
function Nn2(t2, e3) {
  Eo2(t2, e3);
  const n6 = Math.ceil(e3 / t2) + 1, r4 = 2 ** (t2 - 1), o6 = 2 ** t2, s4 = je2(t2), i6 = BigInt(t2);
  return { windows: n6, windowSize: r4, mask: s4, maxNumber: o6, shiftBy: i6 };
}
function Bo2(t2, e3, n6) {
  const { windowSize: r4, mask: o6, maxNumber: s4, shiftBy: i6 } = n6;
  let f9 = Number(t2 & o6), c8 = t2 >> i6;
  f9 > r4 && (f9 -= s4, c8 += Mt2);
  const u5 = e3 * r4, a4 = u5 + Math.abs(f9) - 1, l9 = f9 === 0, h7 = f9 < 0, g4 = e3 % 2 !== 0;
  return { nextN: c8, offset: a4, isZero: l9, isNeg: h7, isNegF: g4, offsetF: u5 };
}
function uc(t2, e3) {
  if (!Array.isArray(t2)) throw new Error("array expected");
  t2.forEach((n6, r4) => {
    if (!(n6 instanceof e3)) throw new Error("invalid point at index " + r4);
  });
}
function lc(t2, e3) {
  if (!Array.isArray(t2)) throw new Error("array of scalars expected");
  t2.forEach((n6, r4) => {
    if (!e3.isValid(n6)) throw new Error("invalid scalar at index " + r4);
  });
}
var On2 = /* @__PURE__ */ new WeakMap();
var Io2 = /* @__PURE__ */ new WeakMap();
function Un2(t2) {
  return Io2.get(t2) || 1;
}
function Ao2(t2) {
  if (t2 !== Xt2) throw new Error("invalid wNAF");
}
function dc(t2, e3) {
  return { constTimeNegate: le2, hasPrecomputes(n6) {
    return Un2(n6) !== 1;
  }, unsafeLadder(n6, r4, o6 = t2.ZERO) {
    let s4 = n6;
    for (; r4 > Xt2; ) r4 & Mt2 && (o6 = o6.add(s4)), s4 = s4.double(), r4 >>= Mt2;
    return o6;
  }, precomputeWindow(n6, r4) {
    const { windows: o6, windowSize: s4 } = Nn2(r4, e3), i6 = [];
    let f9 = n6, c8 = f9;
    for (let u5 = 0; u5 < o6; u5++) {
      c8 = f9, i6.push(c8);
      for (let a4 = 1; a4 < s4; a4++) c8 = c8.add(f9), i6.push(c8);
      f9 = c8.double();
    }
    return i6;
  }, wNAF(n6, r4, o6) {
    let s4 = t2.ZERO, i6 = t2.BASE;
    const f9 = Nn2(n6, e3);
    for (let c8 = 0; c8 < f9.windows; c8++) {
      const { nextN: u5, offset: a4, isZero: l9, isNeg: h7, isNegF: g4, offsetF: m4 } = Bo2(o6, c8, f9);
      o6 = u5, l9 ? i6 = i6.add(le2(g4, r4[m4])) : s4 = s4.add(le2(h7, r4[a4]));
    }
    return Ao2(o6), { p: s4, f: i6 };
  }, wNAFUnsafe(n6, r4, o6, s4 = t2.ZERO) {
    const i6 = Nn2(n6, e3);
    for (let f9 = 0; f9 < i6.windows && o6 !== Xt2; f9++) {
      const { nextN: c8, offset: u5, isZero: a4, isNeg: l9 } = Bo2(o6, f9, i6);
      if (o6 = c8, !a4) {
        const h7 = r4[u5];
        s4 = s4.add(l9 ? h7.negate() : h7);
      }
    }
    return Ao2(o6), s4;
  }, getPrecomputes(n6, r4, o6) {
    let s4 = On2.get(r4);
    return s4 || (s4 = this.precomputeWindow(r4, n6), n6 !== 1 && (typeof o6 == "function" && (s4 = o6(s4)), On2.set(r4, s4))), s4;
  }, wNAFCached(n6, r4, o6) {
    const s4 = Un2(n6);
    return this.wNAF(s4, this.getPrecomputes(s4, n6, o6), r4);
  }, wNAFCachedUnsafe(n6, r4, o6, s4) {
    const i6 = Un2(n6);
    return i6 === 1 ? this.unsafeLadder(n6, r4, s4) : this.wNAFUnsafe(i6, this.getPrecomputes(i6, n6, o6), r4, s4);
  }, setWindowSize(n6, r4) {
    Eo2(r4, e3), Io2.set(n6, r4), On2.delete(n6);
  } };
}
function hc(t2, e3, n6, r4) {
  let o6 = e3, s4 = t2.ZERO, i6 = t2.ZERO;
  for (; n6 > Xt2 || r4 > Xt2; ) n6 & Mt2 && (s4 = s4.add(o6)), r4 & Mt2 && (i6 = i6.add(o6)), o6 = o6.double(), n6 >>= Mt2, r4 >>= Mt2;
  return { p1: s4, p2: i6 };
}
function pc(t2, e3, n6, r4) {
  uc(n6, t2), lc(r4, e3);
  const o6 = n6.length, s4 = r4.length;
  if (o6 !== s4) throw new Error("arrays of points and scalars must have equal length");
  const i6 = t2.ZERO, f9 = Jf(BigInt(o6));
  let c8 = 1;
  f9 > 12 ? c8 = f9 - 3 : f9 > 4 ? c8 = f9 - 2 : f9 > 0 && (c8 = 2);
  const u5 = je2(c8), a4 = new Array(Number(u5) + 1).fill(i6), l9 = Math.floor((e3.BITS - 1) / c8) * c8;
  let h7 = i6;
  for (let g4 = l9; g4 >= 0; g4 -= c8) {
    a4.fill(i6);
    for (let b6 = 0; b6 < s4; b6++) {
      const v6 = r4[b6], L5 = Number(v6 >> BigInt(g4) & u5);
      a4[L5] = a4[L5].add(n6[b6]);
    }
    let m4 = i6;
    for (let b6 = a4.length - 1, v6 = i6; b6 > 0; b6--) v6 = v6.add(a4[b6]), m4 = m4.add(v6);
    if (h7 = h7.add(m4), g4 !== 0) for (let b6 = 0; b6 < c8; b6++) h7 = h7.double();
  }
  return h7;
}
function So2(t2, e3) {
  if (e3) {
    if (e3.ORDER !== t2) throw new Error("Field.ORDER must match order: Fp == p, Fn == n");
    return sc(e3), e3;
  } else return Yt2(t2);
}
function gc(t2, e3, n6 = {}) {
  if (!e3 || typeof e3 != "object") throw new Error(`expected valid ${t2} CURVE object`);
  for (const f9 of ["p", "n", "h"]) {
    const c8 = e3[f9];
    if (!(typeof c8 == "bigint" && c8 > Xt2)) throw new Error(`CURVE.${f9} must be positive bigint`);
  }
  const r4 = So2(e3.p, n6.Fp), o6 = So2(e3.n, n6.Fn), i6 = ["Gx", "Gy", "a", t2 === "weierstrass" ? "b" : "d"];
  for (const f9 of i6) if (!r4.isValid(e3[f9])) throw new Error(`CURVE.${f9} must be valid field element of CURVE.Fp`);
  return { Fp: r4, Fn: o6 };
}
BigInt(0), BigInt(1), BigInt(2), BigInt(8);
var de2 = BigInt(0);
var Jt2 = BigInt(1);
var Pe2 = BigInt(2);
function bc(t2) {
  return ke2(t2, { adjustScalarBytes: "function", powPminus2: "function" }), Object.freeze({ ...t2 });
}
function yc(t2) {
  const e3 = bc(t2), { P: n6, type: r4, adjustScalarBytes: o6, powPminus2: s4, randomBytes: i6 } = e3, f9 = r4 === "x25519";
  if (!f9 && r4 !== "x448") throw new Error("invalid type");
  const c8 = i6 || Zt2, u5 = f9 ? 255 : 448, a4 = f9 ? 32 : 56, l9 = BigInt(f9 ? 9 : 5), h7 = BigInt(f9 ? 121665 : 39081), g4 = f9 ? Pe2 ** BigInt(254) : Pe2 ** BigInt(447), m4 = f9 ? BigInt(8) * Pe2 ** BigInt(251) - Jt2 : BigInt(4) * Pe2 ** BigInt(445) - Jt2, b6 = g4 + m4 + Jt2, v6 = (d6) => lt2(d6, n6), L5 = V4(l9);
  function V4(d6) {
    return In2(v6(d6), a4);
  }
  function C5(d6) {
    const w6 = rt2("u coordinate", d6, a4);
    return f9 && (w6[31] &= 127), v6(Le2(w6));
  }
  function H3(d6) {
    return Le2(o6(rt2("scalar", d6, a4)));
  }
  function _3(d6, w6) {
    const p6 = R4(C5(w6), H3(d6));
    if (p6 === de2) throw new Error("invalid private or public key received");
    return V4(p6);
  }
  function k7(d6) {
    return _3(d6, L5);
  }
  function P6(d6, w6, p6) {
    const y7 = v6(d6 * (w6 - p6));
    return w6 = v6(w6 - y7), p6 = v6(p6 + y7), { x_2: w6, x_3: p6 };
  }
  function R4(d6, w6) {
    Sn2("u", d6, de2, n6), Sn2("scalar", w6, g4, b6);
    const p6 = w6, y7 = d6;
    let x6 = Jt2, B4 = de2, E6 = d6, I5 = Jt2, S5 = de2;
    for (let A4 = BigInt(u5 - 1); A4 >= de2; A4--) {
      const T4 = p6 >> A4 & Jt2;
      S5 ^= T4, { x_2: x6, x_3: E6 } = P6(S5, x6, E6), { x_2: B4, x_3: I5 } = P6(S5, B4, I5), S5 = T4;
      const U4 = x6 + B4, $4 = v6(U4 * U4), D3 = x6 - B4, q2 = v6(D3 * D3), j5 = $4 - q2, K4 = E6 + I5, et2 = E6 - I5, Z2 = v6(et2 * U4), z4 = v6(K4 * D3), Ft4 = Z2 + z4, yt4 = Z2 - z4;
      E6 = v6(Ft4 * Ft4), I5 = v6(y7 * v6(yt4 * yt4)), x6 = v6($4 * q2), B4 = v6(j5 * ($4 + v6(h7 * j5)));
    }
    ({ x_2: x6, x_3: E6 } = P6(S5, x6, E6)), { x_2: B4, x_3: I5 } = P6(S5, B4, I5);
    const O7 = s4(B4);
    return v6(x6 * O7);
  }
  return { scalarMult: _3, scalarMultBase: k7, getSharedSecret: (d6, w6) => _3(d6, w6), getPublicKey: (d6) => k7(d6), utils: { randomPrivateKey: () => c8(a4) }, GuBytes: L5.slice() };
}
BigInt(0);
var mc = BigInt(1);
var No2 = BigInt(2);
var wc = BigInt(3);
var xc = BigInt(5);
var vc = BigInt(8);
var Oo2 = { p: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed"), n: BigInt("0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed"), h: vc, a: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec"), d: BigInt("0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3"), Gx: BigInt("0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a"), Gy: BigInt("0x6666666666666666666666666666666666666666666666666666666666666658") };
function Ec(t2) {
  const e3 = BigInt(10), n6 = BigInt(20), r4 = BigInt(40), o6 = BigInt(80), s4 = Oo2.p, f9 = t2 * t2 % s4 * t2 % s4, c8 = pt(f9, No2, s4) * f9 % s4, u5 = pt(c8, mc, s4) * t2 % s4, a4 = pt(u5, xc, s4) * u5 % s4, l9 = pt(a4, e3, s4) * a4 % s4, h7 = pt(l9, n6, s4) * l9 % s4, g4 = pt(h7, r4, s4) * h7 % s4, m4 = pt(g4, o6, s4) * g4 % s4, b6 = pt(m4, o6, s4) * g4 % s4, v6 = pt(b6, e3, s4) * a4 % s4;
  return { pow_p_5_8: pt(v6, No2, s4) * t2 % s4, b2: f9 };
}
function Bc(t2) {
  return t2[0] &= 248, t2[31] &= 127, t2[31] |= 64, t2;
}
var _n2 = (() => {
  const t2 = Oo2.p;
  return yc({ P: t2, type: "x25519", powPminus2: (e3) => {
    const { pow_p_5_8: n6, b2: r4 } = Ec(e3);
    return lt2(pt(n6, wc, t2) * r4, t2);
  }, adjustScalarBytes: Bc });
})();
function Uo2(t2) {
  t2.lowS !== void 0 && Re2("lowS", t2.lowS), t2.prehash !== void 0 && Re2("prehash", t2.prehash);
}
var Ic = class extends Error {
  constructor(e3 = "") {
    super(e3);
  }
};
var vt2 = { Err: Ic, _tlv: { encode: (t2, e3) => {
  const { Err: n6 } = vt2;
  if (t2 < 0 || t2 > 256) throw new n6("tlv.encode: wrong tag");
  if (e3.length & 1) throw new n6("tlv.encode: unpadded data");
  const r4 = e3.length / 2, o6 = $e2(r4);
  if (o6.length / 2 & 128) throw new n6("tlv.encode: long form length too big");
  const s4 = r4 > 127 ? $e2(o6.length / 2 | 128) : "";
  return $e2(t2) + s4 + o6 + e3;
}, decode(t2, e3) {
  const { Err: n6 } = vt2;
  let r4 = 0;
  if (t2 < 0 || t2 > 256) throw new n6("tlv.encode: wrong tag");
  if (e3.length < 2 || e3[r4++] !== t2) throw new n6("tlv.decode: wrong tlv");
  const o6 = e3[r4++], s4 = !!(o6 & 128);
  let i6 = 0;
  if (!s4) i6 = o6;
  else {
    const c8 = o6 & 127;
    if (!c8) throw new n6("tlv.decode(long): indefinite length not supported");
    if (c8 > 4) throw new n6("tlv.decode(long): byte length is too big");
    const u5 = e3.subarray(r4, r4 + c8);
    if (u5.length !== c8) throw new n6("tlv.decode: length bytes not complete");
    if (u5[0] === 0) throw new n6("tlv.decode(long): zero leftmost byte");
    for (const a4 of u5) i6 = i6 << 8 | a4;
    if (r4 += c8, i6 < 128) throw new n6("tlv.decode(long): not minimal encoding");
  }
  const f9 = e3.subarray(r4, r4 + i6);
  if (f9.length !== i6) throw new n6("tlv.decode: wrong value length");
  return { v: f9, l: e3.subarray(r4 + i6) };
} }, _int: { encode(t2) {
  const { Err: e3 } = vt2;
  if (t2 < he2) throw new e3("integer: negative integers are not allowed");
  let n6 = $e2(t2);
  if (Number.parseInt(n6[0], 16) & 8 && (n6 = "00" + n6), n6.length & 1) throw new e3("unexpected DER parsing assertion: unpadded hex");
  return n6;
}, decode(t2) {
  const { Err: e3 } = vt2;
  if (t2[0] & 128) throw new e3("invalid signature integer: negative");
  if (t2[0] === 0 && !(t2[1] & 128)) throw new e3("invalid signature integer: unnecessary leading zero");
  return Ce2(t2);
} }, toSig(t2) {
  const { Err: e3, _int: n6, _tlv: r4 } = vt2, o6 = rt2("signature", t2), { v: s4, l: i6 } = r4.decode(48, o6);
  if (i6.length) throw new e3("invalid signature: left bytes after parsing");
  const { v: f9, l: c8 } = r4.decode(2, s4), { v: u5, l: a4 } = r4.decode(2, c8);
  if (a4.length) throw new e3("invalid signature: left bytes after parsing");
  return { r: n6.decode(f9), s: n6.decode(u5) };
}, hexFromSig(t2) {
  const { _tlv: e3, _int: n6 } = vt2, r4 = e3.encode(2, n6.encode(t2.r)), o6 = e3.encode(2, n6.encode(t2.s)), s4 = r4 + o6;
  return e3.encode(48, s4);
} };
var he2 = BigInt(0);
var pe2 = BigInt(1);
var Ac = BigInt(2);
var He2 = BigInt(3);
var Sc = BigInt(4);
function Nc(t2, e3, n6) {
  function r4(o6) {
    const s4 = t2.sqr(o6), i6 = t2.mul(s4, o6);
    return t2.add(t2.add(i6, t2.mul(o6, e3)), n6);
  }
  return r4;
}
function _o2(t2, e3, n6) {
  const { BYTES: r4 } = t2;
  function o6(s4) {
    let i6;
    if (typeof s4 == "bigint") i6 = s4;
    else {
      let f9 = rt2("private key", s4);
      if (e3) {
        if (!e3.includes(f9.length * 2)) throw new Error("invalid private key");
        const c8 = new Uint8Array(r4);
        c8.set(f9, c8.length - f9.length), f9 = c8;
      }
      try {
        i6 = t2.fromBytes(f9);
      } catch {
        throw new Error(`invalid private key: expected ui8a of size ${r4}, got ${typeof s4}`);
      }
    }
    if (n6 && (i6 = t2.create(i6)), !t2.isValidNot0(i6)) throw new Error("invalid private key: out of range [1..N-1]");
    return i6;
  }
  return o6;
}
function Oc(t2, e3 = {}) {
  const { Fp: n6, Fn: r4 } = gc("weierstrass", t2, e3), { h: o6, n: s4 } = t2;
  ke2(e3, {}, { allowInfinityPoint: "boolean", clearCofactor: "function", isTorsionFree: "function", fromBytes: "function", toBytes: "function", endo: "object", wrapPrivateKey: "boolean" });
  const { endo: i6 } = e3;
  if (i6 && (!n6.is0(t2.a) || typeof i6.beta != "bigint" || typeof i6.splitScalar != "function")) throw new Error('invalid endo: expected "beta": bigint and "splitScalar": function');
  function f9() {
    if (!n6.isOdd) throw new Error("compression is not supported: Field does not have .isOdd()");
  }
  function c8(R4, d6, w6) {
    const { x: p6, y: y7 } = d6.toAffine(), x6 = n6.toBytes(p6);
    if (Re2("isCompressed", w6), w6) {
      f9();
      const B4 = !n6.isOdd(y7);
      return Ht2(To2(B4), x6);
    } else return Ht2(Uint8Array.of(4), x6, n6.toBytes(y7));
  }
  function u5(R4) {
    at(R4);
    const d6 = n6.BYTES, w6 = d6 + 1, p6 = 2 * d6 + 1, y7 = R4.length, x6 = R4[0], B4 = R4.subarray(1);
    if (y7 === w6 && (x6 === 2 || x6 === 3)) {
      const E6 = n6.fromBytes(B4);
      if (!n6.isValid(E6)) throw new Error("bad point: is not on curve, wrong x");
      const I5 = h7(E6);
      let S5;
      try {
        S5 = n6.sqrt(I5);
      } catch (T4) {
        const U4 = T4 instanceof Error ? ": " + T4.message : "";
        throw new Error("bad point: is not on curve, sqrt error" + U4);
      }
      f9();
      const O7 = n6.isOdd(S5);
      return (x6 & 1) === 1 !== O7 && (S5 = n6.neg(S5)), { x: E6, y: S5 };
    } else if (y7 === p6 && x6 === 4) {
      const E6 = n6.fromBytes(B4.subarray(d6 * 0, d6 * 1)), I5 = n6.fromBytes(B4.subarray(d6 * 1, d6 * 2));
      if (!g4(E6, I5)) throw new Error("bad point: is not on curve");
      return { x: E6, y: I5 };
    } else throw new Error(`bad point: got length ${y7}, expected compressed=${w6} or uncompressed=${p6}`);
  }
  const a4 = e3.toBytes || c8, l9 = e3.fromBytes || u5, h7 = Nc(n6, t2.a, t2.b);
  function g4(R4, d6) {
    const w6 = n6.sqr(d6), p6 = h7(R4);
    return n6.eql(w6, p6);
  }
  if (!g4(t2.Gx, t2.Gy)) throw new Error("bad curve params: generator point");
  const m4 = n6.mul(n6.pow(t2.a, He2), Sc), b6 = n6.mul(n6.sqr(t2.b), BigInt(27));
  if (n6.is0(n6.add(m4, b6))) throw new Error("bad curve params: a or b");
  function v6(R4, d6, w6 = false) {
    if (!n6.isValid(d6) || w6 && n6.is0(d6)) throw new Error(`bad point coordinate ${R4}`);
    return d6;
  }
  function L5(R4) {
    if (!(R4 instanceof _3)) throw new Error("ProjectivePoint expected");
  }
  const V4 = lo2((R4, d6) => {
    const { px: w6, py: p6, pz: y7 } = R4;
    if (n6.eql(y7, n6.ONE)) return { x: w6, y: p6 };
    const x6 = R4.is0();
    d6 == null && (d6 = x6 ? n6.ONE : n6.inv(y7));
    const B4 = n6.mul(w6, d6), E6 = n6.mul(p6, d6), I5 = n6.mul(y7, d6);
    if (x6) return { x: n6.ZERO, y: n6.ZERO };
    if (!n6.eql(I5, n6.ONE)) throw new Error("invZ was invalid");
    return { x: B4, y: E6 };
  }), C5 = lo2((R4) => {
    if (R4.is0()) {
      if (e3.allowInfinityPoint && !n6.is0(R4.py)) return;
      throw new Error("bad point: ZERO");
    }
    const { x: d6, y: w6 } = R4.toAffine();
    if (!n6.isValid(d6) || !n6.isValid(w6)) throw new Error("bad point: x or y not field elements");
    if (!g4(d6, w6)) throw new Error("bad point: equation left != right");
    if (!R4.isTorsionFree()) throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  function H3(R4, d6, w6, p6, y7) {
    return w6 = new _3(n6.mul(w6.px, R4), w6.py, w6.pz), d6 = le2(p6, d6), w6 = le2(y7, w6), d6.add(w6);
  }
  class _3 {
    constructor(d6, w6, p6) {
      this.px = v6("x", d6), this.py = v6("y", w6, true), this.pz = v6("z", p6), Object.freeze(this);
    }
    static fromAffine(d6) {
      const { x: w6, y: p6 } = d6 || {};
      if (!d6 || !n6.isValid(w6) || !n6.isValid(p6)) throw new Error("invalid affine point");
      if (d6 instanceof _3) throw new Error("projective point not allowed");
      return n6.is0(w6) && n6.is0(p6) ? _3.ZERO : new _3(w6, p6, n6.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static normalizeZ(d6) {
      return ac(_3, "pz", d6);
    }
    static fromBytes(d6) {
      return at(d6), _3.fromHex(d6);
    }
    static fromHex(d6) {
      const w6 = _3.fromAffine(l9(rt2("pointHex", d6)));
      return w6.assertValidity(), w6;
    }
    static fromPrivateKey(d6) {
      const w6 = _o2(r4, e3.allowedPrivateKeyLengths, e3.wrapPrivateKey);
      return _3.BASE.multiply(w6(d6));
    }
    static msm(d6, w6) {
      return pc(_3, r4, d6, w6);
    }
    precompute(d6 = 8, w6 = true) {
      return P6.setWindowSize(this, d6), w6 || this.multiply(He2), this;
    }
    _setWindowSize(d6) {
      this.precompute(d6);
    }
    assertValidity() {
      C5(this);
    }
    hasEvenY() {
      const { y: d6 } = this.toAffine();
      if (!n6.isOdd) throw new Error("Field doesn't support isOdd");
      return !n6.isOdd(d6);
    }
    equals(d6) {
      L5(d6);
      const { px: w6, py: p6, pz: y7 } = this, { px: x6, py: B4, pz: E6 } = d6, I5 = n6.eql(n6.mul(w6, E6), n6.mul(x6, y7)), S5 = n6.eql(n6.mul(p6, E6), n6.mul(B4, y7));
      return I5 && S5;
    }
    negate() {
      return new _3(this.px, n6.neg(this.py), this.pz);
    }
    double() {
      const { a: d6, b: w6 } = t2, p6 = n6.mul(w6, He2), { px: y7, py: x6, pz: B4 } = this;
      let E6 = n6.ZERO, I5 = n6.ZERO, S5 = n6.ZERO, O7 = n6.mul(y7, y7), A4 = n6.mul(x6, x6), T4 = n6.mul(B4, B4), U4 = n6.mul(y7, x6);
      return U4 = n6.add(U4, U4), S5 = n6.mul(y7, B4), S5 = n6.add(S5, S5), E6 = n6.mul(d6, S5), I5 = n6.mul(p6, T4), I5 = n6.add(E6, I5), E6 = n6.sub(A4, I5), I5 = n6.add(A4, I5), I5 = n6.mul(E6, I5), E6 = n6.mul(U4, E6), S5 = n6.mul(p6, S5), T4 = n6.mul(d6, T4), U4 = n6.sub(O7, T4), U4 = n6.mul(d6, U4), U4 = n6.add(U4, S5), S5 = n6.add(O7, O7), O7 = n6.add(S5, O7), O7 = n6.add(O7, T4), O7 = n6.mul(O7, U4), I5 = n6.add(I5, O7), T4 = n6.mul(x6, B4), T4 = n6.add(T4, T4), O7 = n6.mul(T4, U4), E6 = n6.sub(E6, O7), S5 = n6.mul(T4, A4), S5 = n6.add(S5, S5), S5 = n6.add(S5, S5), new _3(E6, I5, S5);
    }
    add(d6) {
      L5(d6);
      const { px: w6, py: p6, pz: y7 } = this, { px: x6, py: B4, pz: E6 } = d6;
      let I5 = n6.ZERO, S5 = n6.ZERO, O7 = n6.ZERO;
      const A4 = t2.a, T4 = n6.mul(t2.b, He2);
      let U4 = n6.mul(w6, x6), $4 = n6.mul(p6, B4), D3 = n6.mul(y7, E6), q2 = n6.add(w6, p6), j5 = n6.add(x6, B4);
      q2 = n6.mul(q2, j5), j5 = n6.add(U4, $4), q2 = n6.sub(q2, j5), j5 = n6.add(w6, y7);
      let K4 = n6.add(x6, E6);
      return j5 = n6.mul(j5, K4), K4 = n6.add(U4, D3), j5 = n6.sub(j5, K4), K4 = n6.add(p6, y7), I5 = n6.add(B4, E6), K4 = n6.mul(K4, I5), I5 = n6.add($4, D3), K4 = n6.sub(K4, I5), O7 = n6.mul(A4, j5), I5 = n6.mul(T4, D3), O7 = n6.add(I5, O7), I5 = n6.sub($4, O7), O7 = n6.add($4, O7), S5 = n6.mul(I5, O7), $4 = n6.add(U4, U4), $4 = n6.add($4, U4), D3 = n6.mul(A4, D3), j5 = n6.mul(T4, j5), $4 = n6.add($4, D3), D3 = n6.sub(U4, D3), D3 = n6.mul(A4, D3), j5 = n6.add(j5, D3), U4 = n6.mul($4, j5), S5 = n6.add(S5, U4), U4 = n6.mul(K4, j5), I5 = n6.mul(q2, I5), I5 = n6.sub(I5, U4), U4 = n6.mul(q2, $4), O7 = n6.mul(K4, O7), O7 = n6.add(O7, U4), new _3(I5, S5, O7);
    }
    subtract(d6) {
      return this.add(d6.negate());
    }
    is0() {
      return this.equals(_3.ZERO);
    }
    multiply(d6) {
      const { endo: w6 } = e3;
      if (!r4.isValidNot0(d6)) throw new Error("invalid scalar: out of range");
      let p6, y7;
      const x6 = (B4) => P6.wNAFCached(this, B4, _3.normalizeZ);
      if (w6) {
        const { k1neg: B4, k1: E6, k2neg: I5, k2: S5 } = w6.splitScalar(d6), { p: O7, f: A4 } = x6(E6), { p: T4, f: U4 } = x6(S5);
        y7 = A4.add(U4), p6 = H3(w6.beta, O7, T4, B4, I5);
      } else {
        const { p: B4, f: E6 } = x6(d6);
        p6 = B4, y7 = E6;
      }
      return _3.normalizeZ([p6, y7])[0];
    }
    multiplyUnsafe(d6) {
      const { endo: w6 } = e3, p6 = this;
      if (!r4.isValid(d6)) throw new Error("invalid scalar: out of range");
      if (d6 === he2 || p6.is0()) return _3.ZERO;
      if (d6 === pe2) return p6;
      if (P6.hasPrecomputes(this)) return this.multiply(d6);
      if (w6) {
        const { k1neg: y7, k1: x6, k2neg: B4, k2: E6 } = w6.splitScalar(d6), { p1: I5, p2: S5 } = hc(_3, p6, x6, E6);
        return H3(w6.beta, I5, S5, y7, B4);
      } else return P6.wNAFCachedUnsafe(p6, d6);
    }
    multiplyAndAddUnsafe(d6, w6, p6) {
      const y7 = this.multiplyUnsafe(w6).add(d6.multiplyUnsafe(p6));
      return y7.is0() ? void 0 : y7;
    }
    toAffine(d6) {
      return V4(this, d6);
    }
    isTorsionFree() {
      const { isTorsionFree: d6 } = e3;
      return o6 === pe2 ? true : d6 ? d6(_3, this) : P6.wNAFCachedUnsafe(this, s4).is0();
    }
    clearCofactor() {
      const { clearCofactor: d6 } = e3;
      return o6 === pe2 ? this : d6 ? d6(_3, this) : this.multiplyUnsafe(o6);
    }
    toBytes(d6 = true) {
      return Re2("isCompressed", d6), this.assertValidity(), a4(_3, this, d6);
    }
    toRawBytes(d6 = true) {
      return this.toBytes(d6);
    }
    toHex(d6 = true) {
      return ce(this.toBytes(d6));
    }
    toString() {
      return `<Point ${this.is0() ? "ZERO" : this.toHex()}>`;
    }
  }
  _3.BASE = new _3(t2.Gx, t2.Gy, n6.ONE), _3.ZERO = new _3(n6.ZERO, n6.ONE, n6.ZERO), _3.Fp = n6, _3.Fn = r4;
  const k7 = r4.BITS, P6 = dc(_3, e3.endo ? Math.ceil(k7 / 2) : k7);
  return _3;
}
function To2(t2) {
  return Uint8Array.of(t2 ? 2 : 3);
}
function Uc(t2, e3, n6 = {}) {
  ke2(e3, { hash: "function" }, { hmac: "function", lowS: "boolean", randomBytes: "function", bits2int: "function", bits2int_modN: "function" });
  const r4 = e3.randomBytes || Zt2, o6 = e3.hmac || ((p6, ...y7) => _e2(e3.hash, p6, Ht2(...y7))), { Fp: s4, Fn: i6 } = t2, { ORDER: f9, BITS: c8 } = i6;
  function u5(p6) {
    const y7 = f9 >> pe2;
    return p6 > y7;
  }
  function a4(p6) {
    return u5(p6) ? i6.neg(p6) : p6;
  }
  function l9(p6, y7) {
    if (!i6.isValidNot0(y7)) throw new Error(`invalid signature ${p6}: out of range 1..CURVE.n`);
  }
  class h7 {
    constructor(y7, x6, B4) {
      l9("r", y7), l9("s", x6), this.r = y7, this.s = x6, B4 != null && (this.recovery = B4), Object.freeze(this);
    }
    static fromCompact(y7) {
      const x6 = i6.BYTES, B4 = rt2("compactSignature", y7, x6 * 2);
      return new h7(i6.fromBytes(B4.subarray(0, x6)), i6.fromBytes(B4.subarray(x6, x6 * 2)));
    }
    static fromDER(y7) {
      const { r: x6, s: B4 } = vt2.toSig(rt2("DER", y7));
      return new h7(x6, B4);
    }
    assertValidity() {
    }
    addRecoveryBit(y7) {
      return new h7(this.r, this.s, y7);
    }
    recoverPublicKey(y7) {
      const x6 = s4.ORDER, { r: B4, s: E6, recovery: I5 } = this;
      if (I5 == null || ![0, 1, 2, 3].includes(I5)) throw new Error("recovery id invalid");
      if (f9 * Ac < x6 && I5 > 1) throw new Error("recovery id is ambiguous for h>1 curve");
      const O7 = I5 === 2 || I5 === 3 ? B4 + f9 : B4;
      if (!s4.isValid(O7)) throw new Error("recovery id 2 or 3 invalid");
      const A4 = s4.toBytes(O7), T4 = t2.fromHex(Ht2(To2((I5 & 1) === 0), A4)), U4 = i6.inv(O7), $4 = C5(rt2("msgHash", y7)), D3 = i6.create(-$4 * U4), q2 = i6.create(E6 * U4), j5 = t2.BASE.multiplyUnsafe(D3).add(T4.multiplyUnsafe(q2));
      if (j5.is0()) throw new Error("point at infinify");
      return j5.assertValidity(), j5;
    }
    hasHighS() {
      return u5(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new h7(this.r, i6.neg(this.s), this.recovery) : this;
    }
    toBytes(y7) {
      if (y7 === "compact") return Ht2(i6.toBytes(this.r), i6.toBytes(this.s));
      if (y7 === "der") return sn2(vt2.hexFromSig(this));
      throw new Error("invalid format");
    }
    toDERRawBytes() {
      return this.toBytes("der");
    }
    toDERHex() {
      return ce(this.toBytes("der"));
    }
    toCompactRawBytes() {
      return this.toBytes("compact");
    }
    toCompactHex() {
      return ce(this.toBytes("compact"));
    }
  }
  const g4 = _o2(i6, n6.allowedPrivateKeyLengths, n6.wrapPrivateKey), m4 = { isValidPrivateKey(p6) {
    try {
      return g4(p6), true;
    } catch {
      return false;
    }
  }, normPrivateKeyToScalar: g4, randomPrivateKey: () => {
    const p6 = f9;
    return cc(r4(vo2(p6)), p6);
  }, precompute(p6 = 8, y7 = t2.BASE) {
    return y7.precompute(p6, false);
  } };
  function b6(p6, y7 = true) {
    return t2.fromPrivateKey(p6).toBytes(y7);
  }
  function v6(p6) {
    if (typeof p6 == "bigint") return false;
    if (p6 instanceof t2) return true;
    const x6 = rt2("key", p6).length, B4 = s4.BYTES, E6 = B4 + 1, I5 = 2 * B4 + 1;
    if (!(n6.allowedPrivateKeyLengths || i6.BYTES === E6)) return x6 === E6 || x6 === I5;
  }
  function L5(p6, y7, x6 = true) {
    if (v6(p6) === true) throw new Error("first arg must be private key");
    if (v6(y7) === false) throw new Error("second arg must be public key");
    return t2.fromHex(y7).multiply(g4(p6)).toBytes(x6);
  }
  const V4 = e3.bits2int || function(p6) {
    if (p6.length > 8192) throw new Error("input is too large");
    const y7 = Ce2(p6), x6 = p6.length * 8 - c8;
    return x6 > 0 ? y7 >> BigInt(x6) : y7;
  }, C5 = e3.bits2int_modN || function(p6) {
    return i6.create(V4(p6));
  }, H3 = je2(c8);
  function _3(p6) {
    return Sn2("num < 2^" + c8, p6, he2, H3), i6.toBytes(p6);
  }
  function k7(p6, y7, x6 = P6) {
    if (["recovered", "canonical"].some((q2) => q2 in x6)) throw new Error("sign() legacy options not supported");
    const { hash: B4 } = e3;
    let { lowS: E6, prehash: I5, extraEntropy: S5 } = x6;
    E6 == null && (E6 = true), p6 = rt2("msgHash", p6), Uo2(x6), I5 && (p6 = rt2("prehashed msgHash", B4(p6)));
    const O7 = C5(p6), A4 = g4(y7), T4 = [_3(A4), _3(O7)];
    if (S5 != null && S5 !== false) {
      const q2 = S5 === true ? r4(s4.BYTES) : S5;
      T4.push(rt2("extraEntropy", q2));
    }
    const U4 = Ht2(...T4), $4 = O7;
    function D3(q2) {
      const j5 = V4(q2);
      if (!i6.isValidNot0(j5)) return;
      const K4 = i6.inv(j5), et2 = t2.BASE.multiply(j5).toAffine(), Z2 = i6.create(et2.x);
      if (Z2 === he2) return;
      const z4 = i6.create(K4 * i6.create($4 + Z2 * A4));
      if (z4 === he2) return;
      let Ft4 = (et2.x === Z2 ? 0 : 2) | Number(et2.y & pe2), yt4 = z4;
      return E6 && u5(z4) && (yt4 = a4(z4), Ft4 ^= 1), new h7(Z2, yt4, Ft4);
    }
    return { seed: U4, k2sig: D3 };
  }
  const P6 = { lowS: e3.lowS, prehash: false }, R4 = { lowS: e3.lowS, prehash: false };
  function d6(p6, y7, x6 = P6) {
    const { seed: B4, k2sig: E6 } = k7(p6, y7, x6);
    return Qf(e3.hash.outputLen, i6.BYTES, o6)(B4, E6);
  }
  t2.BASE.precompute(8);
  function w6(p6, y7, x6, B4 = R4) {
    const E6 = p6;
    y7 = rt2("msgHash", y7), x6 = rt2("publicKey", x6), Uo2(B4);
    const { lowS: I5, prehash: S5, format: O7 } = B4;
    if ("strict" in B4) throw new Error("options.strict was renamed to lowS");
    if (O7 !== void 0 && !["compact", "der", "js"].includes(O7)) throw new Error('format must be "compact", "der" or "js"');
    const A4 = typeof E6 == "string" || en2(E6), T4 = !A4 && !O7 && typeof E6 == "object" && E6 !== null && typeof E6.r == "bigint" && typeof E6.s == "bigint";
    if (!A4 && !T4) throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    let U4, $4;
    try {
      if (T4) if (O7 === void 0 || O7 === "js") U4 = new h7(E6.r, E6.s);
      else throw new Error("invalid format");
      if (A4) {
        try {
          O7 !== "compact" && (U4 = h7.fromDER(E6));
        } catch (yt4) {
          if (!(yt4 instanceof vt2.Err)) throw yt4;
        }
        !U4 && O7 !== "der" && (U4 = h7.fromCompact(E6));
      }
      $4 = t2.fromHex(x6);
    } catch {
      return false;
    }
    if (!U4 || I5 && U4.hasHighS()) return false;
    S5 && (y7 = e3.hash(y7));
    const { r: D3, s: q2 } = U4, j5 = C5(y7), K4 = i6.inv(q2), et2 = i6.create(j5 * K4), Z2 = i6.create(D3 * K4), z4 = t2.BASE.multiplyUnsafe(et2).add($4.multiplyUnsafe(Z2));
    return z4.is0() ? false : i6.create(z4.x) === D3;
  }
  return Object.freeze({ getPublicKey: b6, getSharedSecret: L5, sign: d6, verify: w6, utils: m4, Point: t2, Signature: h7 });
}
function _c(t2) {
  const e3 = { a: t2.a, b: t2.b, p: t2.Fp.ORDER, n: t2.n, h: t2.h, Gx: t2.Gx, Gy: t2.Gy }, n6 = t2.Fp, r4 = Yt2(e3.n, t2.nBitLength), o6 = { Fp: n6, Fn: r4, allowedPrivateKeyLengths: t2.allowedPrivateKeyLengths, allowInfinityPoint: t2.allowInfinityPoint, endo: t2.endo, wrapPrivateKey: t2.wrapPrivateKey, isTorsionFree: t2.isTorsionFree, clearCofactor: t2.clearCofactor, fromBytes: t2.fromBytes, toBytes: t2.toBytes };
  return { CURVE: e3, curveOpts: o6 };
}
function Tc(t2) {
  const { CURVE: e3, curveOpts: n6 } = _c(t2), r4 = { hash: t2.hash, hmac: t2.hmac, randomBytes: t2.randomBytes, lowS: t2.lowS, bits2int: t2.bits2int, bits2int_modN: t2.bits2int_modN };
  return { CURVE: e3, curveOpts: n6, ecdsaOpts: r4 };
}
function Rc(t2, e3) {
  return Object.assign({}, e3, { ProjectivePoint: e3.Point, CURVE: t2 });
}
function $c(t2) {
  const { CURVE: e3, curveOpts: n6, ecdsaOpts: r4 } = Tc(t2), o6 = Oc(e3, n6), s4 = Uc(o6, r4, n6);
  return Rc(t2, s4);
}
function Tn2(t2, e3) {
  const n6 = (r4) => $c({ ...t2, hash: r4 });
  return { ...n6(e3), create: n6 };
}
var Ro2 = { p: BigInt("0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff"), n: BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551"), h: BigInt(1), a: BigInt("0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc"), b: BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b"), Gx: BigInt("0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"), Gy: BigInt("0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5") };
var $o2 = { p: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff"), n: BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973"), h: BigInt(1), a: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc"), b: BigInt("0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef"), Gx: BigInt("0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7"), Gy: BigInt("0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f") };
var Co2 = { p: BigInt("0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), n: BigInt("0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409"), h: BigInt(1), a: BigInt("0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc"), b: BigInt("0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00"), Gx: BigInt("0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66"), Gy: BigInt("0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650") };
var Cc = Yt2(Ro2.p);
var Lc = Yt2($o2.p);
var jc = Yt2(Co2.p);
var kc = Tn2({ ...Ro2, Fp: Cc, lowS: false }, Ae2);
Tn2({ ...$o2, Fp: Lc, lowS: false }, Zi), Tn2({ ...Co2, Fp: jc, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] }, Gi);
var Pc = kc;
var Rn2 = "base10";
var tt = "base16";
var Qt2 = "base64pad";
var De2 = "base64url";
var te2 = "utf8";
var $n2 = 0;
var ee = 1;
var ge2 = 2;
var Hc = 0;
var Lo2 = 1;
var be2 = 12;
var Cn2 = 32;
function Dc() {
  const t2 = _n2.utils.randomPrivateKey(), e3 = _n2.getPublicKey(t2);
  return { privateKey: toString3(t2, tt), publicKey: toString3(e3, tt) };
}
function Mc() {
  const t2 = Zt2(Cn2);
  return toString3(t2, tt);
}
function Vc(t2, e3) {
  const n6 = _n2.getSharedSecret(fromString4(t2, tt), fromString4(e3, tt)), r4 = Yf(Te2, n6, void 0, void 0, Cn2);
  return toString3(r4, tt);
}
function qc(t2) {
  const e3 = Te2(fromString4(t2, tt));
  return toString3(e3, tt);
}
function Kc(t2) {
  const e3 = Te2(fromString4(t2, te2));
  return toString3(e3, tt);
}
function Ln2(t2) {
  return fromString4(`${t2}`, Rn2);
}
function Vt2(t2) {
  return Number(toString3(t2, Rn2));
}
function jo2(t2) {
  return t2.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
function ko2(t2) {
  const e3 = t2.replace(/-/g, "+").replace(/_/g, "/"), n6 = (4 - e3.length % 4) % 4;
  return e3 + "=".repeat(n6);
}
function Fc(t2) {
  const e3 = Ln2(typeof t2.type < "u" ? t2.type : $n2);
  if (Vt2(e3) === ee && typeof t2.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
  const n6 = typeof t2.senderPublicKey < "u" ? fromString4(t2.senderPublicKey, tt) : void 0, r4 = typeof t2.iv < "u" ? fromString4(t2.iv, tt) : Zt2(be2), o6 = fromString4(t2.symKey, tt), s4 = fo2(o6, r4).encrypt(fromString4(t2.message, te2)), i6 = jn2({ type: e3, sealed: s4, iv: r4, senderPublicKey: n6 });
  return t2.encoding === De2 ? jo2(i6) : i6;
}
function zc(t2) {
  const e3 = fromString4(t2.symKey, tt), { sealed: n6, iv: r4 } = Me2({ encoded: t2.encoded, encoding: t2.encoding }), o6 = fo2(e3, r4).decrypt(n6);
  if (o6 === null) throw new Error("Failed to decrypt");
  return toString3(o6, te2);
}
function Gc(t2, e3) {
  const n6 = Ln2(ge2), r4 = Zt2(be2), o6 = fromString4(t2, te2), s4 = jn2({ type: n6, sealed: o6, iv: r4 });
  return e3 === De2 ? jo2(s4) : s4;
}
function Zc(t2, e3) {
  const { sealed: n6 } = Me2({ encoded: t2, encoding: e3 });
  return toString3(n6, te2);
}
function jn2(t2) {
  if (Vt2(t2.type) === ge2) return toString3(concat3([t2.type, t2.sealed]), Qt2);
  if (Vt2(t2.type) === ee) {
    if (typeof t2.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
    return toString3(concat3([t2.type, t2.senderPublicKey, t2.iv, t2.sealed]), Qt2);
  }
  return toString3(concat3([t2.type, t2.iv, t2.sealed]), Qt2);
}
function Me2(t2) {
  const e3 = (t2.encoding || Qt2) === De2 ? ko2(t2.encoded) : t2.encoded, n6 = fromString4(e3, Qt2), r4 = n6.slice(Hc, Lo2), o6 = Lo2;
  if (Vt2(r4) === ee) {
    const c8 = o6 + Cn2, u5 = c8 + be2, a4 = n6.slice(o6, c8), l9 = n6.slice(c8, u5), h7 = n6.slice(u5);
    return { type: r4, sealed: h7, iv: l9, senderPublicKey: a4 };
  }
  if (Vt2(r4) === ge2) {
    const c8 = n6.slice(o6), u5 = Zt2(be2);
    return { type: r4, sealed: c8, iv: u5 };
  }
  const s4 = o6 + be2, i6 = n6.slice(o6, s4), f9 = n6.slice(s4);
  return { type: r4, sealed: f9, iv: i6 };
}
function Wc(t2, e3) {
  const n6 = Me2({ encoded: t2, encoding: e3 == null ? void 0 : e3.encoding });
  return Po2({ type: Vt2(n6.type), senderPublicKey: typeof n6.senderPublicKey < "u" ? toString3(n6.senderPublicKey, tt) : void 0, receiverPublicKey: e3 == null ? void 0 : e3.receiverPublicKey });
}
function Po2(t2) {
  const e3 = (t2 == null ? void 0 : t2.type) || $n2;
  if (e3 === ee) {
    if (typeof (t2 == null ? void 0 : t2.senderPublicKey) > "u") throw new Error("missing sender public key");
    if (typeof (t2 == null ? void 0 : t2.receiverPublicKey) > "u") throw new Error("missing receiver public key");
  }
  return { type: e3, senderPublicKey: t2 == null ? void 0 : t2.senderPublicKey, receiverPublicKey: t2 == null ? void 0 : t2.receiverPublicKey };
}
function Yc(t2) {
  return t2.type === ee && typeof t2.senderPublicKey == "string" && typeof t2.receiverPublicKey == "string";
}
function Xc(t2) {
  return t2.type === ge2;
}
function Ho2(t2) {
  const e3 = Buffer.from(t2.x, "base64"), n6 = Buffer.from(t2.y, "base64");
  return concat3([new Uint8Array([4]), e3, n6]);
}
function Jc(t2, e3) {
  const [n6, r4, o6] = t2.split("."), s4 = Buffer.from(ko2(o6), "base64");
  if (s4.length !== 64) throw new Error("Invalid signature length");
  const i6 = s4.slice(0, 32), f9 = s4.slice(32, 64), c8 = `${n6}.${r4}`, u5 = Te2(c8), a4 = Ho2(e3);
  if (!Pc.verify(concat3([i6, f9]), u5, a4)) throw new Error("Invalid signature");
  return sn(t2).payload;
}
var Do2 = "irn";
function Qc(t2) {
  return (t2 == null ? void 0 : t2.relay) || { protocol: Do2 };
}
function ta(t2) {
  const e3 = C2[t2];
  if (typeof e3 > "u") throw new Error(`Relay Protocol not supported: ${t2}`);
  return e3;
}
function Mo2(t2, e3 = "-") {
  const n6 = {}, r4 = "relay" + e3;
  return Object.keys(t2).forEach((o6) => {
    if (o6.startsWith(r4)) {
      const s4 = o6.replace(r4, ""), i6 = t2[o6];
      n6[s4] = i6;
    }
  }), n6;
}
function ea(t2) {
  if (!t2.includes("wc:")) {
    const u5 = Je2(t2);
    u5 != null && u5.includes("wc:") && (t2 = u5);
  }
  t2 = t2.includes("wc://") ? t2.replace("wc://", "") : t2, t2 = t2.includes("wc:") ? t2.replace("wc:", "") : t2;
  const e3 = t2.indexOf(":"), n6 = t2.indexOf("?") !== -1 ? t2.indexOf("?") : void 0, r4 = t2.substring(0, e3), o6 = t2.substring(e3 + 1, n6).split("@"), s4 = typeof n6 < "u" ? t2.substring(n6) : "", i6 = new URLSearchParams(s4), f9 = {};
  i6.forEach((u5, a4) => {
    f9[a4] = u5;
  });
  const c8 = typeof f9.methods == "string" ? f9.methods.split(",") : void 0;
  return { protocol: r4, topic: Vo2(o6[0]), version: parseInt(o6[1], 10), symKey: f9.symKey, relay: Mo2(f9), methods: c8, expiryTimestamp: f9.expiryTimestamp ? parseInt(f9.expiryTimestamp, 10) : void 0 };
}
function Vo2(t2) {
  return t2.startsWith("//") ? t2.substring(2) : t2;
}
function qo2(t2, e3 = "-") {
  const n6 = "relay", r4 = {};
  return Object.keys(t2).forEach((o6) => {
    const s4 = o6, i6 = n6 + e3 + s4;
    t2[s4] && (r4[i6] = t2[s4]);
  }), r4;
}
function na(t2) {
  const e3 = new URLSearchParams(), n6 = qo2(t2.relay);
  Object.keys(n6).sort().forEach((o6) => {
    e3.set(o6, n6[o6]);
  }), e3.set("symKey", t2.symKey), t2.expiryTimestamp && e3.set("expiryTimestamp", t2.expiryTimestamp.toString()), t2.methods && e3.set("methods", t2.methods.join(","));
  const r4 = e3.toString();
  return `${t2.protocol}:${t2.topic}@${t2.version}?${r4}`;
}
function ra(t2, e3, n6) {
  return `${t2}?wc_ev=${n6}&topic=${e3}`;
}
var oa = Object.defineProperty;
var sa = Object.defineProperties;
var ia = Object.getOwnPropertyDescriptors;
var Ko2 = Object.getOwnPropertySymbols;
var fa = Object.prototype.hasOwnProperty;
var ca = Object.prototype.propertyIsEnumerable;
var Fo2 = (t2, e3, n6) => e3 in t2 ? oa(t2, e3, { enumerable: true, configurable: true, writable: true, value: n6 }) : t2[e3] = n6;
var aa = (t2, e3) => {
  for (var n6 in e3 || (e3 = {})) fa.call(e3, n6) && Fo2(t2, n6, e3[n6]);
  if (Ko2) for (var n6 of Ko2(e3)) ca.call(e3, n6) && Fo2(t2, n6, e3[n6]);
  return t2;
};
var ua = (t2, e3) => sa(t2, ia(e3));
function qt2(t2) {
  const e3 = [];
  return t2.forEach((n6) => {
    const [r4, o6] = n6.split(":");
    e3.push(`${r4}:${o6}`);
  }), e3;
}
function zo2(t2) {
  const e3 = [];
  return Object.values(t2).forEach((n6) => {
    e3.push(...qt2(n6.accounts));
  }), e3;
}
function Go2(t2, e3) {
  const n6 = [];
  return Object.values(t2).forEach((r4) => {
    qt2(r4.accounts).includes(e3) && n6.push(...r4.methods);
  }), n6;
}
function Zo2(t2, e3) {
  const n6 = [];
  return Object.values(t2).forEach((r4) => {
    qt2(r4.accounts).includes(e3) && n6.push(...r4.events);
  }), n6;
}
function kn2(t2) {
  return t2.includes(":");
}
function Wo2(t2) {
  return kn2(t2) ? t2.split(":")[0] : t2;
}
function ye2(t2) {
  var e3, n6, r4;
  const o6 = {};
  if (!Ve2(t2)) return o6;
  for (const [s4, i6] of Object.entries(t2)) {
    const f9 = kn2(s4) ? [s4] : i6.chains, c8 = i6.methods || [], u5 = i6.events || [], a4 = Wo2(s4);
    o6[a4] = ua(aa({}, o6[a4]), { chains: ct2(f9, (e3 = o6[a4]) == null ? void 0 : e3.chains), methods: ct2(c8, (n6 = o6[a4]) == null ? void 0 : n6.methods), events: ct2(u5, (r4 = o6[a4]) == null ? void 0 : r4.events) });
  }
  return o6;
}
function Yo2(t2) {
  const e3 = {};
  return t2 == null ? void 0 : t2.forEach((n6) => {
    var r4;
    const [o6, s4] = n6.split(":");
    e3[o6] || (e3[o6] = { accounts: [], chains: [], events: [], methods: [] }), e3[o6].accounts.push(n6), (r4 = e3[o6].chains) == null || r4.push(`${o6}:${s4}`);
  }), e3;
}
function ha(t2, e3) {
  e3 = e3.map((r4) => r4.replace("did:pkh:", ""));
  const n6 = Yo2(e3);
  for (const [r4, o6] of Object.entries(n6)) o6.methods ? o6.methods = ct2(o6.methods, t2) : o6.methods = t2, o6.events = ["chainChanged", "accountsChanged"];
  return n6;
}
function pa(t2, e3) {
  var n6, r4, o6, s4, i6, f9;
  const c8 = ye2(t2), u5 = ye2(e3), a4 = {}, l9 = Object.keys(c8).concat(Object.keys(u5));
  for (const h7 of l9) a4[h7] = { chains: ct2((n6 = c8[h7]) == null ? void 0 : n6.chains, (r4 = u5[h7]) == null ? void 0 : r4.chains), methods: ct2((o6 = c8[h7]) == null ? void 0 : o6.methods, (s4 = u5[h7]) == null ? void 0 : s4.methods), events: ct2((i6 = c8[h7]) == null ? void 0 : i6.events, (f9 = u5[h7]) == null ? void 0 : f9.events) };
  return a4;
}
var Xo = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var Jo2 = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function Et2(t2, e3) {
  const { message: n6, code: r4 } = Jo2[t2];
  return { message: e3 ? `${n6} ${e3}` : n6, code: r4 };
}
function Kt2(t2, e3) {
  const { message: n6, code: r4 } = Xo[t2];
  return { message: e3 ? `${n6} ${e3}` : n6, code: r4 };
}
function me2(t2, e3) {
  return Array.isArray(t2) ? typeof e3 < "u" && t2.length ? t2.every(e3) : true : false;
}
function Ve2(t2) {
  return Object.getPrototypeOf(t2) === Object.prototype && Object.keys(t2).length;
}
function kt2(t2) {
  return typeof t2 > "u";
}
function it2(t2, e3) {
  return e3 && kt2(t2) ? true : typeof t2 == "string" && !!t2.trim().length;
}
function qe2(t2, e3) {
  return e3 && kt2(t2) ? true : typeof t2 == "number" && !isNaN(t2);
}
function ga(t2, e3) {
  const { requiredNamespaces: n6 } = e3, r4 = Object.keys(t2.namespaces), o6 = Object.keys(n6);
  let s4 = true;
  return It2(o6, r4) ? (r4.forEach((i6) => {
    const { accounts: f9, methods: c8, events: u5 } = t2.namespaces[i6], a4 = qt2(f9), l9 = n6[i6];
    (!It2(ve2(i6, l9), a4) || !It2(l9.methods, c8) || !It2(l9.events, u5)) && (s4 = false);
  }), s4) : false;
}
function we2(t2) {
  return it2(t2, false) && t2.includes(":") ? t2.split(":").length === 2 : false;
}
function Qo2(t2) {
  if (it2(t2, false) && t2.includes(":")) {
    const e3 = t2.split(":");
    if (e3.length === 3) {
      const n6 = e3[0] + ":" + e3[1];
      return !!e3[2] && we2(n6);
    }
  }
  return false;
}
function ba(t2) {
  function e3(n6) {
    try {
      return typeof new URL(n6) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (it2(t2, false)) {
      if (e3(t2)) return true;
      const n6 = Je2(t2);
      return e3(n6);
    }
  } catch {
  }
  return false;
}
function ya(t2) {
  var e3;
  return (e3 = t2 == null ? void 0 : t2.proposer) == null ? void 0 : e3.publicKey;
}
function ma(t2) {
  return t2 == null ? void 0 : t2.topic;
}
function wa(t2, e3) {
  let n6 = null;
  return it2(t2 == null ? void 0 : t2.publicKey, false) || (n6 = Et2("MISSING_OR_INVALID", `${e3} controller public key should be a string`)), n6;
}
function Pn2(t2) {
  let e3 = true;
  return me2(t2) ? t2.length && (e3 = t2.every((n6) => it2(n6, false))) : e3 = false, e3;
}
function ts(t2, e3, n6) {
  let r4 = null;
  return me2(e3) && e3.length ? e3.forEach((o6) => {
    r4 || we2(o6) || (r4 = Kt2("UNSUPPORTED_CHAINS", `${n6}, chain ${o6} should be a string and conform to "namespace:chainId" format`));
  }) : we2(t2) || (r4 = Kt2("UNSUPPORTED_CHAINS", `${n6}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r4;
}
function es(t2, e3, n6) {
  let r4 = null;
  return Object.entries(t2).forEach(([o6, s4]) => {
    if (r4) return;
    const i6 = ts(o6, ve2(o6, s4), `${e3} ${n6}`);
    i6 && (r4 = i6);
  }), r4;
}
function ns(t2, e3) {
  let n6 = null;
  return me2(t2) ? t2.forEach((r4) => {
    n6 || Qo2(r4) || (n6 = Kt2("UNSUPPORTED_ACCOUNTS", `${e3}, account ${r4} should be a string and conform to "namespace:chainId:address" format`));
  }) : n6 = Kt2("UNSUPPORTED_ACCOUNTS", `${e3}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), n6;
}
function rs(t2, e3) {
  let n6 = null;
  return Object.values(t2).forEach((r4) => {
    if (n6) return;
    const o6 = ns(r4 == null ? void 0 : r4.accounts, `${e3} namespace`);
    o6 && (n6 = o6);
  }), n6;
}
function os(t2, e3) {
  let n6 = null;
  return Pn2(t2 == null ? void 0 : t2.methods) ? Pn2(t2 == null ? void 0 : t2.events) || (n6 = Kt2("UNSUPPORTED_EVENTS", `${e3}, events should be an array of strings or empty array for no events`)) : n6 = Kt2("UNSUPPORTED_METHODS", `${e3}, methods should be an array of strings or empty array for no methods`), n6;
}
function Hn2(t2, e3) {
  let n6 = null;
  return Object.values(t2).forEach((r4) => {
    if (n6) return;
    const o6 = os(r4, `${e3}, namespace`);
    o6 && (n6 = o6);
  }), n6;
}
function xa(t2, e3, n6) {
  let r4 = null;
  if (t2 && Ve2(t2)) {
    const o6 = Hn2(t2, e3);
    o6 && (r4 = o6);
    const s4 = es(t2, e3, n6);
    s4 && (r4 = s4);
  } else r4 = Et2("MISSING_OR_INVALID", `${e3}, ${n6} should be an object with data`);
  return r4;
}
function ss(t2, e3) {
  let n6 = null;
  if (t2 && Ve2(t2)) {
    const r4 = Hn2(t2, e3);
    r4 && (n6 = r4);
    const o6 = rs(t2, e3);
    o6 && (n6 = o6);
  } else n6 = Et2("MISSING_OR_INVALID", `${e3}, namespaces should be an object with data`);
  return n6;
}
function is(t2) {
  return it2(t2.protocol, true);
}
function va(t2, e3) {
  let n6 = false;
  return e3 && !t2 ? n6 = true : t2 && me2(t2) && t2.length && t2.forEach((r4) => {
    n6 = is(r4);
  }), n6;
}
function Ea(t2) {
  return typeof t2 == "number";
}
function Ba(t2) {
  return typeof t2 < "u" && typeof t2 !== null;
}
function Ia(t2) {
  return !(!t2 || typeof t2 != "object" || !t2.code || !qe2(t2.code, false) || !t2.message || !it2(t2.message, false));
}
function Aa(t2) {
  return !(kt2(t2) || !it2(t2.method, false));
}
function Sa(t2) {
  return !(kt2(t2) || kt2(t2.result) && kt2(t2.error) || !qe2(t2.id, false) || !it2(t2.jsonrpc, false));
}
function Na(t2) {
  return !(kt2(t2) || !it2(t2.name, false));
}
function Oa(t2, e3) {
  return !(!we2(e3) || !zo2(t2).includes(e3));
}
function Ua(t2, e3, n6) {
  return it2(n6, false) ? Go2(t2, e3).includes(n6) : false;
}
function _a(t2, e3, n6) {
  return it2(n6, false) ? Zo2(t2, e3).includes(n6) : false;
}
function fs(t2, e3, n6) {
  let r4 = null;
  const o6 = Ta(t2), s4 = Ra(e3), i6 = Object.keys(o6), f9 = Object.keys(s4), c8 = cs(Object.keys(t2)), u5 = cs(Object.keys(e3)), a4 = c8.filter((l9) => !u5.includes(l9));
  return a4.length && (r4 = Et2("NON_CONFORMING_NAMESPACES", `${n6} namespaces keys don't satisfy requiredNamespaces.
      Required: ${a4.toString()}
      Received: ${Object.keys(e3).toString()}`)), It2(i6, f9) || (r4 = Et2("NON_CONFORMING_NAMESPACES", `${n6} namespaces chains don't satisfy required namespaces.
      Required: ${i6.toString()}
      Approved: ${f9.toString()}`)), Object.keys(e3).forEach((l9) => {
    if (!l9.includes(":") || r4) return;
    const h7 = qt2(e3[l9].accounts);
    h7.includes(l9) || (r4 = Et2("NON_CONFORMING_NAMESPACES", `${n6} namespaces accounts don't satisfy namespace accounts for ${l9}
        Required: ${l9}
        Approved: ${h7.toString()}`));
  }), i6.forEach((l9) => {
    r4 || (It2(o6[l9].methods, s4[l9].methods) ? It2(o6[l9].events, s4[l9].events) || (r4 = Et2("NON_CONFORMING_NAMESPACES", `${n6} namespaces events don't satisfy namespace events for ${l9}`)) : r4 = Et2("NON_CONFORMING_NAMESPACES", `${n6} namespaces methods don't satisfy namespace methods for ${l9}`));
  }), r4;
}
function Ta(t2) {
  const e3 = {};
  return Object.keys(t2).forEach((n6) => {
    var r4;
    n6.includes(":") ? e3[n6] = t2[n6] : (r4 = t2[n6].chains) == null || r4.forEach((o6) => {
      e3[o6] = { methods: t2[n6].methods, events: t2[n6].events };
    });
  }), e3;
}
function cs(t2) {
  return [...new Set(t2.map((e3) => e3.includes(":") ? e3.split(":")[0] : e3))];
}
function Ra(t2) {
  const e3 = {};
  return Object.keys(t2).forEach((n6) => {
    if (n6.includes(":")) e3[n6] = t2[n6];
    else {
      const r4 = qt2(t2[n6].accounts);
      r4 == null ? void 0 : r4.forEach((o6) => {
        e3[o6] = { accounts: t2[n6].accounts.filter((s4) => s4.includes(`${o6}:`)), methods: t2[n6].methods, events: t2[n6].events };
      });
    }
  }), e3;
}
function $a(t2, e3) {
  return qe2(t2, false) && t2 <= e3.max && t2 >= e3.min;
}
function Ca() {
  const t2 = Pt2();
  return new Promise((e3) => {
    switch (t2) {
      case J3.browser:
        e3(as());
        break;
      case J3.reactNative:
        e3(us());
        break;
      case J3.node:
        e3(ls());
        break;
      default:
        e3(true);
    }
  });
}
function as() {
  return zt2() && (navigator == null ? void 0 : navigator.onLine);
}
async function us() {
  if (Bt2() && typeof global < "u" && global != null && global.NetInfo) {
    const t2 = await (global == null ? void 0 : global.NetInfo.fetch());
    return t2 == null ? void 0 : t2.isConnected;
  }
  return true;
}
function ls() {
  return true;
}
function La(t2) {
  switch (Pt2()) {
    case J3.browser:
      ds(t2);
      break;
    case J3.reactNative:
      hs(t2);
      break;
    case J3.node:
      break;
  }
}
function ds(t2) {
  !Bt2() && zt2() && (window.addEventListener("online", () => t2(true)), window.addEventListener("offline", () => t2(false)));
}
function hs(t2) {
  Bt2() && typeof global < "u" && global != null && global.NetInfo && (global == null ? void 0 : global.NetInfo.addEventListener((e3) => t2(e3 == null ? void 0 : e3.isConnected)));
}
function ja() {
  var t2;
  return zt2() && (0, import_window_getters.getDocument)() ? ((t2 = (0, import_window_getters.getDocument)()) == null ? void 0 : t2.visibilityState) === "visible" : true;
}
var Dn = {};
var ka = class {
  static get(e3) {
    return Dn[e3];
  }
  static set(e3, n6) {
    Dn[e3] = n6;
  }
  static delete(e3) {
    delete Dn[e3];
  }
};
function ps(t2) {
  const e3 = esm_default2.decode(t2);
  if (e3.length < 33) throw new Error("Too short to contain a public key");
  return e3.slice(1, 33);
}
function gs({ publicKey: t2, signature: e3, payload: n6 }) {
  var r4;
  const o6 = Mn2(n6.method), s4 = 128 | parseInt(((r4 = n6.version) == null ? void 0 : r4.toString()) || "4"), i6 = Ha(n6.address), f9 = n6.era === "00" ? new Uint8Array([0]) : Mn2(n6.era);
  if (f9.length !== 1 && f9.length !== 2) throw new Error("Invalid era length");
  const c8 = parseInt(n6.nonce, 16), u5 = new Uint8Array([c8 & 255, c8 >> 8 & 255]), a4 = BigInt(`0x${Pa(n6.tip)}`), l9 = Ma(a4), h7 = new Uint8Array([0, ...t2, i6, ...e3, ...f9, ...u5, ...l9, ...o6]), g4 = Da(h7.length + 1);
  return new Uint8Array([...g4, s4, ...h7]);
}
function bs(t2) {
  const e3 = Mn2(t2), n6 = (0, import_blakejs.blake2b)(e3, void 0, 32);
  return "0x" + Buffer.from(n6).toString("hex");
}
function Mn2(t2) {
  return new Uint8Array(t2.replace(/^0x/, "").match(/.{1,2}/g).map((e3) => parseInt(e3, 16)));
}
function Pa(t2) {
  return t2.startsWith("0x") ? t2.slice(2) : t2;
}
function Ha(t2) {
  const e3 = esm_default2.decode(t2)[0];
  return e3 === 42 ? 0 : e3 === 60 ? 2 : 1;
}
function Da(t2) {
  if (t2 < 64) return new Uint8Array([t2 << 2]);
  if (t2 < 16384) {
    const e3 = t2 << 2 | 1;
    return new Uint8Array([e3 & 255, e3 >> 8 & 255]);
  } else if (t2 < 1 << 30) {
    const e3 = t2 << 2 | 2;
    return new Uint8Array([e3 & 255, e3 >> 8 & 255, e3 >> 16 & 255, e3 >> 24 & 255]);
  } else throw new Error("Compact encoding > 2^30 not supported");
}
function Ma(t2) {
  if (t2 < BigInt(1) << BigInt(6)) return new Uint8Array([Number(t2 << BigInt(2))]);
  if (t2 < BigInt(1) << BigInt(14)) {
    const e3 = t2 << BigInt(2) | BigInt(1);
    return new Uint8Array([Number(e3 & BigInt(255)), Number(e3 >> BigInt(8) & BigInt(255))]);
  } else if (t2 < BigInt(1) << BigInt(30)) {
    const e3 = t2 << BigInt(2) | BigInt(2);
    return new Uint8Array([Number(e3 & BigInt(255)), Number(e3 >> BigInt(8) & BigInt(255)), Number(e3 >> BigInt(16) & BigInt(255)), Number(e3 >> BigInt(24) & BigInt(255))]);
  } else throw new Error("BigInt compact encoding not supported > 2^30");
}
function Va(t2) {
  const e3 = Uint8Array.from(Buffer.from(t2.signature, "hex")), n6 = ps(t2.transaction.address), r4 = gs({ publicKey: n6, signature: e3, payload: t2.transaction }), o6 = Buffer.from(r4).toString("hex");
  return bs(o6);
}

// node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var import_events5 = __toESM(require_events());

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  DEFAULT_ERROR: () => DEFAULT_ERROR,
  IBaseJsonRpcProvider: () => n5,
  IEvents: () => e2,
  IJsonRpcConnection: () => o3,
  IJsonRpcProvider: () => r3,
  INTERNAL_ERROR: () => INTERNAL_ERROR,
  INVALID_PARAMS: () => INVALID_PARAMS,
  INVALID_REQUEST: () => INVALID_REQUEST,
  METHOD_NOT_FOUND: () => METHOD_NOT_FOUND,
  PARSE_ERROR: () => PARSE_ERROR,
  RESERVED_ERROR_CODES: () => RESERVED_ERROR_CODES,
  SERVER_ERROR: () => SERVER_ERROR,
  SERVER_ERROR_CODE_RANGE: () => SERVER_ERROR_CODE_RANGE,
  STANDARD_ERROR_MAP: () => STANDARD_ERROR_MAP,
  formatErrorMessage: () => formatErrorMessage,
  formatJsonRpcError: () => formatJsonRpcError,
  formatJsonRpcRequest: () => formatJsonRpcRequest,
  formatJsonRpcResult: () => formatJsonRpcResult,
  getBigIntRpcId: () => getBigIntRpcId,
  getError: () => getError,
  getErrorByCode: () => getErrorByCode,
  isHttpUrl: () => isHttpUrl,
  isJsonRpcError: () => isJsonRpcError,
  isJsonRpcPayload: () => isJsonRpcPayload,
  isJsonRpcRequest: () => isJsonRpcRequest,
  isJsonRpcResponse: () => isJsonRpcResponse,
  isJsonRpcResult: () => isJsonRpcResult,
  isJsonRpcValidationInvalid: () => isJsonRpcValidationInvalid,
  isLocalhostUrl: () => isLocalhostUrl,
  isNodeJs: () => isNodeJs,
  isReservedErrorCode: () => isReservedErrorCode,
  isServerErrorCode: () => isServerErrorCode,
  isValidDefaultRoute: () => isValidDefaultRoute,
  isValidErrorCode: () => isValidErrorCode,
  isValidLeadingWildcardRoute: () => isValidLeadingWildcardRoute,
  isValidRoute: () => isValidRoute,
  isValidTrailingWildcardRoute: () => isValidTrailingWildcardRoute,
  isValidWildcardRoute: () => isValidWildcardRoute,
  isWsUrl: () => isWsUrl,
  parseConnectionError: () => parseConnectionError,
  payloadId: () => payloadId,
  validateJsonRpcError: () => validateJsonRpcError
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js
var PARSE_ERROR = "PARSE_ERROR";
var INVALID_REQUEST = "INVALID_REQUEST";
var METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
var INVALID_PARAMS = "INVALID_PARAMS";
var INTERNAL_ERROR = "INTERNAL_ERROR";
var SERVER_ERROR = "SERVER_ERROR";
var RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
var SERVER_ERROR_CODE_RANGE = [-32e3, -32099];
var STANDARD_ERROR_MAP = {
  [PARSE_ERROR]: { code: -32700, message: "Parse error" },
  [INVALID_REQUEST]: { code: -32600, message: "Invalid Request" },
  [METHOD_NOT_FOUND]: { code: -32601, message: "Method not found" },
  [INVALID_PARAMS]: { code: -32602, message: "Invalid params" },
  [INTERNAL_ERROR]: { code: -32603, message: "Internal error" },
  [SERVER_ERROR]: { code: -32e3, message: "Server error" }
};
var DEFAULT_ERROR = SERVER_ERROR;

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js
function isServerErrorCode(code2) {
  return code2 <= SERVER_ERROR_CODE_RANGE[0] && code2 >= SERVER_ERROR_CODE_RANGE[1];
}
function isReservedErrorCode(code2) {
  return RESERVED_ERROR_CODES.includes(code2);
}
function isValidErrorCode(code2) {
  return typeof code2 === "number";
}
function getError(type) {
  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return STANDARD_ERROR_MAP[type];
}
function getErrorByCode(code2) {
  const match = Object.values(STANDARD_ERROR_MAP).find((e3) => e3.code === code2);
  if (!match) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return match;
}
function validateJsonRpcError(response) {
  if (typeof response.error.code === "undefined") {
    return { valid: false, error: "Missing code for JSON-RPC error" };
  }
  if (typeof response.error.message === "undefined") {
    return { valid: false, error: "Missing message for JSON-RPC error" };
  }
  if (!isValidErrorCode(response.error.code)) {
    return {
      valid: false,
      error: `Invalid error code type for JSON-RPC: ${response.error.code}`
    };
  }
  if (isReservedErrorCode(response.error.code)) {
    const error = getErrorByCode(response.error.code);
    if (error.message !== STANDARD_ERROR_MAP[DEFAULT_ERROR].message && response.error.message === error.message) {
      return {
        valid: false,
        error: `Invalid error code message for JSON-RPC: ${response.error.code}`
      };
    }
  }
  return { valid: true };
}
function parseConnectionError(e3, url, type) {
  return e3.message.includes("getaddrinfo ENOTFOUND") || e3.message.includes("connect ECONNREFUSED") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e3;
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js
var env_exports = {};
__export(env_exports, {
  isNodeJs: () => isNodeJs
});
var import_environment = __toESM(require_cjs4());
__reExport(env_exports, __toESM(require_cjs4()));
var isNodeJs = import_environment.isNode;

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
__reExport(esm_exports, env_exports);

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js
function payloadId(entropy = 3) {
  const date = Date.now() * Math.pow(10, entropy);
  const extra = Math.floor(Math.random() * Math.pow(10, entropy));
  return date + extra;
}
function getBigIntRpcId(entropy = 6) {
  return BigInt(payloadId(entropy));
}
function formatJsonRpcRequest(method, params, id) {
  return {
    id: id || payloadId(),
    jsonrpc: "2.0",
    method,
    params
  };
}
function formatJsonRpcResult(id, result) {
  return {
    id,
    jsonrpc: "2.0",
    result
  };
}
function formatJsonRpcError(id, error, data) {
  return {
    id,
    jsonrpc: "2.0",
    error: formatErrorMessage(error, data)
  };
}
function formatErrorMessage(error, data) {
  if (typeof error === "undefined") {
    return getError(INTERNAL_ERROR);
  }
  if (typeof error === "string") {
    error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), { message: error });
  }
  if (typeof data !== "undefined") {
    error.data = data;
  }
  if (isReservedErrorCode(error.code)) {
    error = getErrorByCode(error.code);
  }
  return error;
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js
function isValidRoute(route) {
  if (route.includes("*")) {
    return isValidWildcardRoute(route);
  }
  if (/\W/g.test(route)) {
    return false;
  }
  return true;
}
function isValidDefaultRoute(route) {
  return route === "*";
}
function isValidWildcardRoute(route) {
  if (isValidDefaultRoute(route)) {
    return true;
  }
  if (!route.includes("*")) {
    return false;
  }
  if (route.split("*").length !== 2) {
    return false;
  }
  if (route.split("*").filter((x6) => x6.trim() === "").length !== 1) {
    return false;
  }
  return true;
}
function isValidLeadingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[0].trim();
}
function isValidTrailingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[1].trim();
}

// node_modules/@walletconnect/jsonrpc-types/dist/index.es.js
var e2 = class {
};
var o3 = class extends e2 {
  constructor(c8) {
    super();
  }
};
var n5 = class extends e2 {
  constructor() {
    super();
  }
};
var r3 = class extends n5 {
  constructor(c8) {
    super();
  }
};

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js
var HTTP_REGEX = "^https?:";
var WS_REGEX = "^wss?:";
function getUrlProtocol(url) {
  const matches = url.match(new RegExp(/^\w+:/, "gi"));
  if (!matches || !matches.length)
    return;
  return matches[0];
}
function matchRegexProtocol(url, regex) {
  const protocol = getUrlProtocol(url);
  if (typeof protocol === "undefined")
    return false;
  return new RegExp(regex).test(protocol);
}
function isHttpUrl(url) {
  return matchRegexProtocol(url, HTTP_REGEX);
}
function isWsUrl(url) {
  return matchRegexProtocol(url, WS_REGEX);
}
function isLocalhostUrl(url) {
  return new RegExp("wss?://localhost(:d{2,5})?").test(url);
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js
function isJsonRpcPayload(payload) {
  return typeof payload === "object" && "id" in payload && "jsonrpc" in payload && payload.jsonrpc === "2.0";
}
function isJsonRpcRequest(payload) {
  return isJsonRpcPayload(payload) && "method" in payload;
}
function isJsonRpcResponse(payload) {
  return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
}
function isJsonRpcResult(payload) {
  return "result" in payload;
}
function isJsonRpcError(payload) {
  return "error" in payload;
}
function isJsonRpcValidationInvalid(validation) {
  return "error" in validation && validation.valid === false;
}

// node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var o4 = class extends r3 {
  constructor(t2) {
    super(t2), this.events = new import_events5.EventEmitter(), this.hasRegisteredEventListeners = false, this.connection = this.setConnection(t2), this.connection.connected && this.registerEventListeners();
  }
  async connect(t2 = this.connection) {
    await this.open(t2);
  }
  async disconnect() {
    await this.close();
  }
  on(t2, e3) {
    this.events.on(t2, e3);
  }
  once(t2, e3) {
    this.events.once(t2, e3);
  }
  off(t2, e3) {
    this.events.off(t2, e3);
  }
  removeListener(t2, e3) {
    this.events.removeListener(t2, e3);
  }
  async request(t2, e3) {
    return this.requestStrict(formatJsonRpcRequest(t2.method, t2.params || [], t2.id || getBigIntRpcId().toString()), e3);
  }
  async requestStrict(t2, e3) {
    return new Promise(async (i6, s4) => {
      if (!this.connection.connected) try {
        await this.open();
      } catch (n6) {
        s4(n6);
      }
      this.events.on(`${t2.id}`, (n6) => {
        isJsonRpcError(n6) ? s4(n6.error) : i6(n6.result);
      });
      try {
        await this.connection.send(t2, e3);
      } catch (n6) {
        s4(n6);
      }
    });
  }
  setConnection(t2 = this.connection) {
    return t2;
  }
  onPayload(t2) {
    this.events.emit("payload", t2), isJsonRpcResponse(t2) ? this.events.emit(`${t2.id}`, t2) : this.events.emit("message", { type: t2.method, data: t2.params });
  }
  onClose(t2) {
    t2 && t2.code === 3e3 && this.events.emit("error", new Error(`WebSocket connection closed abnormally with code: ${t2.code} ${t2.reason ? `(${t2.reason})` : ""}`)), this.events.emit("disconnect");
  }
  async open(t2 = this.connection) {
    this.connection === t2 && this.connection.connected || (this.connection.connected && this.close(), typeof t2 == "string" && (await this.connection.open(t2), t2 = this.connection), this.connection = this.setConnection(t2), await this.connection.open(), this.registerEventListeners(), this.events.emit("connect"));
  }
  async close() {
    await this.connection.close();
  }
  registerEventListeners() {
    this.hasRegisteredEventListeners || (this.connection.on("payload", (t2) => this.onPayload(t2)), this.connection.on("close", (t2) => this.onClose(t2)), this.connection.on("error", (t2) => this.events.emit("error", t2)), this.connection.on("register_error", (t2) => this.onClose()), this.hasRegisteredEventListeners = true);
  }
};

// node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js
var import_events6 = __toESM(require_events());
var v3 = () => typeof WebSocket < "u" ? WebSocket : typeof global < "u" && typeof global.WebSocket < "u" ? global.WebSocket : typeof window < "u" && typeof window.WebSocket < "u" ? window.WebSocket : typeof self < "u" && typeof self.WebSocket < "u" ? self.WebSocket : require_browser2();
var w3 = () => typeof WebSocket < "u" || typeof global < "u" && typeof global.WebSocket < "u" || typeof window < "u" && typeof window.WebSocket < "u" || typeof self < "u" && typeof self.WebSocket < "u";
var d3 = (r4) => r4.split("?")[0];
var h5 = 10;
var b3 = v3();
var f5 = class {
  constructor(e3) {
    if (this.url = e3, this.events = new import_events6.EventEmitter(), this.registering = false, !isWsUrl(e3)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e3}`);
    this.url = e3;
  }
  get connected() {
    return typeof this.socket < "u";
  }
  get connecting() {
    return this.registering;
  }
  on(e3, t2) {
    this.events.on(e3, t2);
  }
  once(e3, t2) {
    this.events.once(e3, t2);
  }
  off(e3, t2) {
    this.events.off(e3, t2);
  }
  removeListener(e3, t2) {
    this.events.removeListener(e3, t2);
  }
  async open(e3 = this.url) {
    await this.register(e3);
  }
  async close() {
    return new Promise((e3, t2) => {
      if (typeof this.socket > "u") {
        t2(new Error("Connection already closed"));
        return;
      }
      this.socket.onclose = (n6) => {
        this.onClose(n6), e3();
      }, this.socket.close();
    });
  }
  async send(e3) {
    typeof this.socket > "u" && (this.socket = await this.register());
    try {
      this.socket.send(safeJsonStringify(e3));
    } catch (t2) {
      this.onError(e3.id, t2);
    }
  }
  register(e3 = this.url) {
    if (!isWsUrl(e3)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e3}`);
    if (this.registering) {
      const t2 = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= t2 || this.events.listenerCount("open") >= t2) && this.events.setMaxListeners(t2 + 1), new Promise((n6, s4) => {
        this.events.once("register_error", (o6) => {
          this.resetMaxListeners(), s4(o6);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.socket > "u") return s4(new Error("WebSocket connection is missing or invalid"));
          n6(this.socket);
        });
      });
    }
    return this.url = e3, this.registering = true, new Promise((t2, n6) => {
      const s4 = (0, esm_exports.isReactNative)() ? void 0 : { rejectUnauthorized: !isLocalhostUrl(e3) }, o6 = new b3(e3, [], s4);
      w3() ? o6.onerror = (i6) => {
        const a4 = i6;
        n6(this.emitError(a4.error));
      } : o6.on("error", (i6) => {
        n6(this.emitError(i6));
      }), o6.onopen = () => {
        this.onOpen(o6), t2(o6);
      };
    });
  }
  onOpen(e3) {
    e3.onmessage = (t2) => this.onPayload(t2), e3.onclose = (t2) => this.onClose(t2), this.socket = e3, this.registering = false, this.events.emit("open");
  }
  onClose(e3) {
    this.socket = void 0, this.registering = false, this.events.emit("close", e3);
  }
  onPayload(e3) {
    if (typeof e3.data > "u") return;
    const t2 = typeof e3.data == "string" ? safeJsonParse(e3.data) : e3.data;
    this.events.emit("payload", t2);
  }
  onError(e3, t2) {
    const n6 = this.parseError(t2), s4 = n6.message || n6.toString(), o6 = formatJsonRpcError(e3, s4);
    this.events.emit("payload", o6);
  }
  parseError(e3, t2 = this.url) {
    return parseConnectionError(e3, d3(t2), "WS");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > h5 && this.events.setMaxListeners(h5);
  }
  emitError(e3) {
    const t2 = this.parseError(new Error((e3 == null ? void 0 : e3.message) || `WebSocket connection failed for host: ${d3(this.url)}`));
    return this.events.emit("register_error", t2), t2;
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_window_getters2 = __toESM(require_cjs2());
var ze2 = "wc";
var Le3 = 2;
var he3 = "core";
var B2 = `${ze2}@2:${he3}:`;
var Et3 = { name: he3, logger: "error" };
var It3 = { database: ":memory:" };
var Tt3 = "crypto";
var ke3 = "client_ed25519_seed";
var Ct2 = import_time4.ONE_DAY;
var Pt3 = "keychain";
var St3 = "0.3";
var Ot3 = "messages";
var Rt3 = "0.3";
var je3 = import_time4.SIX_HOURS;
var At2 = "publisher";
var xt3 = "irn";
var Nt3 = "error";
var Ue3 = "wss://relay.walletconnect.org";
var $t3 = "relayer";
var C3 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
var zt3 = "_subscription";
var L2 = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
var Lt3 = 0.1;
var _e3 = "2.21.3";
var Q3 = { link_mode: "link_mode", relay: "relay" };
var le3 = { inbound: "inbound", outbound: "outbound" };
var kt3 = "0.3";
var jt3 = "WALLETCONNECT_CLIENT_ID";
var Fe2 = "WALLETCONNECT_LINK_MODE_APPS";
var $ = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
var Ut3 = "subscription";
var Ft2 = "0.3";
var Js = import_time4.FIVE_SECONDS * 1e3;
var Mt3 = "pairing";
var Kt3 = "0.3";
var se2 = { wc_pairingDelete: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 } } };
var re = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
var F2 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var Bt3 = "history";
var Vt3 = "0.3";
var qt3 = "expirer";
var M4 = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
var Gt3 = "0.3";
var Wt3 = "verify-api";
var Qs = "https://verify.walletconnect.com";
var Ht3 = "https://verify.walletconnect.org";
var ue2 = Ht3;
var Yt3 = `${ue2}/v3`;
var Jt3 = [Qs, Ht3];
var Xt3 = "echo";
var Zt3 = "https://echo.walletconnect.com";
var G3 = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
var Y2 = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
var tr3 = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success" };
var ir3 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found" };
var sr3 = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
var rr3 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
var Qt3 = 0.1;
var ei2 = "event-client";
var ti2 = 86400;
var ii2 = "https://pulse.walletconnect.org/batch";
function nr3(r4, e3) {
  if (r4.length >= 255) throw new TypeError("Alphabet too long");
  for (var t2 = new Uint8Array(256), i6 = 0; i6 < t2.length; i6++) t2[i6] = 255;
  for (var s4 = 0; s4 < r4.length; s4++) {
    var n6 = r4.charAt(s4), o6 = n6.charCodeAt(0);
    if (t2[o6] !== 255) throw new TypeError(n6 + " is ambiguous");
    t2[o6] = s4;
  }
  var a4 = r4.length, c8 = r4.charAt(0), h7 = Math.log(a4) / Math.log(256), l9 = Math.log(256) / Math.log(a4);
  function d6(u5) {
    if (u5 instanceof Uint8Array || (ArrayBuffer.isView(u5) ? u5 = new Uint8Array(u5.buffer, u5.byteOffset, u5.byteLength) : Array.isArray(u5) && (u5 = Uint8Array.from(u5))), !(u5 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (u5.length === 0) return "";
    for (var b6 = 0, x6 = 0, I5 = 0, D3 = u5.length; I5 !== D3 && u5[I5] === 0; ) I5++, b6++;
    for (var j5 = (D3 - I5) * l9 + 1 >>> 0, T4 = new Uint8Array(j5); I5 !== D3; ) {
      for (var q2 = u5[I5], J5 = 0, K4 = j5 - 1; (q2 !== 0 || J5 < x6) && K4 !== -1; K4--, J5++) q2 += 256 * T4[K4] >>> 0, T4[K4] = q2 % a4 >>> 0, q2 = q2 / a4 >>> 0;
      if (q2 !== 0) throw new Error("Non-zero carry");
      x6 = J5, I5++;
    }
    for (var H3 = j5 - x6; H3 !== j5 && T4[H3] === 0; ) H3++;
    for (var me5 = c8.repeat(b6); H3 < j5; ++H3) me5 += r4.charAt(T4[H3]);
    return me5;
  }
  function g4(u5) {
    if (typeof u5 != "string") throw new TypeError("Expected String");
    if (u5.length === 0) return new Uint8Array();
    var b6 = 0;
    if (u5[b6] !== " ") {
      for (var x6 = 0, I5 = 0; u5[b6] === c8; ) x6++, b6++;
      for (var D3 = (u5.length - b6) * h7 + 1 >>> 0, j5 = new Uint8Array(D3); u5[b6]; ) {
        var T4 = t2[u5.charCodeAt(b6)];
        if (T4 === 255) return;
        for (var q2 = 0, J5 = D3 - 1; (T4 !== 0 || q2 < I5) && J5 !== -1; J5--, q2++) T4 += a4 * j5[J5] >>> 0, j5[J5] = T4 % 256 >>> 0, T4 = T4 / 256 >>> 0;
        if (T4 !== 0) throw new Error("Non-zero carry");
        I5 = q2, b6++;
      }
      if (u5[b6] !== " ") {
        for (var K4 = D3 - I5; K4 !== D3 && j5[K4] === 0; ) K4++;
        for (var H3 = new Uint8Array(x6 + (D3 - K4)), me5 = x6; K4 !== D3; ) H3[me5++] = j5[K4++];
        return H3;
      }
    }
  }
  function _3(u5) {
    var b6 = g4(u5);
    if (b6) return b6;
    throw new Error(`Non-${e3} character`);
  }
  return { encode: d6, decodeUnsafe: g4, decode: _3 };
}
var or4 = nr3;
var ar2 = or4;
var si2 = (r4) => {
  if (r4 instanceof Uint8Array && r4.constructor.name === "Uint8Array") return r4;
  if (r4 instanceof ArrayBuffer) return new Uint8Array(r4);
  if (ArrayBuffer.isView(r4)) return new Uint8Array(r4.buffer, r4.byteOffset, r4.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var cr2 = (r4) => new TextEncoder().encode(r4);
var hr3 = (r4) => new TextDecoder().decode(r4);
var lr3 = class {
  constructor(e3, t2, i6) {
    this.name = e3, this.prefix = t2, this.baseEncode = i6;
  }
  encode(e3) {
    if (e3 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e3)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var ur2 = class {
  constructor(e3, t2, i6) {
    if (this.name = e3, this.prefix = t2, t2.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = t2.codePointAt(0), this.baseDecode = i6;
  }
  decode(e3) {
    if (typeof e3 == "string") {
      if (e3.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e3)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e3.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e3) {
    return ri2(this, e3);
  }
};
var dr3 = class {
  constructor(e3) {
    this.decoders = e3;
  }
  or(e3) {
    return ri2(this, e3);
  }
  decode(e3) {
    const t2 = e3[0], i6 = this.decoders[t2];
    if (i6) return i6.decode(e3);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e3)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ri2 = (r4, e3) => new dr3({ ...r4.decoders || { [r4.prefix]: r4 }, ...e3.decoders || { [e3.prefix]: e3 } });
var gr3 = class {
  constructor(e3, t2, i6, s4) {
    this.name = e3, this.prefix = t2, this.baseEncode = i6, this.baseDecode = s4, this.encoder = new lr3(e3, t2, i6), this.decoder = new ur2(e3, t2, s4);
  }
  encode(e3) {
    return this.encoder.encode(e3);
  }
  decode(e3) {
    return this.decoder.decode(e3);
  }
};
var Ee2 = ({ name: r4, prefix: e3, encode: t2, decode: i6 }) => new gr3(r4, e3, t2, i6);
var de3 = ({ prefix: r4, name: e3, alphabet: t2 }) => {
  const { encode: i6, decode: s4 } = ar2(t2, e3);
  return Ee2({ prefix: r4, name: e3, encode: i6, decode: (n6) => si2(s4(n6)) });
};
var pr3 = (r4, e3, t2, i6) => {
  const s4 = {};
  for (let l9 = 0; l9 < e3.length; ++l9) s4[e3[l9]] = l9;
  let n6 = r4.length;
  for (; r4[n6 - 1] === "="; ) --n6;
  const o6 = new Uint8Array(n6 * t2 / 8 | 0);
  let a4 = 0, c8 = 0, h7 = 0;
  for (let l9 = 0; l9 < n6; ++l9) {
    const d6 = s4[r4[l9]];
    if (d6 === void 0) throw new SyntaxError(`Non-${i6} character`);
    c8 = c8 << t2 | d6, a4 += t2, a4 >= 8 && (a4 -= 8, o6[h7++] = 255 & c8 >> a4);
  }
  if (a4 >= t2 || 255 & c8 << 8 - a4) throw new SyntaxError("Unexpected end of data");
  return o6;
};
var yr3 = (r4, e3, t2) => {
  const i6 = e3[e3.length - 1] === "=", s4 = (1 << t2) - 1;
  let n6 = "", o6 = 0, a4 = 0;
  for (let c8 = 0; c8 < r4.length; ++c8) for (a4 = a4 << 8 | r4[c8], o6 += 8; o6 > t2; ) o6 -= t2, n6 += e3[s4 & a4 >> o6];
  if (o6 && (n6 += e3[s4 & a4 << t2 - o6]), i6) for (; n6.length * t2 & 7; ) n6 += "=";
  return n6;
};
var P4 = ({ name: r4, prefix: e3, bitsPerChar: t2, alphabet: i6 }) => Ee2({ prefix: e3, name: r4, encode(s4) {
  return yr3(s4, i6, t2);
}, decode(s4) {
  return pr3(s4, i6, t2, r4);
} });
var br3 = Ee2({ prefix: "\0", name: "identity", encode: (r4) => hr3(r4), decode: (r4) => cr2(r4) });
var mr3 = Object.freeze({ __proto__: null, identity: br3 });
var fr3 = P4({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var Dr3 = Object.freeze({ __proto__: null, base2: fr3 });
var vr3 = P4({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var wr3 = Object.freeze({ __proto__: null, base8: vr3 });
var _r3 = de3({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Er3 = Object.freeze({ __proto__: null, base10: _r3 });
var Ir3 = P4({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Tr3 = P4({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Cr3 = Object.freeze({ __proto__: null, base16: Ir3, base16upper: Tr3 });
var Pr3 = P4({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Sr3 = P4({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Or3 = P4({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var Rr3 = P4({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var Ar3 = P4({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var xr3 = P4({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var Nr3 = P4({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var $r3 = P4({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var zr3 = P4({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var Lr3 = Object.freeze({ __proto__: null, base32: Pr3, base32upper: Sr3, base32pad: Or3, base32padupper: Rr3, base32hex: Ar3, base32hexupper: xr3, base32hexpad: Nr3, base32hexpadupper: $r3, base32z: zr3 });
var kr3 = de3({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var jr3 = de3({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var Ur3 = Object.freeze({ __proto__: null, base36: kr3, base36upper: jr3 });
var Fr2 = de3({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Mr3 = de3({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var Kr2 = Object.freeze({ __proto__: null, base58btc: Fr2, base58flickr: Mr3 });
var Br3 = P4({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var Vr3 = P4({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var qr2 = P4({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var Gr3 = P4({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Wr2 = Object.freeze({ __proto__: null, base64: Br3, base64pad: Vr3, base64url: qr2, base64urlpad: Gr3 });
var ni2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var Hr3 = ni2.reduce((r4, e3, t2) => (r4[t2] = e3, r4), []);
var Yr3 = ni2.reduce((r4, e3, t2) => (r4[e3.codePointAt(0)] = t2, r4), []);
function Jr3(r4) {
  return r4.reduce((e3, t2) => (e3 += Hr3[t2], e3), "");
}
function Xr2(r4) {
  const e3 = [];
  for (const t2 of r4) {
    const i6 = Yr3[t2.codePointAt(0)];
    if (i6 === void 0) throw new Error(`Non-base256emoji character: ${t2}`);
    e3.push(i6);
  }
  return new Uint8Array(e3);
}
var Zr3 = Ee2({ prefix: "🚀", name: "base256emoji", encode: Jr3, decode: Xr2 });
var Qr3 = Object.freeze({ __proto__: null, base256emoji: Zr3 });
var en3 = ai2;
var oi2 = 128;
var tn2 = 127;
var sn3 = ~tn2;
var rn3 = Math.pow(2, 31);
function ai2(r4, e3, t2) {
  e3 = e3 || [], t2 = t2 || 0;
  for (var i6 = t2; r4 >= rn3; ) e3[t2++] = r4 & 255 | oi2, r4 /= 128;
  for (; r4 & sn3; ) e3[t2++] = r4 & 255 | oi2, r4 >>>= 7;
  return e3[t2] = r4 | 0, ai2.bytes = t2 - i6 + 1, e3;
}
var nn3 = Me3;
var on3 = 128;
var ci2 = 127;
function Me3(r4, i6) {
  var t2 = 0, i6 = i6 || 0, s4 = 0, n6 = i6, o6, a4 = r4.length;
  do {
    if (n6 >= a4) throw Me3.bytes = 0, new RangeError("Could not decode varint");
    o6 = r4[n6++], t2 += s4 < 28 ? (o6 & ci2) << s4 : (o6 & ci2) * Math.pow(2, s4), s4 += 7;
  } while (o6 >= on3);
  return Me3.bytes = n6 - i6, t2;
}
var an2 = Math.pow(2, 7);
var cn2 = Math.pow(2, 14);
var hn2 = Math.pow(2, 21);
var ln2 = Math.pow(2, 28);
var un2 = Math.pow(2, 35);
var dn2 = Math.pow(2, 42);
var gn3 = Math.pow(2, 49);
var pn2 = Math.pow(2, 56);
var yn3 = Math.pow(2, 63);
var bn3 = function(r4) {
  return r4 < an2 ? 1 : r4 < cn2 ? 2 : r4 < hn2 ? 3 : r4 < ln2 ? 4 : r4 < un2 ? 5 : r4 < dn2 ? 6 : r4 < gn3 ? 7 : r4 < pn2 ? 8 : r4 < yn3 ? 9 : 10;
};
var mn3 = { encode: en3, decode: nn3, encodingLength: bn3 };
var hi2 = mn3;
var li2 = (r4, e3, t2 = 0) => (hi2.encode(r4, e3, t2), e3);
var ui2 = (r4) => hi2.encodingLength(r4);
var Ke3 = (r4, e3) => {
  const t2 = e3.byteLength, i6 = ui2(r4), s4 = i6 + ui2(t2), n6 = new Uint8Array(s4 + t2);
  return li2(r4, n6, 0), li2(t2, n6, i6), n6.set(e3, s4), new fn2(r4, t2, e3, n6);
};
var fn2 = class {
  constructor(e3, t2, i6, s4) {
    this.code = e3, this.size = t2, this.digest = i6, this.bytes = s4;
  }
};
var di2 = ({ name: r4, code: e3, encode: t2 }) => new Dn2(r4, e3, t2);
var Dn2 = class {
  constructor(e3, t2, i6) {
    this.name = e3, this.code = t2, this.encode = i6;
  }
  digest(e3) {
    if (e3 instanceof Uint8Array) {
      const t2 = this.encode(e3);
      return t2 instanceof Uint8Array ? Ke3(this.code, t2) : t2.then((i6) => Ke3(this.code, i6));
    } else throw Error("Unknown type, must be binary type");
  }
};
var gi2 = (r4) => async (e3) => new Uint8Array(await crypto.subtle.digest(r4, e3));
var vn3 = di2({ name: "sha2-256", code: 18, encode: gi2("SHA-256") });
var wn2 = di2({ name: "sha2-512", code: 19, encode: gi2("SHA-512") });
var _n3 = Object.freeze({ __proto__: null, sha256: vn3, sha512: wn2 });
var pi2 = 0;
var En3 = "identity";
var yi2 = si2;
var In3 = (r4) => Ke3(pi2, yi2(r4));
var Tn3 = { code: pi2, name: En3, encode: yi2, digest: In3 };
var Cn3 = Object.freeze({ __proto__: null, identity: Tn3 });
new TextEncoder(), new TextDecoder();
var bi2 = { ...mr3, ...Dr3, ...wr3, ...Er3, ...Cr3, ...Lr3, ...Ur3, ...Kr2, ...Wr2, ...Qr3 };
({ ..._n3, ...Cn3 });
function mi2(r4) {
  return globalThis.Buffer != null ? new Uint8Array(r4.buffer, r4.byteOffset, r4.byteLength) : r4;
}
function Pn3(r4 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? mi2(globalThis.Buffer.allocUnsafe(r4)) : new Uint8Array(r4);
}
function fi2(r4, e3, t2, i6) {
  return { name: r4, prefix: e3, encoder: { name: r4, prefix: e3, encode: t2 }, decoder: { decode: i6 } };
}
var Di2 = fi2("utf8", "u", (r4) => "u" + new TextDecoder("utf8").decode(r4), (r4) => new TextEncoder().encode(r4.substring(1)));
var Be3 = fi2("ascii", "a", (r4) => {
  let e3 = "a";
  for (let t2 = 0; t2 < r4.length; t2++) e3 += String.fromCharCode(r4[t2]);
  return e3;
}, (r4) => {
  r4 = r4.substring(1);
  const e3 = Pn3(r4.length);
  for (let t2 = 0; t2 < r4.length; t2++) e3[t2] = r4.charCodeAt(t2);
  return e3;
});
var Sn3 = { utf8: Di2, "utf-8": Di2, hex: bi2.base16, latin1: Be3, ascii: Be3, binary: Be3, ...bi2 };
function On3(r4, e3 = "utf8") {
  const t2 = Sn3[e3];
  if (!t2) throw new Error(`Unsupported encoding "${e3}"`);
  return (e3 === "utf8" || e3 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? mi2(globalThis.Buffer.from(r4, "utf-8")) : t2.decoder.decode(`${t2.prefix}${r4}`);
}
var Rn3 = Object.defineProperty;
var An3 = (r4, e3, t2) => e3 in r4 ? Rn3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var W3 = (r4, e3, t2) => An3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var vi2 = class {
  constructor(e3, t2) {
    this.core = e3, this.logger = t2, W3(this, "keychain", /* @__PURE__ */ new Map()), W3(this, "name", Pt3), W3(this, "version", St3), W3(this, "initialized", false), W3(this, "storagePrefix", B2), W3(this, "init", async () => {
      if (!this.initialized) {
        const i6 = await this.getKeyChain();
        typeof i6 < "u" && (this.keychain = i6), this.initialized = true;
      }
    }), W3(this, "has", (i6) => (this.isInitialized(), this.keychain.has(i6))), W3(this, "set", async (i6, s4) => {
      this.isInitialized(), this.keychain.set(i6, s4), await this.persist();
    }), W3(this, "get", (i6) => {
      this.isInitialized();
      const s4 = this.keychain.get(i6);
      if (typeof s4 > "u") {
        const { message: n6 } = Et2("NO_MATCHING_KEY", `${this.name}: ${i6}`);
        throw new Error(n6);
      }
      return s4;
    }), W3(this, "del", async (i6) => {
      this.isInitialized(), this.keychain.delete(i6), await this.persist();
    }), this.core = e3, this.logger = E2(t2, this.name);
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setKeyChain(e3) {
    await this.core.storage.setItem(this.storageKey, Ws(e3));
  }
  async getKeyChain() {
    const e3 = await this.core.storage.getItem(this.storageKey);
    return typeof e3 < "u" ? Ys(e3) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var xn3 = Object.defineProperty;
var Nn3 = (r4, e3, t2) => e3 in r4 ? xn3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var S3 = (r4, e3, t2) => Nn3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var wi2 = class {
  constructor(e3, t2, i6) {
    this.core = e3, this.logger = t2, S3(this, "name", Tt3), S3(this, "keychain"), S3(this, "randomSessionIdentifier", Mc()), S3(this, "initialized", false), S3(this, "init", async () => {
      this.initialized || (await this.keychain.init(), this.initialized = true);
    }), S3(this, "hasKeys", (s4) => (this.isInitialized(), this.keychain.has(s4))), S3(this, "getClientId", async () => {
      this.isInitialized();
      const s4 = await this.getClientSeed(), n6 = Po(s4);
      return Qe(n6.publicKey);
    }), S3(this, "generateKeyPair", () => {
      this.isInitialized();
      const s4 = Dc();
      return this.setPrivateKey(s4.publicKey, s4.privateKey);
    }), S3(this, "signJWT", async (s4) => {
      this.isInitialized();
      const n6 = await this.getClientSeed(), o6 = Po(n6), a4 = this.randomSessionIdentifier, c8 = Ct2;
      return await Qo(a4, s4, c8, o6);
    }), S3(this, "generateSharedKey", (s4, n6, o6) => {
      this.isInitialized();
      const a4 = this.getPrivateKey(s4), c8 = Vc(a4, n6);
      return this.setSymKey(c8, o6);
    }), S3(this, "setSymKey", async (s4, n6) => {
      this.isInitialized();
      const o6 = n6 || qc(s4);
      return await this.keychain.set(o6, s4), o6;
    }), S3(this, "deleteKeyPair", async (s4) => {
      this.isInitialized(), await this.keychain.del(s4);
    }), S3(this, "deleteSymKey", async (s4) => {
      this.isInitialized(), await this.keychain.del(s4);
    }), S3(this, "encode", async (s4, n6, o6) => {
      this.isInitialized();
      const a4 = Po2(o6), c8 = safeJsonStringify(n6);
      if (Xc(a4)) return Gc(c8, o6 == null ? void 0 : o6.encoding);
      if (Yc(a4)) {
        const g4 = a4.senderPublicKey, _3 = a4.receiverPublicKey;
        s4 = await this.generateSharedKey(g4, _3);
      }
      const h7 = this.getSymKey(s4), { type: l9, senderPublicKey: d6 } = a4;
      return Fc({ type: l9, symKey: h7, message: c8, senderPublicKey: d6, encoding: o6 == null ? void 0 : o6.encoding });
    }), S3(this, "decode", async (s4, n6, o6) => {
      this.isInitialized();
      const a4 = Wc(n6, o6);
      if (Xc(a4)) {
        const c8 = Zc(n6, o6 == null ? void 0 : o6.encoding);
        return safeJsonParse(c8);
      }
      if (Yc(a4)) {
        const c8 = a4.receiverPublicKey, h7 = a4.senderPublicKey;
        s4 = await this.generateSharedKey(c8, h7);
      }
      try {
        const c8 = this.getSymKey(s4), h7 = zc({ symKey: c8, encoded: n6, encoding: o6 == null ? void 0 : o6.encoding });
        return safeJsonParse(h7);
      } catch (c8) {
        this.logger.error(`Failed to decode message from topic: '${s4}', clientId: '${await this.getClientId()}'`), this.logger.error(c8);
      }
    }), S3(this, "getPayloadType", (s4, n6 = Qt2) => {
      const o6 = Me2({ encoded: s4, encoding: n6 });
      return Vt2(o6.type);
    }), S3(this, "getPayloadSenderPublicKey", (s4, n6 = Qt2) => {
      const o6 = Me2({ encoded: s4, encoding: n6 });
      return o6.senderPublicKey ? toString3(o6.senderPublicKey, tt) : void 0;
    }), this.core = e3, this.logger = E2(t2, this.name), this.keychain = i6 || new vi2(this.core, this.logger);
  }
  get context() {
    return y3(this.logger);
  }
  async setPrivateKey(e3, t2) {
    return await this.keychain.set(e3, t2), e3;
  }
  getPrivateKey(e3) {
    return this.keychain.get(e3);
  }
  async getClientSeed() {
    let e3 = "";
    try {
      e3 = this.keychain.get(ke3);
    } catch {
      e3 = Mc(), await this.keychain.set(ke3, e3);
    }
    return On3(e3, "base16");
  }
  getSymKey(e3) {
    return this.keychain.get(e3);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var $n3 = Object.defineProperty;
var zn2 = Object.defineProperties;
var Ln3 = Object.getOwnPropertyDescriptors;
var _i2 = Object.getOwnPropertySymbols;
var kn3 = Object.prototype.hasOwnProperty;
var jn3 = Object.prototype.propertyIsEnumerable;
var Ve3 = (r4, e3, t2) => e3 in r4 ? $n3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var Un3 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {})) kn3.call(e3, t2) && Ve3(r4, t2, e3[t2]);
  if (_i2) for (var t2 of _i2(e3)) jn3.call(e3, t2) && Ve3(r4, t2, e3[t2]);
  return r4;
};
var Fn3 = (r4, e3) => zn2(r4, Ln3(e3));
var k5 = (r4, e3, t2) => Ve3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Ei2 = class extends y4 {
  constructor(e3, t2) {
    super(e3, t2), this.logger = e3, this.core = t2, k5(this, "messages", /* @__PURE__ */ new Map()), k5(this, "messagesWithoutClientAck", /* @__PURE__ */ new Map()), k5(this, "name", Ot3), k5(this, "version", Rt3), k5(this, "initialized", false), k5(this, "storagePrefix", B2), k5(this, "init", async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const i6 = await this.getRelayerMessages();
          typeof i6 < "u" && (this.messages = i6);
          const s4 = await this.getRelayerMessagesWithoutClientAck();
          typeof s4 < "u" && (this.messagesWithoutClientAck = s4), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (i6) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(i6);
        } finally {
          this.initialized = true;
        }
      }
    }), k5(this, "set", async (i6, s4, n6) => {
      this.isInitialized();
      const o6 = Kc(s4);
      let a4 = this.messages.get(i6);
      if (typeof a4 > "u" && (a4 = {}), typeof a4[o6] < "u") return o6;
      if (a4[o6] = s4, this.messages.set(i6, a4), n6 === le3.inbound) {
        const c8 = this.messagesWithoutClientAck.get(i6) || {};
        this.messagesWithoutClientAck.set(i6, Fn3(Un3({}, c8), { [o6]: s4 }));
      }
      return await this.persist(), o6;
    }), k5(this, "get", (i6) => {
      this.isInitialized();
      let s4 = this.messages.get(i6);
      return typeof s4 > "u" && (s4 = {}), s4;
    }), k5(this, "getWithoutAck", (i6) => {
      this.isInitialized();
      const s4 = {};
      for (const n6 of i6) {
        const o6 = this.messagesWithoutClientAck.get(n6) || {};
        s4[n6] = Object.values(o6);
      }
      return s4;
    }), k5(this, "has", (i6, s4) => {
      this.isInitialized();
      const n6 = this.get(i6), o6 = Kc(s4);
      return typeof n6[o6] < "u";
    }), k5(this, "ack", async (i6, s4) => {
      this.isInitialized();
      const n6 = this.messagesWithoutClientAck.get(i6);
      if (typeof n6 > "u") return;
      const o6 = Kc(s4);
      delete n6[o6], Object.keys(n6).length === 0 ? this.messagesWithoutClientAck.delete(i6) : this.messagesWithoutClientAck.set(i6, n6), await this.persist();
    }), k5(this, "del", async (i6) => {
      this.isInitialized(), this.messages.delete(i6), this.messagesWithoutClientAck.delete(i6), await this.persist();
    }), this.logger = E2(e3, this.name), this.core = t2;
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get storageKeyWithoutClientAck() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name + "_withoutClientAck";
  }
  async setRelayerMessages(e3) {
    await this.core.storage.setItem(this.storageKey, Ws(e3));
  }
  async setRelayerMessagesWithoutClientAck(e3) {
    await this.core.storage.setItem(this.storageKeyWithoutClientAck, Ws(e3));
  }
  async getRelayerMessages() {
    const e3 = await this.core.storage.getItem(this.storageKey);
    return typeof e3 < "u" ? Ys(e3) : void 0;
  }
  async getRelayerMessagesWithoutClientAck() {
    const e3 = await this.core.storage.getItem(this.storageKeyWithoutClientAck);
    return typeof e3 < "u" ? Ys(e3) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages), await this.setRelayerMessagesWithoutClientAck(this.messagesWithoutClientAck);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var Mn3 = Object.defineProperty;
var Kn3 = Object.defineProperties;
var Bn3 = Object.getOwnPropertyDescriptors;
var Ii2 = Object.getOwnPropertySymbols;
var Vn3 = Object.prototype.hasOwnProperty;
var qn3 = Object.prototype.propertyIsEnumerable;
var qe3 = (r4, e3, t2) => e3 in r4 ? Mn3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var Ie3 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {})) Vn3.call(e3, t2) && qe3(r4, t2, e3[t2]);
  if (Ii2) for (var t2 of Ii2(e3)) qn3.call(e3, t2) && qe3(r4, t2, e3[t2]);
  return r4;
};
var Ge2 = (r4, e3) => Kn3(r4, Bn3(e3));
var V2 = (r4, e3, t2) => qe3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Gn2 = class extends m2 {
  constructor(e3, t2) {
    super(e3, t2), this.relayer = e3, this.logger = t2, V2(this, "events", new import_events7.EventEmitter()), V2(this, "name", At2), V2(this, "queue", /* @__PURE__ */ new Map()), V2(this, "publishTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE)), V2(this, "initialPublishTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), V2(this, "needsTransportRestart", false), V2(this, "publish", async (i6, s4, n6) => {
      var o6;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: i6, message: s4, opts: n6 } });
      const a4 = (n6 == null ? void 0 : n6.ttl) || je3, c8 = Qc(n6), h7 = (n6 == null ? void 0 : n6.prompt) || false, l9 = (n6 == null ? void 0 : n6.tag) || 0, d6 = (n6 == null ? void 0 : n6.id) || getBigIntRpcId().toString(), g4 = { topic: i6, message: s4, opts: { ttl: a4, relay: c8, prompt: h7, tag: l9, id: d6, attestation: n6 == null ? void 0 : n6.attestation, tvf: n6 == null ? void 0 : n6.tvf } }, _3 = `Failed to publish payload, please try again. id:${d6} tag:${l9}`;
      try {
        const u5 = new Promise(async (b6) => {
          const x6 = ({ id: D3 }) => {
            g4.opts.id === D3 && (this.removeRequestFromQueue(D3), this.relayer.events.removeListener(C3.publish, x6), b6(g4));
          };
          this.relayer.events.on(C3.publish, x6);
          const I5 = ei(new Promise((D3, j5) => {
            this.rpcPublish({ topic: i6, message: s4, ttl: a4, prompt: h7, tag: l9, id: d6, attestation: n6 == null ? void 0 : n6.attestation, tvf: n6 == null ? void 0 : n6.tvf }).then(D3).catch((T4) => {
              this.logger.warn(T4, T4 == null ? void 0 : T4.message), j5(T4);
            });
          }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${d6} tag:${l9}`);
          try {
            await I5, this.events.removeListener(C3.publish, x6);
          } catch (D3) {
            this.queue.set(d6, Ge2(Ie3({}, g4), { attempt: 1 })), this.logger.warn(D3, D3 == null ? void 0 : D3.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: d6, topic: i6, message: s4, opts: n6 } }), await ei(u5, this.publishTimeout, _3);
      } catch (u5) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(u5), (o6 = n6 == null ? void 0 : n6.internal) != null && o6.throwOnFailedPublish) throw u5;
      } finally {
        this.queue.delete(d6);
      }
    }), V2(this, "on", (i6, s4) => {
      this.events.on(i6, s4);
    }), V2(this, "once", (i6, s4) => {
      this.events.once(i6, s4);
    }), V2(this, "off", (i6, s4) => {
      this.events.off(i6, s4);
    }), V2(this, "removeListener", (i6, s4) => {
      this.events.removeListener(i6, s4);
    }), this.relayer = e3, this.logger = E2(t2, this.name), this.registerEventListeners();
  }
  get context() {
    return y3(this.logger);
  }
  async rpcPublish(e3) {
    var t2, i6, s4, n6;
    const { topic: o6, message: a4, ttl: c8 = je3, prompt: h7, tag: l9, id: d6, attestation: g4, tvf: _3 } = e3, u5 = { method: ta(Qc().protocol).publish, params: Ie3({ topic: o6, message: a4, ttl: c8, prompt: h7, tag: l9, attestation: g4 }, _3), id: d6 };
    kt2((t2 = u5.params) == null ? void 0 : t2.prompt) && ((i6 = u5.params) == null || delete i6.prompt), kt2((s4 = u5.params) == null ? void 0 : s4.tag) && ((n6 = u5.params) == null || delete n6.tag), this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: u5 });
    const b6 = await this.relayer.request(u5);
    return this.relayer.events.emit(C3.publish, e3), this.logger.debug("Successfully Published Payload"), b6;
  }
  removeRequestFromQueue(e3) {
    this.queue.delete(e3);
  }
  checkQueue() {
    this.queue.forEach(async (e3, t2) => {
      const i6 = e3.attempt + 1;
      this.queue.set(t2, Ge2(Ie3({}, e3), { attempt: i6 }));
      const { topic: s4, message: n6, opts: o6, attestation: a4 } = e3;
      this.logger.warn({}, `Publisher: queue->publishing: ${e3.opts.id}, tag: ${e3.opts.tag}, attempt: ${i6}`), await this.rpcPublish(Ge2(Ie3({}, e3), { topic: s4, message: n6, ttl: o6.ttl, prompt: o6.prompt, tag: o6.tag, id: o6.id, attestation: a4, tvf: o6.tvf })), this.logger.warn({}, `Publisher: queue->published: ${e3.opts.id}`);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r2.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = false, this.relayer.events.emit(C3.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(C3.message_ack, (e3) => {
      this.removeRequestFromQueue(e3.id.toString());
    });
  }
};
var Wn2 = Object.defineProperty;
var Hn3 = (r4, e3, t2) => e3 in r4 ? Wn2(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var ne2 = (r4, e3, t2) => Hn3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Yn2 = class {
  constructor() {
    ne2(this, "map", /* @__PURE__ */ new Map()), ne2(this, "set", (e3, t2) => {
      const i6 = this.get(e3);
      this.exists(e3, t2) || this.map.set(e3, [...i6, t2]);
    }), ne2(this, "get", (e3) => this.map.get(e3) || []), ne2(this, "exists", (e3, t2) => this.get(e3).includes(t2)), ne2(this, "delete", (e3, t2) => {
      if (typeof t2 > "u") {
        this.map.delete(e3);
        return;
      }
      if (!this.map.has(e3)) return;
      const i6 = this.get(e3);
      if (!this.exists(e3, t2)) return;
      const s4 = i6.filter((n6) => n6 !== t2);
      if (!s4.length) {
        this.map.delete(e3);
        return;
      }
      this.map.set(e3, s4);
    }), ne2(this, "clear", () => {
      this.map.clear();
    });
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var Jn3 = Object.defineProperty;
var Xn3 = Object.defineProperties;
var Zn2 = Object.getOwnPropertyDescriptors;
var Ti2 = Object.getOwnPropertySymbols;
var Qn3 = Object.prototype.hasOwnProperty;
var eo3 = Object.prototype.propertyIsEnumerable;
var We3 = (r4, e3, t2) => e3 in r4 ? Jn3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var ge3 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {})) Qn3.call(e3, t2) && We3(r4, t2, e3[t2]);
  if (Ti2) for (var t2 of Ti2(e3)) eo3.call(e3, t2) && We3(r4, t2, e3[t2]);
  return r4;
};
var He3 = (r4, e3) => Xn3(r4, Zn2(e3));
var f6 = (r4, e3, t2) => We3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Ci2 = class extends P2 {
  constructor(e3, t2) {
    super(e3, t2), this.relayer = e3, this.logger = t2, f6(this, "subscriptions", /* @__PURE__ */ new Map()), f6(this, "topicMap", new Yn2()), f6(this, "events", new import_events7.EventEmitter()), f6(this, "name", Ut3), f6(this, "version", Ft2), f6(this, "pending", /* @__PURE__ */ new Map()), f6(this, "cached", []), f6(this, "initialized", false), f6(this, "storagePrefix", B2), f6(this, "subscribeTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE)), f6(this, "initialSubscribeTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), f6(this, "clientId"), f6(this, "batchSubscribeTopicsLimit", 500), f6(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), await this.restore()), this.initialized = true;
    }), f6(this, "subscribe", async (i6, s4) => {
      this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i6, opts: s4 } });
      try {
        const n6 = Qc(s4), o6 = { topic: i6, relay: n6, transportType: s4 == null ? void 0 : s4.transportType };
        this.pending.set(i6, o6);
        const a4 = await this.rpcSubscribe(i6, n6, s4);
        return typeof a4 == "string" && (this.onSubscribe(a4, o6), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i6, opts: s4 } })), a4;
      } catch (n6) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(n6), n6;
      }
    }), f6(this, "unsubscribe", async (i6, s4) => {
      this.isInitialized(), typeof (s4 == null ? void 0 : s4.id) < "u" ? await this.unsubscribeById(i6, s4.id, s4) : await this.unsubscribeByTopic(i6, s4);
    }), f6(this, "isSubscribed", (i6) => new Promise((s4) => {
      s4(this.topicMap.topics.includes(i6));
    })), f6(this, "isKnownTopic", (i6) => new Promise((s4) => {
      s4(this.topicMap.topics.includes(i6) || this.pending.has(i6) || this.cached.some((n6) => n6.topic === i6));
    })), f6(this, "on", (i6, s4) => {
      this.events.on(i6, s4);
    }), f6(this, "once", (i6, s4) => {
      this.events.once(i6, s4);
    }), f6(this, "off", (i6, s4) => {
      this.events.off(i6, s4);
    }), f6(this, "removeListener", (i6, s4) => {
      this.events.removeListener(i6, s4);
    }), f6(this, "start", async () => {
      await this.onConnect();
    }), f6(this, "stop", async () => {
      await this.onDisconnect();
    }), f6(this, "restart", async () => {
      await this.restore(), await this.onRestart();
    }), f6(this, "checkPending", async () => {
      if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;
      const i6 = [];
      this.pending.forEach((s4) => {
        i6.push(s4);
      }), await this.batchSubscribe(i6);
    }), f6(this, "registerEventListeners", () => {
      this.relayer.core.heartbeat.on(r2.pulse, async () => {
        await this.checkPending();
      }), this.events.on($.created, async (i6) => {
        const s4 = $.created;
        this.logger.info(`Emitting ${s4}`), this.logger.debug({ type: "event", event: s4, data: i6 }), await this.persist();
      }), this.events.on($.deleted, async (i6) => {
        const s4 = $.deleted;
        this.logger.info(`Emitting ${s4}`), this.logger.debug({ type: "event", event: s4, data: i6 }), await this.persist();
      });
    }), this.relayer = e3, this.logger = E2(t2, this.name), this.clientId = "";
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  get hasAnyTopics() {
    return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;
  }
  hasSubscription(e3, t2) {
    let i6 = false;
    try {
      i6 = this.getSubscription(e3).topic === t2;
    } catch {
    }
    return i6;
  }
  reset() {
    this.cached = [], this.initialized = true;
  }
  onDisable() {
    this.values.length > 0 && (this.cached = this.values), this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e3, t2) {
    const i6 = this.topicMap.get(e3);
    await Promise.all(i6.map(async (s4) => await this.unsubscribeById(e3, s4, t2)));
  }
  async unsubscribeById(e3, t2, i6) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e3, id: t2, opts: i6 } });
    try {
      const s4 = Qc(i6);
      await this.restartToComplete({ topic: e3, id: t2, relay: s4 }), await this.rpcUnsubscribe(e3, t2, s4);
      const n6 = Kt2("USER_DISCONNECTED", `${this.name}, ${e3}`);
      await this.onUnsubscribe(e3, t2, n6), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e3, id: t2, opts: i6 } });
    } catch (s4) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(s4), s4;
    }
  }
  async rpcSubscribe(e3, t2, i6) {
    var s4;
    (!i6 || (i6 == null ? void 0 : i6.transportType) === Q3.relay) && await this.restartToComplete({ topic: e3, id: e3, relay: t2 });
    const n6 = { method: ta(t2.protocol).subscribe, params: { topic: e3 } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: n6 });
    const o6 = (s4 = i6 == null ? void 0 : i6.internal) == null ? void 0 : s4.throwOnFailedPublish;
    try {
      const a4 = await this.getSubscriptionId(e3);
      if ((i6 == null ? void 0 : i6.transportType) === Q3.link_mode) return setTimeout(() => {
        (this.relayer.connected || this.relayer.connecting) && this.relayer.request(n6).catch((l9) => this.logger.warn(l9));
      }, (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), a4;
      const c8 = new Promise(async (l9) => {
        const d6 = (g4) => {
          g4.topic === e3 && (this.events.removeListener($.created, d6), l9(g4.id));
        };
        this.events.on($.created, d6);
        try {
          const g4 = await ei(new Promise((_3, u5) => {
            this.relayer.request(n6).catch((b6) => {
              this.logger.warn(b6, b6 == null ? void 0 : b6.message), u5(b6);
            }).then(_3);
          }), this.initialSubscribeTimeout, `Subscribing to ${e3} failed, please try again`);
          this.events.removeListener($.created, d6), l9(g4);
        } catch {
        }
      }), h7 = await ei(c8, this.subscribeTimeout, `Subscribing to ${e3} failed, please try again`);
      if (!h7 && o6) throw new Error(`Subscribing to ${e3} failed, please try again`);
      return h7 ? a4 : null;
    } catch (a4) {
      if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(C3.connection_stalled), o6) throw a4;
    }
    return null;
  }
  async rpcBatchSubscribe(e3) {
    if (!e3.length) return;
    const t2 = e3[0].relay, i6 = { method: ta(t2.protocol).batchSubscribe, params: { topics: e3.map((s4) => s4.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i6 });
    try {
      await await ei(new Promise((s4) => {
        this.relayer.request(i6).catch((n6) => this.logger.warn(n6)).then(s4);
      }), this.subscribeTimeout, "rpcBatchSubscribe failed, please try again");
    } catch {
      this.relayer.events.emit(C3.connection_stalled);
    }
  }
  async rpcBatchFetchMessages(e3) {
    if (!e3.length) return;
    const t2 = e3[0].relay, i6 = { method: ta(t2.protocol).batchFetchMessages, params: { topics: e3.map((n6) => n6.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i6 });
    let s4;
    try {
      s4 = await await ei(new Promise((n6, o6) => {
        this.relayer.request(i6).catch((a4) => {
          this.logger.warn(a4), o6(a4);
        }).then(n6);
      }), this.subscribeTimeout, "rpcBatchFetchMessages failed, please try again");
    } catch {
      this.relayer.events.emit(C3.connection_stalled);
    }
    return s4;
  }
  rpcUnsubscribe(e3, t2, i6) {
    const s4 = { method: ta(i6.protocol).unsubscribe, params: { topic: e3, id: t2 } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s4 }), this.relayer.request(s4);
  }
  onSubscribe(e3, t2) {
    this.setSubscription(e3, He3(ge3({}, t2), { id: e3 })), this.pending.delete(t2.topic);
  }
  onBatchSubscribe(e3) {
    e3.length && e3.forEach((t2) => {
      this.setSubscription(t2.id, ge3({}, t2)), this.pending.delete(t2.topic);
    });
  }
  async onUnsubscribe(e3, t2, i6) {
    this.events.removeAllListeners(t2), this.hasSubscription(t2, e3) && this.deleteSubscription(t2, i6), await this.relayer.messages.del(e3);
  }
  async setRelayerSubscriptions(e3) {
    await this.relayer.core.storage.setItem(this.storageKey, e3);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e3, t2) {
    this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e3, subscription: t2 }), this.addSubscription(e3, t2);
  }
  addSubscription(e3, t2) {
    this.subscriptions.set(e3, ge3({}, t2)), this.topicMap.set(t2.topic, e3), this.events.emit($.created, t2);
  }
  getSubscription(e3) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e3 });
    const t2 = this.subscriptions.get(e3);
    if (!t2) {
      const { message: i6 } = Et2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw new Error(i6);
    }
    return t2;
  }
  deleteSubscription(e3, t2) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e3, reason: t2 });
    const i6 = this.getSubscription(e3);
    this.subscriptions.delete(e3), this.topicMap.delete(i6.topic, e3), this.events.emit($.deleted, He3(ge3({}, i6), { reason: t2 }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit($.sync);
  }
  async onRestart() {
    if (this.cached.length) {
      const e3 = [...this.cached], t2 = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let i6 = 0; i6 < t2; i6++) {
        const s4 = e3.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(s4);
      }
    }
    this.events.emit($.resubscribed);
  }
  async restore() {
    try {
      const e3 = await this.getRelayerSubscriptions();
      if (typeof e3 > "u" || !e3.length) return;
      if (this.subscriptions.size) {
        const { message: t2 } = Et2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t2);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e3);
    }
  }
  async batchSubscribe(e3) {
    e3.length && (await this.rpcBatchSubscribe(e3), this.onBatchSubscribe(await Promise.all(e3.map(async (t2) => He3(ge3({}, t2), { id: await this.getSubscriptionId(t2.topic) })))));
  }
  async batchFetchMessages(e3) {
    if (!e3.length) return;
    this.logger.trace(`Fetching batch messages for ${e3.length} subscriptions`);
    const t2 = await this.rpcBatchFetchMessages(e3);
    t2 && t2.messages && (await hi((0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t2.messages));
  }
  async onConnect() {
    await this.restart(), this.reset();
  }
  onDisconnect() {
    this.onDisable();
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
  async restartToComplete(e3) {
    !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e3), await this.relayer.transportOpen());
  }
  async getClientId() {
    return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;
  }
  async getSubscriptionId(e3) {
    return Kc(e3 + await this.getClientId());
  }
};
var to3 = Object.defineProperty;
var Pi2 = Object.getOwnPropertySymbols;
var io3 = Object.prototype.hasOwnProperty;
var so3 = Object.prototype.propertyIsEnumerable;
var Ye3 = (r4, e3, t2) => e3 in r4 ? to3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var Si2 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {})) io3.call(e3, t2) && Ye3(r4, t2, e3[t2]);
  if (Pi2) for (var t2 of Pi2(e3)) so3.call(e3, t2) && Ye3(r4, t2, e3[t2]);
  return r4;
};
var y5 = (r4, e3, t2) => Ye3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Oi2 = class extends d2 {
  constructor(e3) {
    super(e3), y5(this, "protocol", "wc"), y5(this, "version", 2), y5(this, "core"), y5(this, "logger"), y5(this, "events", new import_events7.EventEmitter()), y5(this, "provider"), y5(this, "messages"), y5(this, "subscriber"), y5(this, "publisher"), y5(this, "name", $t3), y5(this, "transportExplicitlyClosed", false), y5(this, "initialized", false), y5(this, "connectionAttemptInProgress", false), y5(this, "relayUrl"), y5(this, "projectId"), y5(this, "packageName"), y5(this, "bundleId"), y5(this, "hasExperiencedNetworkDisruption", false), y5(this, "pingTimeout"), y5(this, "heartBeatTimeout", (0, import_time4.toMiliseconds)(import_time4.THIRTY_SECONDS + import_time4.FIVE_SECONDS)), y5(this, "reconnectTimeout"), y5(this, "connectPromise"), y5(this, "reconnectInProgress", false), y5(this, "requestsInFlight", []), y5(this, "connectTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), y5(this, "request", async (t2) => {
      var i6, s4;
      this.logger.debug("Publishing Request Payload");
      const n6 = t2.id || getBigIntRpcId().toString();
      await this.toEstablishConnection();
      try {
        this.logger.trace({ id: n6, method: t2.method, topic: (i6 = t2.params) == null ? void 0 : i6.topic }, "relayer.request - publishing...");
        const o6 = `${n6}:${((s4 = t2.params) == null ? void 0 : s4.tag) || ""}`;
        this.requestsInFlight.push(o6);
        const a4 = await this.provider.request(t2);
        return this.requestsInFlight = this.requestsInFlight.filter((c8) => c8 !== o6), a4;
      } catch (o6) {
        throw this.logger.debug(`Failed to Publish Request: ${n6}`), o6;
      }
    }), y5(this, "resetPingTimeout", () => {
      We2() && (clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
        var t2, i6, s4, n6;
        try {
          this.logger.debug({}, "pingTimeout: Connection stalled, terminating..."), (n6 = (s4 = (i6 = (t2 = this.provider) == null ? void 0 : t2.connection) == null ? void 0 : i6.socket) == null ? void 0 : s4.terminate) == null || n6.call(s4);
        } catch (o6) {
          this.logger.warn(o6, o6 == null ? void 0 : o6.message);
        }
      }, this.heartBeatTimeout));
    }), y5(this, "onPayloadHandler", (t2) => {
      this.onProviderPayload(t2), this.resetPingTimeout();
    }), y5(this, "onConnectHandler", () => {
      this.logger.warn({}, "Relayer connected 🛜"), this.startPingTimeout(), this.events.emit(C3.connect);
    }), y5(this, "onDisconnectHandler", () => {
      this.logger.warn({}, "Relayer disconnected 🛑"), this.requestsInFlight = [], this.onProviderDisconnect();
    }), y5(this, "onProviderErrorHandler", (t2) => {
      this.logger.fatal(`Fatal socket error: ${t2.message}`), this.events.emit(C3.error, t2), this.logger.fatal("Fatal socket error received, closing transport"), this.transportClose();
    }), y5(this, "registerProviderListeners", () => {
      this.provider.on(L2.payload, this.onPayloadHandler), this.provider.on(L2.connect, this.onConnectHandler), this.provider.on(L2.disconnect, this.onDisconnectHandler), this.provider.on(L2.error, this.onProviderErrorHandler);
    }), this.core = e3.core, this.logger = typeof e3.logger < "u" && typeof e3.logger != "string" ? E2(e3.logger, this.name) : (0, import_pino2.default)(k2({ level: e3.logger || Nt3 })), this.messages = new Ei2(this.logger, e3.core), this.subscriber = new Ci2(this, this.logger), this.publisher = new Gn2(this, this.logger), this.relayUrl = (e3 == null ? void 0 : e3.relayUrl) || Ue3, this.projectId = e3.projectId, Ds() ? this.packageName = Vs() : Ms() && (this.bundleId = Vs()), this.provider = {};
  }
  async init() {
    this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.transportOpen().catch((e3) => this.logger.warn(e3, e3 == null ? void 0 : e3.message));
  }
  get context() {
    return y3(this.logger);
  }
  get connected() {
    var e3, t2, i6;
    return ((i6 = (t2 = (e3 = this.provider) == null ? void 0 : e3.connection) == null ? void 0 : t2.socket) == null ? void 0 : i6.readyState) === 1 || false;
  }
  get connecting() {
    var e3, t2, i6;
    return ((i6 = (t2 = (e3 = this.provider) == null ? void 0 : e3.connection) == null ? void 0 : t2.socket) == null ? void 0 : i6.readyState) === 0 || this.connectPromise !== void 0 || false;
  }
  async publish(e3, t2, i6) {
    this.isInitialized(), await this.publisher.publish(e3, t2, i6), await this.recordMessageEvent({ topic: e3, message: t2, publishedAt: Date.now(), transportType: Q3.relay }, le3.outbound);
  }
  async subscribe(e3, t2) {
    var i6, s4, n6;
    this.isInitialized(), (!(t2 != null && t2.transportType) || (t2 == null ? void 0 : t2.transportType) === "relay") && await this.toEstablishConnection();
    const o6 = typeof ((i6 = t2 == null ? void 0 : t2.internal) == null ? void 0 : i6.throwOnFailedPublish) > "u" ? true : (s4 = t2 == null ? void 0 : t2.internal) == null ? void 0 : s4.throwOnFailedPublish;
    let a4 = ((n6 = this.subscriber.topicMap.get(e3)) == null ? void 0 : n6[0]) || "", c8;
    const h7 = (l9) => {
      l9.topic === e3 && (this.subscriber.off($.created, h7), c8());
    };
    return await Promise.all([new Promise((l9) => {
      c8 = l9, this.subscriber.on($.created, h7);
    }), new Promise(async (l9, d6) => {
      a4 = await this.subscriber.subscribe(e3, Si2({ internal: { throwOnFailedPublish: o6 } }, t2)).catch((g4) => {
        o6 && d6(g4);
      }) || a4, l9();
    })]), a4;
  }
  async unsubscribe(e3, t2) {
    this.isInitialized(), await this.subscriber.unsubscribe(e3, t2);
  }
  on(e3, t2) {
    this.events.on(e3, t2);
  }
  once(e3, t2) {
    this.events.once(e3, t2);
  }
  off(e3, t2) {
    this.events.off(e3, t2);
  }
  removeListener(e3, t2) {
    this.events.removeListener(e3, t2);
  }
  async transportDisconnect() {
    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await ei(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
  }
  async transportClose() {
    this.transportExplicitlyClosed = true, await this.transportDisconnect();
  }
  async transportOpen(e3) {
    if (!this.subscriber.hasAnyTopics) {
      this.logger.warn("Starting WS connection skipped because the client has no topics to work with.");
      return;
    }
    if (this.connectPromise ? (this.logger.debug({}, "Waiting for existing connection attempt to resolve..."), await this.connectPromise, this.logger.debug({}, "Existing connection attempt resolved")) : (this.connectPromise = new Promise(async (t2, i6) => {
      await this.connect(e3).then(t2).catch(i6).finally(() => {
        this.connectPromise = void 0;
      });
    }), await this.connectPromise), !this.connected) throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);
  }
  async restartTransport(e3) {
    this.logger.debug({}, "Restarting transport..."), !this.connectionAttemptInProgress && (this.relayUrl = e3 || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await Ca()) throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  async handleBatchMessageEvents(e3) {
    if ((e3 == null ? void 0 : e3.length) === 0) {
      this.logger.trace("Batch message events is empty. Ignoring...");
      return;
    }
    const t2 = e3.sort((i6, s4) => i6.publishedAt - s4.publishedAt);
    this.logger.debug(`Batch of ${t2.length} message events sorted`);
    for (const i6 of t2) try {
      await this.onMessageEvent(i6);
    } catch (s4) {
      this.logger.warn(s4, "Error while processing batch message event: " + (s4 == null ? void 0 : s4.message));
    }
    this.logger.trace(`Batch of ${t2.length} message events processed`);
  }
  async onLinkMessageEvent(e3, t2) {
    const { topic: i6 } = e3;
    if (!t2.sessionExists) {
      const s4 = si(import_time4.FIVE_MINUTES), n6 = { topic: i6, expiry: s4, relay: { protocol: "irn" }, active: false };
      await this.core.pairing.pairings.set(i6, n6);
    }
    this.events.emit(C3.message, e3), await this.recordMessageEvent(e3, le3.inbound);
  }
  async connect(e3) {
    await this.confirmOnlineStateOrThrow(), e3 && e3 !== this.relayUrl && (this.relayUrl = e3, await this.transportDisconnect()), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
    let t2 = 1;
    for (; t2 < 6; ) {
      try {
        if (this.transportExplicitlyClosed) break;
        this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t2}...`), await this.createProvider(), await new Promise(async (i6, s4) => {
          const n6 = () => {
            s4(new Error("Connection interrupted while trying to connect"));
          };
          this.provider.once(L2.disconnect, n6), await ei(new Promise((o6, a4) => {
            this.provider.connect().then(o6).catch(a4);
          }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((o6) => {
            s4(o6);
          }).finally(() => {
            this.provider.off(L2.disconnect, n6), clearTimeout(this.reconnectTimeout);
          }), await new Promise(async (o6, a4) => {
            const c8 = () => {
              s4(new Error("Connection interrupted while trying to subscribe"));
            };
            this.provider.once(L2.disconnect, c8), await this.subscriber.start().then(o6).catch(a4).finally(() => {
              this.provider.off(L2.disconnect, c8);
            });
          }), this.hasExperiencedNetworkDisruption = false, i6();
        });
      } catch (i6) {
        await this.subscriber.stop();
        const s4 = i6;
        this.logger.warn({}, s4.message), this.hasExperiencedNetworkDisruption = true;
      } finally {
        this.connectionAttemptInProgress = false;
      }
      if (this.connected) {
        this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t2}`);
        break;
      }
      await new Promise((i6) => setTimeout(i6, (0, import_time4.toMiliseconds)(t2 * 1))), t2++;
    }
  }
  startPingTimeout() {
    var e3, t2, i6, s4, n6;
    if (We2()) try {
      (t2 = (e3 = this.provider) == null ? void 0 : e3.connection) != null && t2.socket && ((n6 = (s4 = (i6 = this.provider) == null ? void 0 : i6.connection) == null ? void 0 : s4.socket) == null || n6.on("ping", () => {
        this.resetPingTimeout();
      })), this.resetPingTimeout();
    } catch (o6) {
      this.logger.warn(o6, o6 == null ? void 0 : o6.message);
    }
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e3 = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new o4(new f5(Fs({ sdkVersion: _e3, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e3, useOnCloseEvent: true, bundleId: this.bundleId, packageName: this.packageName }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e3, t2) {
    const { topic: i6, message: s4 } = e3;
    await this.messages.set(i6, s4, t2);
  }
  async shouldIgnoreMessageEvent(e3) {
    const { topic: t2, message: i6 } = e3;
    if (!i6 || i6.length === 0) return this.logger.warn(`Ignoring invalid/empty message: ${i6}`), true;
    if (!await this.subscriber.isKnownTopic(t2)) return this.logger.warn(`Ignoring message for unknown topic ${t2}`), true;
    const s4 = this.messages.has(t2, i6);
    return s4 && this.logger.warn(`Ignoring duplicate message: ${i6}`), s4;
  }
  async onProviderPayload(e3) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e3 }), isJsonRpcRequest(e3)) {
      if (!e3.method.endsWith(zt3)) return;
      const t2 = e3.params, { topic: i6, message: s4, publishedAt: n6, attestation: o6 } = t2.data, a4 = { topic: i6, message: s4, publishedAt: n6, transportType: Q3.relay, attestation: o6 };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(Si2({ type: "event", event: t2.id }, a4)), this.events.emit(t2.id, a4), await this.acknowledgePayload(e3), await this.onMessageEvent(a4);
    } else isJsonRpcResponse(e3) && this.events.emit(C3.message_ack, e3);
  }
  async onMessageEvent(e3) {
    await this.shouldIgnoreMessageEvent(e3) || (await this.recordMessageEvent(e3, le3.inbound), this.events.emit(C3.message, e3));
  }
  async acknowledgePayload(e3) {
    const t2 = formatJsonRpcResult(e3.id, true);
    await this.provider.connection.send(t2);
  }
  unregisterProviderListeners() {
    this.provider.off(L2.payload, this.onPayloadHandler), this.provider.off(L2.connect, this.onConnectHandler), this.provider.off(L2.disconnect, this.onDisconnectHandler), this.provider.off(L2.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
  }
  async registerEventListeners() {
    let e3 = await Ca();
    La(async (t2) => {
      e3 !== t2 && (e3 = t2, t2 ? await this.transportOpen().catch((i6) => this.logger.error(i6, i6 == null ? void 0 : i6.message)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
    }), this.core.heartbeat.on(r2.pulse, async () => {
      if (!this.transportExplicitlyClosed && !this.connected && ja()) try {
        await this.confirmOnlineStateOrThrow(), await this.transportOpen();
      } catch (t2) {
        this.logger.warn(t2, t2 == null ? void 0 : t2.message);
      }
    });
  }
  async onProviderDisconnect() {
    clearTimeout(this.pingTimeout), this.events.emit(C3.disconnect), this.connectionAttemptInProgress = false, !this.reconnectInProgress && (this.reconnectInProgress = true, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async () => {
      await this.transportOpen().catch((e3) => this.logger.error(e3, e3 == null ? void 0 : e3.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = false;
    }, (0, import_time4.toMiliseconds)(Lt3)))));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
  async toEstablishConnection() {
    if (await this.confirmOnlineStateOrThrow(), !this.connected) {
      if (this.connectPromise) {
        await this.connectPromise;
        return;
      }
      await this.connect();
    }
  }
};
function ro3(r4, e3) {
  return r4 === e3 || Number.isNaN(r4) && Number.isNaN(e3);
}
function Ri2(r4) {
  return Object.getOwnPropertySymbols(r4).filter((e3) => Object.prototype.propertyIsEnumerable.call(r4, e3));
}
function Ai2(r4) {
  return r4 == null ? r4 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(r4);
}
var no3 = "[object RegExp]";
var oo3 = "[object String]";
var ao3 = "[object Number]";
var co3 = "[object Boolean]";
var xi2 = "[object Arguments]";
var ho3 = "[object Symbol]";
var lo3 = "[object Date]";
var uo3 = "[object Map]";
var go3 = "[object Set]";
var po3 = "[object Array]";
var yo3 = "[object Function]";
var bo3 = "[object ArrayBuffer]";
var Je3 = "[object Object]";
var mo3 = "[object Error]";
var fo3 = "[object DataView]";
var Do3 = "[object Uint8Array]";
var vo3 = "[object Uint8ClampedArray]";
var wo3 = "[object Uint16Array]";
var _o3 = "[object Uint32Array]";
var Eo3 = "[object BigUint64Array]";
var Io3 = "[object Int8Array]";
var To3 = "[object Int16Array]";
var Co3 = "[object Int32Array]";
var Po3 = "[object BigInt64Array]";
var So3 = "[object Float32Array]";
var Oo3 = "[object Float64Array]";
function Ro3() {
}
function Ni2(r4) {
  if (!r4 || typeof r4 != "object") return false;
  const e3 = Object.getPrototypeOf(r4);
  return e3 === null || e3 === Object.prototype || Object.getPrototypeOf(e3) === null ? Object.prototype.toString.call(r4) === "[object Object]" : false;
}
function Ao3(r4, e3, t2) {
  return pe3(r4, e3, void 0, void 0, void 0, void 0, t2);
}
function pe3(r4, e3, t2, i6, s4, n6, o6) {
  const a4 = o6(r4, e3, t2, i6, s4, n6);
  if (a4 !== void 0) return a4;
  if (typeof r4 == typeof e3) switch (typeof r4) {
    case "bigint":
    case "string":
    case "boolean":
    case "symbol":
    case "undefined":
      return r4 === e3;
    case "number":
      return r4 === e3 || Object.is(r4, e3);
    case "function":
      return r4 === e3;
    case "object":
      return ye3(r4, e3, n6, o6);
  }
  return ye3(r4, e3, n6, o6);
}
function ye3(r4, e3, t2, i6) {
  if (Object.is(r4, e3)) return true;
  let s4 = Ai2(r4), n6 = Ai2(e3);
  if (s4 === xi2 && (s4 = Je3), n6 === xi2 && (n6 = Je3), s4 !== n6) return false;
  switch (s4) {
    case oo3:
      return r4.toString() === e3.toString();
    case ao3: {
      const c8 = r4.valueOf(), h7 = e3.valueOf();
      return ro3(c8, h7);
    }
    case co3:
    case lo3:
    case ho3:
      return Object.is(r4.valueOf(), e3.valueOf());
    case no3:
      return r4.source === e3.source && r4.flags === e3.flags;
    case yo3:
      return r4 === e3;
  }
  t2 = t2 ?? /* @__PURE__ */ new Map();
  const o6 = t2.get(r4), a4 = t2.get(e3);
  if (o6 != null && a4 != null) return o6 === e3;
  t2.set(r4, e3), t2.set(e3, r4);
  try {
    switch (s4) {
      case uo3: {
        if (r4.size !== e3.size) return false;
        for (const [c8, h7] of r4.entries()) if (!e3.has(c8) || !pe3(h7, e3.get(c8), c8, r4, e3, t2, i6)) return false;
        return true;
      }
      case go3: {
        if (r4.size !== e3.size) return false;
        const c8 = Array.from(r4.values()), h7 = Array.from(e3.values());
        for (let l9 = 0; l9 < c8.length; l9++) {
          const d6 = c8[l9], g4 = h7.findIndex((_3) => pe3(d6, _3, void 0, r4, e3, t2, i6));
          if (g4 === -1) return false;
          h7.splice(g4, 1);
        }
        return true;
      }
      case po3:
      case Do3:
      case vo3:
      case wo3:
      case _o3:
      case Eo3:
      case Io3:
      case To3:
      case Co3:
      case Po3:
      case So3:
      case Oo3: {
        if (typeof Buffer < "u" && Buffer.isBuffer(r4) !== Buffer.isBuffer(e3) || r4.length !== e3.length) return false;
        for (let c8 = 0; c8 < r4.length; c8++) if (!pe3(r4[c8], e3[c8], c8, r4, e3, t2, i6)) return false;
        return true;
      }
      case bo3:
        return r4.byteLength !== e3.byteLength ? false : ye3(new Uint8Array(r4), new Uint8Array(e3), t2, i6);
      case fo3:
        return r4.byteLength !== e3.byteLength || r4.byteOffset !== e3.byteOffset ? false : ye3(new Uint8Array(r4), new Uint8Array(e3), t2, i6);
      case mo3:
        return r4.name === e3.name && r4.message === e3.message;
      case Je3: {
        if (!(ye3(r4.constructor, e3.constructor, t2, i6) || Ni2(r4) && Ni2(e3))) return false;
        const h7 = [...Object.keys(r4), ...Ri2(r4)], l9 = [...Object.keys(e3), ...Ri2(e3)];
        if (h7.length !== l9.length) return false;
        for (let d6 = 0; d6 < h7.length; d6++) {
          const g4 = h7[d6], _3 = r4[g4];
          if (!Object.hasOwn(e3, g4)) return false;
          const u5 = e3[g4];
          if (!pe3(_3, u5, g4, r4, e3, t2, i6)) return false;
        }
        return true;
      }
      default:
        return false;
    }
  } finally {
    t2.delete(r4), t2.delete(e3);
  }
}
function xo3(r4, e3) {
  return Ao3(r4, e3, Ro3);
}
var No3 = Object.defineProperty;
var $i2 = Object.getOwnPropertySymbols;
var $o3 = Object.prototype.hasOwnProperty;
var zo3 = Object.prototype.propertyIsEnumerable;
var Xe2 = (r4, e3, t2) => e3 in r4 ? No3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var zi2 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {})) $o3.call(e3, t2) && Xe2(r4, t2, e3[t2]);
  if ($i2) for (var t2 of $i2(e3)) zo3.call(e3, t2) && Xe2(r4, t2, e3[t2]);
  return r4;
};
var z3 = (r4, e3, t2) => Xe2(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Li2 = class extends f4 {
  constructor(e3, t2, i6, s4 = B2, n6 = void 0) {
    super(e3, t2, i6, s4), this.core = e3, this.logger = t2, this.name = i6, z3(this, "map", /* @__PURE__ */ new Map()), z3(this, "version", kt3), z3(this, "cached", []), z3(this, "initialized", false), z3(this, "getKey"), z3(this, "storagePrefix", B2), z3(this, "recentlyDeleted", []), z3(this, "recentlyDeletedLimit", 200), z3(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((o6) => {
        this.getKey && o6 !== null && !kt2(o6) ? this.map.set(this.getKey(o6), o6) : ya(o6) ? this.map.set(o6.id, o6) : ma(o6) && this.map.set(o6.topic, o6);
      }), this.cached = [], this.initialized = true);
    }), z3(this, "set", async (o6, a4) => {
      this.isInitialized(), this.map.has(o6) ? await this.update(o6, a4) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: o6, value: a4 }), this.map.set(o6, a4), await this.persist());
    }), z3(this, "get", (o6) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: o6 }), this.getData(o6))), z3(this, "getAll", (o6) => (this.isInitialized(), o6 ? this.values.filter((a4) => Object.keys(o6).every((c8) => xo3(a4[c8], o6[c8]))) : this.values)), z3(this, "update", async (o6, a4) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: o6, update: a4 });
      const c8 = zi2(zi2({}, this.getData(o6)), a4);
      this.map.set(o6, c8), await this.persist();
    }), z3(this, "delete", async (o6, a4) => {
      this.isInitialized(), this.map.has(o6) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: o6, reason: a4 }), this.map.delete(o6), this.addToRecentlyDeleted(o6), await this.persist());
    }), this.logger = E2(t2, this.name), this.storagePrefix = s4, this.getKey = n6;
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  addToRecentlyDeleted(e3) {
    this.recentlyDeleted.push(e3), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
  }
  async setDataStore(e3) {
    await this.core.storage.setItem(this.storageKey, e3);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e3) {
    const t2 = this.map.get(e3);
    if (!t2) {
      if (this.recentlyDeleted.includes(e3)) {
        const { message: s4 } = Et2("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e3}`);
        throw this.logger.error(s4), new Error(s4);
      }
      const { message: i6 } = Et2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw this.logger.error(i6), new Error(i6);
    }
    return t2;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e3 = await this.getDataStore();
      if (typeof e3 > "u" || !e3.length) return;
      if (this.map.size) {
        const { message: t2 } = Et2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), new Error(t2);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e3);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var Lo3 = Object.defineProperty;
var ko3 = (r4, e3, t2) => e3 in r4 ? Lo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var p4 = (r4, e3, t2) => ko3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var ki2 = class {
  constructor(e3, t2) {
    this.core = e3, this.logger = t2, p4(this, "name", Mt3), p4(this, "version", Kt3), p4(this, "events", new import_events7.default()), p4(this, "pairings"), p4(this, "initialized", false), p4(this, "storagePrefix", B2), p4(this, "ignoredPayloadTypes", [ee]), p4(this, "registeredMethods", []), p4(this, "init", async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
    }), p4(this, "register", ({ methods: i6 }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...i6])];
    }), p4(this, "create", async (i6) => {
      this.isInitialized();
      const s4 = Mc(), n6 = await this.core.crypto.setSymKey(s4), o6 = si(import_time4.FIVE_MINUTES), a4 = { protocol: xt3 }, c8 = { topic: n6, expiry: o6, relay: a4, active: false, methods: i6 == null ? void 0 : i6.methods }, h7 = na({ protocol: this.core.protocol, version: this.core.version, topic: n6, symKey: s4, relay: a4, expiryTimestamp: o6, methods: i6 == null ? void 0 : i6.methods });
      return this.events.emit(re.create, c8), this.core.expirer.set(n6, o6), await this.pairings.set(n6, c8), await this.core.relayer.subscribe(n6, { transportType: i6 == null ? void 0 : i6.transportType }), { topic: n6, uri: h7 };
    }), p4(this, "pair", async (i6) => {
      this.isInitialized();
      const s4 = this.core.eventClient.createEvent({ properties: { topic: i6 == null ? void 0 : i6.uri, trace: [G3.pairing_started] } });
      this.isValidPair(i6, s4);
      const { topic: n6, symKey: o6, relay: a4, expiryTimestamp: c8, methods: h7 } = ea(i6.uri);
      s4.props.properties.topic = n6, s4.addTrace(G3.pairing_uri_validation_success), s4.addTrace(G3.pairing_uri_not_expired);
      let l9;
      if (this.pairings.keys.includes(n6)) {
        if (l9 = this.pairings.get(n6), s4.addTrace(G3.existing_pairing), l9.active) throw s4.setError(Y2.active_pairing_already_exists), new Error(`Pairing already exists: ${n6}. Please try again with a new connection URI.`);
        s4.addTrace(G3.pairing_not_expired);
      }
      const d6 = c8 || si(import_time4.FIVE_MINUTES), g4 = { topic: n6, relay: a4, expiry: d6, active: false, methods: h7 };
      this.core.expirer.set(n6, d6), await this.pairings.set(n6, g4), s4.addTrace(G3.store_new_pairing), i6.activatePairing && await this.activate({ topic: n6 }), this.events.emit(re.create, g4), s4.addTrace(G3.emit_inactive_pairing), this.core.crypto.keychain.has(n6) || await this.core.crypto.setSymKey(o6, n6), s4.addTrace(G3.subscribing_pairing_topic);
      try {
        await this.core.relayer.confirmOnlineStateOrThrow();
      } catch {
        s4.setError(Y2.no_internet_connection);
      }
      try {
        await this.core.relayer.subscribe(n6, { relay: a4 });
      } catch (_3) {
        throw s4.setError(Y2.subscribe_pairing_topic_failure), _3;
      }
      return s4.addTrace(G3.subscribe_pairing_topic_success), g4;
    }), p4(this, "activate", async ({ topic: i6 }) => {
      this.isInitialized();
      const s4 = si(import_time4.FIVE_MINUTES);
      this.core.expirer.set(i6, s4), await this.pairings.update(i6, { active: true, expiry: s4 });
    }), p4(this, "ping", async (i6) => {
      this.isInitialized(), await this.isValidPing(i6), this.logger.warn("ping() is deprecated and will be removed in the next major release.");
      const { topic: s4 } = i6;
      if (this.pairings.keys.includes(s4)) {
        const n6 = await this.sendRequest(s4, "wc_pairingPing", {}), { done: o6, resolve: a4, reject: c8 } = ti();
        this.events.once(fi("pairing_ping", n6), ({ error: h7 }) => {
          h7 ? c8(h7) : a4();
        }), await o6();
      }
    }), p4(this, "updateExpiry", async ({ topic: i6, expiry: s4 }) => {
      this.isInitialized(), await this.pairings.update(i6, { expiry: s4 });
    }), p4(this, "updateMetadata", async ({ topic: i6, metadata: s4 }) => {
      this.isInitialized(), await this.pairings.update(i6, { peerMetadata: s4 });
    }), p4(this, "getPairings", () => (this.isInitialized(), this.pairings.values)), p4(this, "disconnect", async (i6) => {
      this.isInitialized(), await this.isValidDisconnect(i6);
      const { topic: s4 } = i6;
      this.pairings.keys.includes(s4) && (await this.sendRequest(s4, "wc_pairingDelete", Kt2("USER_DISCONNECTED")), await this.deletePairing(s4));
    }), p4(this, "formatUriFromPairing", (i6) => {
      this.isInitialized();
      const { topic: s4, relay: n6, expiry: o6, methods: a4 } = i6, c8 = this.core.crypto.keychain.get(s4);
      return na({ protocol: this.core.protocol, version: this.core.version, topic: s4, symKey: c8, relay: n6, expiryTimestamp: o6, methods: a4 });
    }), p4(this, "sendRequest", async (i6, s4, n6) => {
      const o6 = formatJsonRpcRequest(s4, n6), a4 = await this.core.crypto.encode(i6, o6), c8 = se2[s4].req;
      return this.core.history.set(i6, o6), this.core.relayer.publish(i6, a4, c8), o6.id;
    }), p4(this, "sendResult", async (i6, s4, n6) => {
      const o6 = formatJsonRpcResult(i6, n6), a4 = await this.core.crypto.encode(s4, o6), c8 = (await this.core.history.get(s4, i6)).request.method, h7 = se2[c8].res;
      await this.core.relayer.publish(s4, a4, h7), await this.core.history.resolve(o6);
    }), p4(this, "sendError", async (i6, s4, n6) => {
      const o6 = formatJsonRpcError(i6, n6), a4 = await this.core.crypto.encode(s4, o6), c8 = (await this.core.history.get(s4, i6)).request.method, h7 = se2[c8] ? se2[c8].res : se2.unregistered_method.res;
      await this.core.relayer.publish(s4, a4, h7), await this.core.history.resolve(o6);
    }), p4(this, "deletePairing", async (i6, s4) => {
      await this.core.relayer.unsubscribe(i6), await Promise.all([this.pairings.delete(i6, Kt2("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(i6), s4 ? Promise.resolve() : this.core.expirer.del(i6)]);
    }), p4(this, "cleanup", async () => {
      const i6 = this.pairings.getAll().filter((s4) => ii(s4.expiry));
      await Promise.all(i6.map((s4) => this.deletePairing(s4.topic)));
    }), p4(this, "onRelayEventRequest", async (i6) => {
      const { topic: s4, payload: n6 } = i6;
      switch (n6.method) {
        case "wc_pairingPing":
          return await this.onPairingPingRequest(s4, n6);
        case "wc_pairingDelete":
          return await this.onPairingDeleteRequest(s4, n6);
        default:
          return await this.onUnknownRpcMethodRequest(s4, n6);
      }
    }), p4(this, "onRelayEventResponse", async (i6) => {
      const { topic: s4, payload: n6 } = i6, o6 = (await this.core.history.get(s4, n6.id)).request.method;
      switch (o6) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(s4, n6);
        default:
          return this.onUnknownRpcMethodResponse(o6);
      }
    }), p4(this, "onPairingPingRequest", async (i6, s4) => {
      const { id: n6 } = s4;
      try {
        this.isValidPing({ topic: i6 }), await this.sendResult(n6, i6, true), this.events.emit(re.ping, { id: n6, topic: i6 });
      } catch (o6) {
        await this.sendError(n6, i6, o6), this.logger.error(o6);
      }
    }), p4(this, "onPairingPingResponse", (i6, s4) => {
      const { id: n6 } = s4;
      setTimeout(() => {
        isJsonRpcResult(s4) ? this.events.emit(fi("pairing_ping", n6), {}) : isJsonRpcError(s4) && this.events.emit(fi("pairing_ping", n6), { error: s4.error });
      }, 500);
    }), p4(this, "onPairingDeleteRequest", async (i6, s4) => {
      const { id: n6 } = s4;
      try {
        this.isValidDisconnect({ topic: i6 }), await this.deletePairing(i6), this.events.emit(re.delete, { id: n6, topic: i6 });
      } catch (o6) {
        await this.sendError(n6, i6, o6), this.logger.error(o6);
      }
    }), p4(this, "onUnknownRpcMethodRequest", async (i6, s4) => {
      const { id: n6, method: o6 } = s4;
      try {
        if (this.registeredMethods.includes(o6)) return;
        const a4 = Kt2("WC_METHOD_UNSUPPORTED", o6);
        await this.sendError(n6, i6, a4), this.logger.error(a4);
      } catch (a4) {
        await this.sendError(n6, i6, a4), this.logger.error(a4);
      }
    }), p4(this, "onUnknownRpcMethodResponse", (i6) => {
      this.registeredMethods.includes(i6) || this.logger.error(Kt2("WC_METHOD_UNSUPPORTED", i6));
    }), p4(this, "isValidPair", (i6, s4) => {
      var n6;
      if (!Ba(i6)) {
        const { message: a4 } = Et2("MISSING_OR_INVALID", `pair() params: ${i6}`);
        throw s4.setError(Y2.malformed_pairing_uri), new Error(a4);
      }
      if (!ba(i6.uri)) {
        const { message: a4 } = Et2("MISSING_OR_INVALID", `pair() uri: ${i6.uri}`);
        throw s4.setError(Y2.malformed_pairing_uri), new Error(a4);
      }
      const o6 = ea(i6 == null ? void 0 : i6.uri);
      if (!((n6 = o6 == null ? void 0 : o6.relay) != null && n6.protocol)) {
        const { message: a4 } = Et2("MISSING_OR_INVALID", "pair() uri#relay-protocol");
        throw s4.setError(Y2.malformed_pairing_uri), new Error(a4);
      }
      if (!(o6 != null && o6.symKey)) {
        const { message: a4 } = Et2("MISSING_OR_INVALID", "pair() uri#symKey");
        throw s4.setError(Y2.malformed_pairing_uri), new Error(a4);
      }
      if (o6 != null && o6.expiryTimestamp && (0, import_time4.toMiliseconds)(o6 == null ? void 0 : o6.expiryTimestamp) < Date.now()) {
        s4.setError(Y2.pairing_expired);
        const { message: a4 } = Et2("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
        throw new Error(a4);
      }
    }), p4(this, "isValidPing", async (i6) => {
      if (!Ba(i6)) {
        const { message: n6 } = Et2("MISSING_OR_INVALID", `ping() params: ${i6}`);
        throw new Error(n6);
      }
      const { topic: s4 } = i6;
      await this.isValidPairingTopic(s4);
    }), p4(this, "isValidDisconnect", async (i6) => {
      if (!Ba(i6)) {
        const { message: n6 } = Et2("MISSING_OR_INVALID", `disconnect() params: ${i6}`);
        throw new Error(n6);
      }
      const { topic: s4 } = i6;
      await this.isValidPairingTopic(s4);
    }), p4(this, "isValidPairingTopic", async (i6) => {
      if (!it2(i6, false)) {
        const { message: s4 } = Et2("MISSING_OR_INVALID", `pairing topic should be a string: ${i6}`);
        throw new Error(s4);
      }
      if (!this.pairings.keys.includes(i6)) {
        const { message: s4 } = Et2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${i6}`);
        throw new Error(s4);
      }
      if (ii(this.pairings.get(i6).expiry)) {
        await this.deletePairing(i6);
        const { message: s4 } = Et2("EXPIRED", `pairing topic: ${i6}`);
        throw new Error(s4);
      }
    }), this.core = e3, this.logger = E2(t2, this.name), this.pairings = new Li2(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return y3(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(C3.message, async (e3) => {
      const { topic: t2, message: i6, transportType: s4 } = e3;
      if (this.pairings.keys.includes(t2) && s4 !== Q3.link_mode && !this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(i6))) try {
        const n6 = await this.core.crypto.decode(t2, i6);
        isJsonRpcRequest(n6) ? (this.core.history.set(t2, n6), await this.onRelayEventRequest({ topic: t2, payload: n6 })) : isJsonRpcResponse(n6) && (await this.core.history.resolve(n6), await this.onRelayEventResponse({ topic: t2, payload: n6 }), this.core.history.delete(t2, n6.id)), await this.core.relayer.messages.ack(t2, i6);
      } catch (n6) {
        this.logger.error(n6);
      }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(M4.expired, async (e3) => {
      const { topic: t2 } = oi(e3.target);
      t2 && this.pairings.keys.includes(t2) && (await this.deletePairing(t2, true), this.events.emit(re.expire, { topic: t2 }));
    });
  }
};
var jo3 = Object.defineProperty;
var Uo3 = (r4, e3, t2) => e3 in r4 ? jo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var O4 = (r4, e3, t2) => Uo3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var ji2 = class extends I2 {
  constructor(e3, t2) {
    super(e3, t2), this.core = e3, this.logger = t2, O4(this, "records", /* @__PURE__ */ new Map()), O4(this, "events", new import_events7.EventEmitter()), O4(this, "name", Bt3), O4(this, "version", Vt3), O4(this, "cached", []), O4(this, "initialized", false), O4(this, "storagePrefix", B2), O4(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i6) => this.records.set(i6.id, i6)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), O4(this, "set", (i6, s4, n6) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: i6, request: s4, chainId: n6 }), this.records.has(s4.id)) return;
      const o6 = { id: s4.id, topic: i6, request: { method: s4.method, params: s4.params || null }, chainId: n6, expiry: si(import_time4.THIRTY_DAYS) };
      this.records.set(o6.id, o6), this.persist(), this.events.emit(F2.created, o6);
    }), O4(this, "resolve", async (i6) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: i6 }), !this.records.has(i6.id)) return;
      const s4 = await this.getRecord(i6.id);
      typeof s4.response > "u" && (s4.response = isJsonRpcError(i6) ? { error: i6.error } : { result: i6.result }, this.records.set(s4.id, s4), this.persist(), this.events.emit(F2.updated, s4));
    }), O4(this, "get", async (i6, s4) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: i6, id: s4 }), await this.getRecord(s4))), O4(this, "delete", (i6, s4) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: s4 }), this.values.forEach((n6) => {
        if (n6.topic === i6) {
          if (typeof s4 < "u" && n6.id !== s4) return;
          this.records.delete(n6.id), this.events.emit(F2.deleted, n6);
        }
      }), this.persist();
    }), O4(this, "exists", async (i6, s4) => (this.isInitialized(), this.records.has(s4) ? (await this.getRecord(s4)).topic === i6 : false)), O4(this, "on", (i6, s4) => {
      this.events.on(i6, s4);
    }), O4(this, "once", (i6, s4) => {
      this.events.once(i6, s4);
    }), O4(this, "off", (i6, s4) => {
      this.events.off(i6, s4);
    }), O4(this, "removeListener", (i6, s4) => {
      this.events.removeListener(i6, s4);
    }), this.logger = E2(t2, this.name);
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e3 = [];
    return this.values.forEach((t2) => {
      if (typeof t2.response < "u") return;
      const i6 = { topic: t2.topic, request: formatJsonRpcRequest(t2.request.method, t2.request.params, t2.id), chainId: t2.chainId };
      return e3.push(i6);
    }), e3;
  }
  async setJsonRpcRecords(e3) {
    await this.core.storage.setItem(this.storageKey, e3);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e3) {
    this.isInitialized();
    const t2 = this.records.get(e3);
    if (!t2) {
      const { message: i6 } = Et2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw new Error(i6);
    }
    return t2;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(F2.sync);
  }
  async restore() {
    try {
      const e3 = await this.getJsonRpcRecords();
      if (typeof e3 > "u" || !e3.length) return;
      if (this.records.size) {
        const { message: t2 } = Et2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), new Error(t2);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e3);
    }
  }
  registerEventListeners() {
    this.events.on(F2.created, (e3) => {
      const t2 = F2.created;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, record: e3 });
    }), this.events.on(F2.updated, (e3) => {
      const t2 = F2.updated;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, record: e3 });
    }), this.events.on(F2.deleted, (e3) => {
      const t2 = F2.deleted;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, record: e3 });
    }), this.core.heartbeat.on(r2.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.isInitialized();
      let e3 = false;
      this.records.forEach((t2) => {
        (0, import_time4.toMiliseconds)(t2.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t2.id}`), this.records.delete(t2.id), this.events.emit(F2.deleted, t2, false), e3 = true);
      }), e3 && this.persist();
    } catch (e3) {
      this.logger.warn(e3);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var Fo3 = Object.defineProperty;
var Mo3 = (r4, e3, t2) => e3 in r4 ? Fo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var A2 = (r4, e3, t2) => Mo3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Ui2 = class extends S2 {
  constructor(e3, t2) {
    super(e3, t2), this.core = e3, this.logger = t2, A2(this, "expirations", /* @__PURE__ */ new Map()), A2(this, "events", new import_events7.EventEmitter()), A2(this, "name", qt3), A2(this, "version", Gt3), A2(this, "cached", []), A2(this, "initialized", false), A2(this, "storagePrefix", B2), A2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i6) => this.expirations.set(i6.target, i6)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), A2(this, "has", (i6) => {
      try {
        const s4 = this.formatTarget(i6);
        return typeof this.getExpiration(s4) < "u";
      } catch {
        return false;
      }
    }), A2(this, "set", (i6, s4) => {
      this.isInitialized();
      const n6 = this.formatTarget(i6), o6 = { target: n6, expiry: s4 };
      this.expirations.set(n6, o6), this.checkExpiry(n6, o6), this.events.emit(M4.created, { target: n6, expiration: o6 });
    }), A2(this, "get", (i6) => {
      this.isInitialized();
      const s4 = this.formatTarget(i6);
      return this.getExpiration(s4);
    }), A2(this, "del", (i6) => {
      if (this.isInitialized(), this.has(i6)) {
        const s4 = this.formatTarget(i6), n6 = this.getExpiration(s4);
        this.expirations.delete(s4), this.events.emit(M4.deleted, { target: s4, expiration: n6 });
      }
    }), A2(this, "on", (i6, s4) => {
      this.events.on(i6, s4);
    }), A2(this, "once", (i6, s4) => {
      this.events.once(i6, s4);
    }), A2(this, "off", (i6, s4) => {
      this.events.off(i6, s4);
    }), A2(this, "removeListener", (i6, s4) => {
      this.events.removeListener(i6, s4);
    }), this.logger = E2(t2, this.name);
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e3) {
    if (typeof e3 == "string") return ni(e3);
    if (typeof e3 == "number") return ri(e3);
    const { message: t2 } = Et2("UNKNOWN_TYPE", `Target type: ${typeof e3}`);
    throw new Error(t2);
  }
  async setExpirations(e3) {
    await this.core.storage.setItem(this.storageKey, e3);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(M4.sync);
  }
  async restore() {
    try {
      const e3 = await this.getExpirations();
      if (typeof e3 > "u" || !e3.length) return;
      if (this.expirations.size) {
        const { message: t2 } = Et2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), new Error(t2);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e3);
    }
  }
  getExpiration(e3) {
    const t2 = this.expirations.get(e3);
    if (!t2) {
      const { message: i6 } = Et2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw this.logger.warn(i6), new Error(i6);
    }
    return t2;
  }
  checkExpiry(e3, t2) {
    const { expiry: i6 } = t2;
    (0, import_time4.toMiliseconds)(i6) - Date.now() <= 0 && this.expire(e3, t2);
  }
  expire(e3, t2) {
    this.expirations.delete(e3), this.events.emit(M4.expired, { target: e3, expiration: t2 });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e3, t2) => this.checkExpiry(t2, e3));
  }
  registerEventListeners() {
    this.core.heartbeat.on(r2.pulse, () => this.checkExpirations()), this.events.on(M4.created, (e3) => {
      const t2 = M4.created;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, data: e3 }), this.persist();
    }), this.events.on(M4.expired, (e3) => {
      const t2 = M4.expired;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, data: e3 }), this.persist();
    }), this.events.on(M4.deleted, (e3) => {
      const t2 = M4.deleted;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, data: e3 }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var Ko3 = Object.defineProperty;
var Bo3 = (r4, e3, t2) => e3 in r4 ? Ko3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var w4 = (r4, e3, t2) => Bo3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Fi2 = class extends M {
  constructor(e3, t2, i6) {
    super(e3, t2, i6), this.core = e3, this.logger = t2, this.store = i6, w4(this, "name", Wt3), w4(this, "abortController"), w4(this, "isDevEnv"), w4(this, "verifyUrlV3", Yt3), w4(this, "storagePrefix", B2), w4(this, "version", Le3), w4(this, "publicKey"), w4(this, "fetchPromise"), w4(this, "init", async () => {
      var s4;
      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time4.toMiliseconds)((s4 = this.publicKey) == null ? void 0 : s4.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
    }), w4(this, "register", async (s4) => {
      if (!zt2() || this.isDevEnv) return;
      const n6 = window.location.origin, { id: o6, decryptedId: a4 } = s4, c8 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${n6}&id=${o6}&decryptedId=${a4}`;
      try {
        const h7 = (0, import_window_getters2.getDocument)(), l9 = this.startAbortTimer(import_time4.ONE_SECOND * 5), d6 = await new Promise((g4, _3) => {
          const u5 = () => {
            window.removeEventListener("message", x6), h7.body.removeChild(b6), _3("attestation aborted");
          };
          this.abortController.signal.addEventListener("abort", u5);
          const b6 = h7.createElement("iframe");
          b6.src = c8, b6.style.display = "none", b6.addEventListener("error", u5, { signal: this.abortController.signal });
          const x6 = (I5) => {
            if (I5.data && typeof I5.data == "string") try {
              const D3 = JSON.parse(I5.data);
              if (D3.type === "verify_attestation") {
                if (sn(D3.attestation).payload.id !== o6) return;
                clearInterval(l9), h7.body.removeChild(b6), this.abortController.signal.removeEventListener("abort", u5), window.removeEventListener("message", x6), g4(D3.attestation === null ? "" : D3.attestation);
              }
            } catch (D3) {
              this.logger.warn(D3);
            }
          };
          h7.body.appendChild(b6), window.addEventListener("message", x6, { signal: this.abortController.signal });
        });
        return this.logger.debug("jwt attestation", d6), d6;
      } catch (h7) {
        this.logger.warn(h7);
      }
      return "";
    }), w4(this, "resolve", async (s4) => {
      if (this.isDevEnv) return "";
      const { attestationId: n6, hash: o6, encryptedId: a4 } = s4;
      if (n6 === "") {
        this.logger.debug("resolve: attestationId is empty, skipping");
        return;
      }
      if (n6) {
        if (sn(n6).payload.id !== a4) return;
        const h7 = await this.isValidJwtAttestation(n6);
        if (h7) {
          if (!h7.isVerified) {
            this.logger.warn("resolve: jwt attestation: origin url not verified");
            return;
          }
          return h7;
        }
      }
      if (!o6) return;
      const c8 = this.getVerifyUrl(s4 == null ? void 0 : s4.verifyUrl);
      return this.fetchAttestation(o6, c8);
    }), w4(this, "fetchAttestation", async (s4, n6) => {
      this.logger.debug(`resolving attestation: ${s4} from url: ${n6}`);
      const o6 = this.startAbortTimer(import_time4.ONE_SECOND * 5), a4 = await fetch(`${n6}/attestation/${s4}?v2Supported=true`, { signal: this.abortController.signal });
      return clearTimeout(o6), a4.status === 200 ? await a4.json() : void 0;
    }), w4(this, "getVerifyUrl", (s4) => {
      let n6 = s4 || ue2;
      return Jt3.includes(n6) || (this.logger.info(`verify url: ${n6}, not included in trusted list, assigning default: ${ue2}`), n6 = ue2), n6;
    }), w4(this, "fetchPublicKey", async () => {
      try {
        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
        const s4 = this.startAbortTimer(import_time4.FIVE_SECONDS), n6 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
        return clearTimeout(s4), await n6.json();
      } catch (s4) {
        this.logger.warn(s4);
      }
    }), w4(this, "persistPublicKey", async (s4) => {
      this.logger.debug("persisting public key to local storage", s4), await this.store.setItem(this.storeKey, s4), this.publicKey = s4;
    }), w4(this, "removePublicKey", async () => {
      this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
    }), w4(this, "isValidJwtAttestation", async (s4) => {
      const n6 = await this.getPublicKey();
      try {
        if (n6) return this.validateAttestation(s4, n6);
      } catch (a4) {
        this.logger.error(a4), this.logger.warn("error validating attestation");
      }
      const o6 = await this.fetchAndPersistPublicKey();
      try {
        if (o6) return this.validateAttestation(s4, o6);
      } catch (a4) {
        this.logger.error(a4), this.logger.warn("error validating attestation");
      }
    }), w4(this, "getPublicKey", async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), w4(this, "fetchAndPersistPublicKey", async () => {
      if (this.fetchPromise) return await this.fetchPromise, this.publicKey;
      this.fetchPromise = new Promise(async (n6) => {
        const o6 = await this.fetchPublicKey();
        o6 && (await this.persistPublicKey(o6), n6(o6));
      });
      const s4 = await this.fetchPromise;
      return this.fetchPromise = void 0, s4;
    }), w4(this, "validateAttestation", (s4, n6) => {
      const o6 = Jc(s4, n6.publicKey), a4 = { hasExpired: (0, import_time4.toMiliseconds)(o6.exp) < Date.now(), payload: o6 };
      if (a4.hasExpired) throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
      return { origin: a4.payload.origin, isScam: a4.payload.isScam, isVerified: a4.payload.isVerified };
    }), this.logger = E2(t2, this.name), this.abortController = new AbortController(), this.isDevEnv = di(), this.init();
  }
  get storeKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
  }
  get context() {
    return y3(this.logger);
  }
  startAbortTimer(e3) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time4.toMiliseconds)(e3));
  }
};
var Vo3 = Object.defineProperty;
var qo3 = (r4, e3, t2) => e3 in r4 ? Vo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var Mi2 = (r4, e3, t2) => qo3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Ki2 = class extends O3 {
  constructor(e3, t2) {
    super(e3, t2), this.projectId = e3, this.logger = t2, Mi2(this, "context", Xt3), Mi2(this, "registerDeviceToken", async (i6) => {
      const { clientId: s4, token: n6, notificationType: o6, enableEncrypted: a4 = false } = i6, c8 = `${Zt3}/${this.projectId}/clients`;
      await fetch(c8, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: s4, type: o6, token: n6, always_raw: a4 }) });
    }), this.logger = E2(t2, this.context);
  }
};
var Go3 = Object.defineProperty;
var Bi2 = Object.getOwnPropertySymbols;
var Wo3 = Object.prototype.hasOwnProperty;
var Ho3 = Object.prototype.propertyIsEnumerable;
var Ze2 = (r4, e3, t2) => e3 in r4 ? Go3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var be3 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {})) Wo3.call(e3, t2) && Ze2(r4, t2, e3[t2]);
  if (Bi2) for (var t2 of Bi2(e3)) Ho3.call(e3, t2) && Ze2(r4, t2, e3[t2]);
  return r4;
};
var E3 = (r4, e3, t2) => Ze2(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Vi2 = class extends R {
  constructor(e3, t2, i6 = true) {
    super(e3, t2, i6), this.core = e3, this.logger = t2, E3(this, "context", ei2), E3(this, "storagePrefix", B2), E3(this, "storageVersion", Qt3), E3(this, "events", /* @__PURE__ */ new Map()), E3(this, "shouldPersist", false), E3(this, "init", async () => {
      if (!di()) try {
        const s4 = { eventId: li(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: fr2(this.core.relayer.protocol, this.core.relayer.version, _e3) } } };
        await this.sendEvent([s4]);
      } catch (s4) {
        this.logger.warn(s4);
      }
    }), E3(this, "createEvent", (s4) => {
      const { event: n6 = "ERROR", type: o6 = "", properties: { topic: a4, trace: c8 } } = s4, h7 = li(), l9 = this.core.projectId || "", d6 = Date.now(), g4 = be3({ eventId: h7, timestamp: d6, props: { event: n6, type: o6, properties: { topic: a4, trace: c8 } }, bundleId: l9, domain: this.getAppDomain() }, this.setMethods(h7));
      return this.telemetryEnabled && (this.events.set(h7, g4), this.shouldPersist = true), g4;
    }), E3(this, "getEvent", (s4) => {
      const { eventId: n6, topic: o6 } = s4;
      if (n6) return this.events.get(n6);
      const a4 = Array.from(this.events.values()).find((c8) => c8.props.properties.topic === o6);
      if (a4) return be3(be3({}, a4), this.setMethods(a4.eventId));
    }), E3(this, "deleteEvent", (s4) => {
      const { eventId: n6 } = s4;
      this.events.delete(n6), this.shouldPersist = true;
    }), E3(this, "setEventListeners", () => {
      this.core.heartbeat.on(r2.pulse, async () => {
        this.shouldPersist && await this.persist(), this.events.forEach((s4) => {
          (0, import_time4.fromMiliseconds)(Date.now()) - (0, import_time4.fromMiliseconds)(s4.timestamp) > ti2 && (this.events.delete(s4.eventId), this.shouldPersist = true);
        });
      });
    }), E3(this, "setMethods", (s4) => ({ addTrace: (n6) => this.addTrace(s4, n6), setError: (n6) => this.setError(s4, n6) })), E3(this, "addTrace", (s4, n6) => {
      const o6 = this.events.get(s4);
      o6 && (o6.props.properties.trace.push(n6), this.events.set(s4, o6), this.shouldPersist = true);
    }), E3(this, "setError", (s4, n6) => {
      const o6 = this.events.get(s4);
      o6 && (o6.props.type = n6, o6.timestamp = Date.now(), this.events.set(s4, o6), this.shouldPersist = true);
    }), E3(this, "persist", async () => {
      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
    }), E3(this, "restore", async () => {
      try {
        const s4 = await this.core.storage.getItem(this.storageKey) || [];
        if (!s4.length) return;
        s4.forEach((n6) => {
          this.events.set(n6.eventId, be3(be3({}, n6), this.setMethods(n6.eventId)));
        });
      } catch (s4) {
        this.logger.warn(s4);
      }
    }), E3(this, "submit", async () => {
      if (!this.telemetryEnabled || this.events.size === 0) return;
      const s4 = [];
      for (const [n6, o6] of this.events) o6.props.type && s4.push(o6);
      if (s4.length !== 0) try {
        if ((await this.sendEvent(s4)).ok) for (const n6 of s4) this.events.delete(n6.eventId), this.shouldPersist = true;
      } catch (n6) {
        this.logger.warn(n6);
      }
    }), E3(this, "sendEvent", async (s4) => {
      const n6 = this.getAppDomain() ? "" : "&sp=desktop";
      return await fetch(`${ii2}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${_e3}${n6}`, { method: "POST", body: JSON.stringify(s4) });
    }), E3(this, "getAppDomain", () => or3().url), this.logger = E2(t2, this.context), this.telemetryEnabled = i6, i6 ? this.restore().then(async () => {
      await this.submit(), this.setEventListeners();
    }) : this.persist();
  }
  get storageKey() {
    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
  }
};
var Yo3 = Object.defineProperty;
var qi2 = Object.getOwnPropertySymbols;
var Jo3 = Object.prototype.hasOwnProperty;
var Xo2 = Object.prototype.propertyIsEnumerable;
var Qe3 = (r4, e3, t2) => e3 in r4 ? Yo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var Gi2 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {})) Jo3.call(e3, t2) && Qe3(r4, t2, e3[t2]);
  if (qi2) for (var t2 of qi2(e3)) Xo2.call(e3, t2) && Qe3(r4, t2, e3[t2]);
  return r4;
};
var v4 = (r4, e3, t2) => Qe3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Te3 = class _Te extends h4 {
  constructor(e3) {
    var t2;
    super(e3), v4(this, "protocol", ze2), v4(this, "version", Le3), v4(this, "name", he3), v4(this, "relayUrl"), v4(this, "projectId"), v4(this, "customStoragePrefix"), v4(this, "events", new import_events7.EventEmitter()), v4(this, "logger"), v4(this, "heartbeat"), v4(this, "relayer"), v4(this, "crypto"), v4(this, "storage"), v4(this, "history"), v4(this, "expirer"), v4(this, "pairing"), v4(this, "verify"), v4(this, "echoClient"), v4(this, "linkModeSupportedApps"), v4(this, "eventClient"), v4(this, "initialized", false), v4(this, "logChunkController"), v4(this, "on", (a4, c8) => this.events.on(a4, c8)), v4(this, "once", (a4, c8) => this.events.once(a4, c8)), v4(this, "off", (a4, c8) => this.events.off(a4, c8)), v4(this, "removeListener", (a4, c8) => this.events.removeListener(a4, c8)), v4(this, "dispatchEnvelope", ({ topic: a4, message: c8, sessionExists: h7 }) => {
      if (!a4 || !c8) return;
      const l9 = { topic: a4, message: c8, publishedAt: Date.now(), transportType: Q3.link_mode };
      this.relayer.onLinkMessageEvent(l9, { sessionExists: h7 });
    });
    const i6 = this.getGlobalCore(e3 == null ? void 0 : e3.customStoragePrefix);
    if (i6) try {
      return this.customStoragePrefix = i6.customStoragePrefix, this.logger = i6.logger, this.heartbeat = i6.heartbeat, this.crypto = i6.crypto, this.history = i6.history, this.expirer = i6.expirer, this.storage = i6.storage, this.relayer = i6.relayer, this.pairing = i6.pairing, this.verify = i6.verify, this.echoClient = i6.echoClient, this.linkModeSupportedApps = i6.linkModeSupportedApps, this.eventClient = i6.eventClient, this.initialized = i6.initialized, this.logChunkController = i6.logChunkController, i6;
    } catch (a4) {
      console.warn("Failed to copy global core", a4);
    }
    this.projectId = e3 == null ? void 0 : e3.projectId, this.relayUrl = (e3 == null ? void 0 : e3.relayUrl) || Ue3, this.customStoragePrefix = e3 != null && e3.customStoragePrefix ? `:${e3.customStoragePrefix}` : "";
    const s4 = k2({ level: typeof (e3 == null ? void 0 : e3.logger) == "string" && e3.logger ? e3.logger : Et3.logger, name: he3 }), { logger: n6, chunkLoggerController: o6 } = A({ opts: s4, maxSizeInBytes: e3 == null ? void 0 : e3.maxLogBlobSizeInBytes, loggerOverride: e3 == null ? void 0 : e3.logger });
    this.logChunkController = o6, (t2 = this.logChunkController) != null && t2.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
      var a4, c8;
      (a4 = this.logChunkController) != null && a4.downloadLogsBlobInBrowser && ((c8 = this.logChunkController) == null || c8.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
    }), this.logger = E2(n6, this.name), this.heartbeat = new i3(), this.crypto = new wi2(this, this.logger, e3 == null ? void 0 : e3.keychain), this.history = new ji2(this, this.logger), this.expirer = new Ui2(this, this.logger), this.storage = e3 != null && e3.storage ? e3.storage : new h2(Gi2(Gi2({}, It3), e3 == null ? void 0 : e3.storageOptions)), this.relayer = new Oi2({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new ki2(this, this.logger), this.verify = new Fi2(this, this.logger, this.storage), this.echoClient = new Ki2(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new Vi2(this, this.logger, e3 == null ? void 0 : e3.telemetryEnabled), this.setGlobalCore(this);
  }
  static async init(e3) {
    const t2 = new _Te(e3);
    await t2.initialize();
    const i6 = await t2.crypto.getClientId();
    return await t2.storage.setItem(jt3, i6), t2;
  }
  get context() {
    return y3(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async getLogsBlob() {
    var e3;
    return (e3 = this.logChunkController) == null ? void 0 : e3.logsToBlob({ clientId: await this.crypto.getClientId() });
  }
  async addLinkModeSupportedApp(e3) {
    this.linkModeSupportedApps.includes(e3) || (this.linkModeSupportedApps.push(e3), await this.storage.setItem(Fe2, this.linkModeSupportedApps));
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(Fe2) || [], this.initialized = true, this.logger.info("Core Initialization Success");
    } catch (e3) {
      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e3), this.logger.error(e3.message), e3;
    }
  }
  getGlobalCore(e3 = "") {
    try {
      if (this.isGlobalCoreDisabled()) return;
      const t2 = `_walletConnectCore_${e3}`, i6 = `${t2}_count`;
      return globalThis[i6] = (globalThis[i6] || 0) + 1, globalThis[i6] > 1 && console.warn(`WalletConnect Core is already initialized. This is probably a mistake and can lead to unexpected behavior. Init() was called ${globalThis[i6]} times.`), globalThis[t2];
    } catch (t2) {
      console.warn("Failed to get global WalletConnect core", t2);
      return;
    }
  }
  setGlobalCore(e3) {
    var t2;
    try {
      if (this.isGlobalCoreDisabled()) return;
      const i6 = `_walletConnectCore_${((t2 = e3.opts) == null ? void 0 : t2.customStoragePrefix) || ""}`;
      globalThis[i6] = e3;
    } catch (i6) {
      console.warn("Failed to set global WalletConnect core", i6);
    }
  }
  isGlobalCoreDisabled() {
    try {
      return typeof process < "u" && process.env.DISABLE_GLOBAL_CORE === "true";
    } catch {
      return true;
    }
  }
};
var Zo3 = Te3;

// node_modules/@walletconnect/sign-client/dist/index.es.js
var import_time5 = __toESM(require_cjs());
var import_events8 = __toESM(require_events());
var ke4 = "wc";
var De3 = 2;
var Le4 = "client";
var me3 = `${ke4}@${De3}:${Le4}:`;
var we3 = { name: Le4, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
var Me4 = "WALLETCONNECT_DEEPLINK_CHOICE";
var dt3 = "proposal";
var $e3 = "Proposal expired";
var ut3 = "session";
var J4 = import_time5.SEVEN_DAYS;
var gt3 = "engine";
var N11 = { wc_sessionPropose: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time5.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time5.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1119 } } };
var _e4 = { min: import_time5.FIVE_MINUTES, max: import_time5.SEVEN_DAYS };
var $2 = { idle: "IDLE", active: "ACTIVE" };
var yt2 = { eth_sendTransaction: { key: "" }, eth_sendRawTransaction: { key: "" }, wallet_sendCalls: { key: "" }, solana_signTransaction: { key: "signature" }, solana_signAllTransactions: { key: "transactions" }, solana_signAndSendTransaction: { key: "signature" }, sui_signAndExecuteTransaction: { key: "digest" }, sui_signTransaction: { key: "" }, hedera_signAndExecuteTransaction: { key: "transactionId" }, hedera_executeTransaction: { key: "transactionId" }, near_signTransaction: { key: "" }, near_signTransactions: { key: "" }, tron_signTransaction: { key: "txID" }, xrpl_signTransaction: { key: "" }, xrpl_signTransactionFor: { key: "" }, algo_signTxn: { key: "" }, sendTransfer: { key: "txid" }, stacks_stxTransfer: { key: "txId" }, polkadot_signTransaction: { key: "" }, cosmos_signDirect: { key: "" } };
var mt2 = "request";
var wt3 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
var _t3 = "wc";
var Et4 = "auth";
var ft2 = "authKeys";
var St4 = "pairingTopics";
var Rt4 = "requests";
var ae2 = `${_t3}@${1.5}:${Et4}:`;
var ce2 = `${ae2}:PUB_KEY`;
var Ns = Object.defineProperty;
var Os = Object.defineProperties;
var bs2 = Object.getOwnPropertyDescriptors;
var vt3 = Object.getOwnPropertySymbols;
var As = Object.prototype.hasOwnProperty;
var xs = Object.prototype.propertyIsEnumerable;
var Ke4 = (S5, o6, t2) => o6 in S5 ? Ns(S5, o6, { enumerable: true, configurable: true, writable: true, value: t2 }) : S5[o6] = t2;
var I3 = (S5, o6) => {
  for (var t2 in o6 || (o6 = {})) As.call(o6, t2) && Ke4(S5, t2, o6[t2]);
  if (vt3) for (var t2 of vt3(o6)) xs.call(o6, t2) && Ke4(S5, t2, o6[t2]);
  return S5;
};
var x4 = (S5, o6) => Os(S5, bs2(o6));
var c6 = (S5, o6, t2) => Ke4(S5, typeof o6 != "symbol" ? o6 + "" : o6, t2);
var Vs2 = class extends V {
  constructor(o6) {
    super(o6), c6(this, "name", gt3), c6(this, "events", new import_events8.default()), c6(this, "initialized", false), c6(this, "requestQueue", { state: $2.idle, queue: [] }), c6(this, "sessionRequestQueue", { state: $2.idle, queue: [] }), c6(this, "requestQueueDelay", import_time5.ONE_SECOND), c6(this, "expectedPairingMethodMap", /* @__PURE__ */ new Map()), c6(this, "recentlyDeletedMap", /* @__PURE__ */ new Map()), c6(this, "recentlyDeletedLimit", 200), c6(this, "relayMessageCache", []), c6(this, "pendingSessions", /* @__PURE__ */ new Map()), c6(this, "init", async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(N11) }), this.initialized = true, setTimeout(async () => {
        await this.processPendingMessageEvents(), this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, (0, import_time5.toMiliseconds)(this.requestQueueDelay)));
    }), c6(this, "connect", async (t2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      const e3 = x4(I3({}, t2), { requiredNamespaces: t2.requiredNamespaces || {}, optionalNamespaces: t2.optionalNamespaces || {} });
      await this.isValidConnect(e3), e3.optionalNamespaces = pa(e3.requiredNamespaces, e3.optionalNamespaces), e3.requiredNamespaces = {};
      const { pairingTopic: s4, requiredNamespaces: i6, optionalNamespaces: r4, sessionProperties: n6, scopedProperties: a4, relays: l9 } = e3;
      let p6 = s4, h7, u5 = false;
      try {
        if (p6) {
          const T4 = this.client.core.pairing.pairings.get(p6);
          this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."), u5 = T4.active;
        }
      } catch (T4) {
        throw this.client.logger.error(`connect() -> pairing.get(${p6}) failed`), T4;
      }
      if (!p6 || !u5) {
        const { topic: T4, uri: K4 } = await this.client.core.pairing.create();
        p6 = T4, h7 = K4;
      }
      if (!p6) {
        const { message: T4 } = Et2("NO_MATCHING_KEY", `connect() pairing topic: ${p6}`);
        throw new Error(T4);
      }
      const d6 = await this.client.core.crypto.generateKeyPair(), w6 = N11.wc_sessionPropose.req.ttl || import_time5.FIVE_MINUTES, m4 = si(w6), y7 = x4(I3(I3({ requiredNamespaces: i6, optionalNamespaces: r4, relays: l9 ?? [{ protocol: xt3 }], proposer: { publicKey: d6, metadata: this.client.metadata }, expiryTimestamp: m4, pairingTopic: p6 }, n6 && { sessionProperties: n6 }), a4 && { scopedProperties: a4 }), { id: payloadId() }), E6 = fi("session_connect", y7.id), { reject: _3, resolve: V4, done: C5 } = ti(w6, $e3), v6 = ({ id: T4 }) => {
        T4 === y7.id && (this.client.events.off("proposal_expire", v6), this.pendingSessions.delete(y7.id), this.events.emit(E6, { error: { message: $e3, code: 0 } }));
      };
      return this.client.events.on("proposal_expire", v6), this.events.once(E6, ({ error: T4, session: K4 }) => {
        this.client.events.off("proposal_expire", v6), T4 ? _3(T4) : K4 && V4(K4);
      }), await this.sendRequest({ topic: p6, method: "wc_sessionPropose", params: y7, throwOnFailedPublish: true, clientRpcId: y7.id }), await this.setProposal(y7.id, y7), { uri: h7, approval: C5 };
    }), c6(this, "pair", async (t2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        return await this.client.core.pairing.pair(t2);
      } catch (e3) {
        throw this.client.logger.error("pair() failed"), e3;
      }
    }), c6(this, "approve", async (t2) => {
      var e3, s4, i6;
      const r4 = this.client.core.eventClient.createEvent({ properties: { topic: (e3 = t2 == null ? void 0 : t2.id) == null ? void 0 : e3.toString(), trace: [tr3.session_approve_started] } });
      try {
        this.isInitialized(), await this.confirmOnlineStateOrThrow();
      } catch (q2) {
        throw r4.setError(ir3.no_internet_connection), q2;
      }
      try {
        await this.isValidProposalId(t2 == null ? void 0 : t2.id);
      } catch (q2) {
        throw this.client.logger.error(`approve() -> proposal.get(${t2 == null ? void 0 : t2.id}) failed`), r4.setError(ir3.proposal_not_found), q2;
      }
      try {
        await this.isValidApprove(t2);
      } catch (q2) {
        throw this.client.logger.error("approve() -> isValidApprove() failed"), r4.setError(ir3.session_approve_namespace_validation_failure), q2;
      }
      const { id: n6, relayProtocol: a4, namespaces: l9, sessionProperties: p6, scopedProperties: h7, sessionConfig: u5 } = t2, d6 = this.client.proposal.get(n6);
      this.client.core.eventClient.deleteEvent({ eventId: r4.eventId });
      const { pairingTopic: w6, proposer: m4, requiredNamespaces: y7, optionalNamespaces: E6 } = d6;
      let _3 = (s4 = this.client.core.eventClient) == null ? void 0 : s4.getEvent({ topic: w6 });
      _3 || (_3 = (i6 = this.client.core.eventClient) == null ? void 0 : i6.createEvent({ type: tr3.session_approve_started, properties: { topic: w6, trace: [tr3.session_approve_started, tr3.session_namespaces_validation_success] } }));
      const V4 = await this.client.core.crypto.generateKeyPair(), C5 = m4.publicKey, v6 = await this.client.core.crypto.generateSharedKey(V4, C5), T4 = I3(I3(I3({ relay: { protocol: a4 ?? "irn" }, namespaces: l9, controller: { publicKey: V4, metadata: this.client.metadata }, expiry: si(J4) }, p6 && { sessionProperties: p6 }), h7 && { scopedProperties: h7 }), u5 && { sessionConfig: u5 }), K4 = Q3.relay;
      _3.addTrace(tr3.subscribing_session_topic);
      try {
        await this.client.core.relayer.subscribe(v6, { transportType: K4 });
      } catch (q2) {
        throw _3.setError(ir3.subscribe_session_topic_failure), q2;
      }
      _3.addTrace(tr3.subscribe_session_topic_success);
      const fe5 = x4(I3({}, T4), { topic: v6, requiredNamespaces: y7, optionalNamespaces: E6, pairingTopic: w6, acknowledged: false, self: T4.controller, peer: { publicKey: m4.publicKey, metadata: m4.metadata }, controller: V4, transportType: Q3.relay });
      await this.client.session.set(v6, fe5), _3.addTrace(tr3.store_session);
      try {
        _3.addTrace(tr3.publishing_session_settle), await this.sendRequest({ topic: v6, method: "wc_sessionSettle", params: T4, throwOnFailedPublish: true }).catch((q2) => {
          throw _3 == null ? void 0 : _3.setError(ir3.session_settle_publish_failure), q2;
        }), _3.addTrace(tr3.session_settle_publish_success), _3.addTrace(tr3.publishing_session_approve), await this.sendResult({ id: n6, topic: w6, result: { relay: { protocol: a4 ?? "irn" }, responderPublicKey: V4 }, throwOnFailedPublish: true }).catch((q2) => {
          throw _3 == null ? void 0 : _3.setError(ir3.session_approve_publish_failure), q2;
        }), _3.addTrace(tr3.session_approve_publish_success);
      } catch (q2) {
        throw this.client.logger.error(q2), this.client.session.delete(v6, Kt2("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(v6), q2;
      }
      return this.client.core.eventClient.deleteEvent({ eventId: _3.eventId }), await this.client.core.pairing.updateMetadata({ topic: w6, metadata: m4.metadata }), await this.deleteProposal(n6), await this.client.core.pairing.activate({ topic: w6 }), await this.setExpiry(v6, si(J4)), { topic: v6, acknowledged: () => Promise.resolve(this.client.session.get(v6)) };
    }), c6(this, "reject", async (t2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidReject(t2);
      } catch (r4) {
        throw this.client.logger.error("reject() -> isValidReject() failed"), r4;
      }
      const { id: e3, reason: s4 } = t2;
      let i6;
      try {
        i6 = this.client.proposal.get(e3).pairingTopic;
      } catch (r4) {
        throw this.client.logger.error(`reject() -> proposal.get(${e3}) failed`), r4;
      }
      i6 && await this.sendError({ id: e3, topic: i6, error: s4, rpcOpts: N11.wc_sessionPropose.reject }), await this.deleteProposal(e3);
    }), c6(this, "update", async (t2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidUpdate(t2);
      } catch (h7) {
        throw this.client.logger.error("update() -> isValidUpdate() failed"), h7;
      }
      const { topic: e3, namespaces: s4 } = t2, { done: i6, resolve: r4, reject: n6 } = ti(), a4 = payloadId(), l9 = getBigIntRpcId().toString(), p6 = this.client.session.get(e3).namespaces;
      return this.events.once(fi("session_update", a4), ({ error: h7 }) => {
        h7 ? n6(h7) : r4();
      }), await this.client.session.update(e3, { namespaces: s4 }), await this.sendRequest({ topic: e3, method: "wc_sessionUpdate", params: { namespaces: s4 }, throwOnFailedPublish: true, clientRpcId: a4, relayRpcId: l9 }).catch((h7) => {
        this.client.logger.error(h7), this.client.session.update(e3, { namespaces: p6 }), n6(h7);
      }), { acknowledged: i6 };
    }), c6(this, "extend", async (t2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidExtend(t2);
      } catch (a4) {
        throw this.client.logger.error("extend() -> isValidExtend() failed"), a4;
      }
      const { topic: e3 } = t2, s4 = payloadId(), { done: i6, resolve: r4, reject: n6 } = ti();
      return this.events.once(fi("session_extend", s4), ({ error: a4 }) => {
        a4 ? n6(a4) : r4();
      }), await this.setExpiry(e3, si(J4)), this.sendRequest({ topic: e3, method: "wc_sessionExtend", params: {}, clientRpcId: s4, throwOnFailedPublish: true }).catch((a4) => {
        n6(a4);
      }), { acknowledged: i6 };
    }), c6(this, "request", async (t2) => {
      this.isInitialized();
      try {
        await this.isValidRequest(t2);
      } catch (y7) {
        throw this.client.logger.error("request() -> isValidRequest() failed"), y7;
      }
      const { chainId: e3, request: s4, topic: i6, expiry: r4 = N11.wc_sessionRequest.req.ttl } = t2, n6 = this.client.session.get(i6);
      (n6 == null ? void 0 : n6.transportType) === Q3.relay && await this.confirmOnlineStateOrThrow();
      const a4 = payloadId(), l9 = getBigIntRpcId().toString(), { done: p6, resolve: h7, reject: u5 } = ti(r4, "Request expired. Please try again.");
      this.events.once(fi("session_request", a4), ({ error: y7, result: E6 }) => {
        y7 ? u5(y7) : h7(E6);
      });
      const d6 = "wc_sessionRequest", w6 = this.getAppLinkIfEnabled(n6.peer.metadata, n6.transportType);
      if (w6) return await this.sendRequest({ clientRpcId: a4, relayRpcId: l9, topic: i6, method: d6, params: { request: x4(I3({}, s4), { expiryTimestamp: si(r4) }), chainId: e3 }, expiry: r4, throwOnFailedPublish: true, appLink: w6 }).catch((y7) => u5(y7)), this.client.events.emit("session_request_sent", { topic: i6, request: s4, chainId: e3, id: a4 }), await p6();
      const m4 = { request: x4(I3({}, s4), { expiryTimestamp: si(r4) }), chainId: e3 };
      return await Promise.all([new Promise(async (y7) => {
        await this.sendRequest({ clientRpcId: a4, relayRpcId: l9, topic: i6, method: d6, params: m4, expiry: r4, throwOnFailedPublish: true, tvf: this.getTVFParams(a4, m4) }).catch((E6) => u5(E6)), this.client.events.emit("session_request_sent", { topic: i6, request: s4, chainId: e3, id: a4 }), y7();
      }), new Promise(async (y7) => {
        var E6;
        if (!((E6 = n6.sessionConfig) != null && E6.disableDeepLink)) {
          const _3 = await ai(this.client.core.storage, Me4);
          await ci({ id: a4, topic: i6, wcDeepLink: _3 });
        }
        y7();
      }), p6()]).then((y7) => y7[2]);
    }), c6(this, "respond", async (t2) => {
      this.isInitialized(), await this.isValidRespond(t2);
      const { topic: e3, response: s4 } = t2, { id: i6 } = s4, r4 = this.client.session.get(e3);
      r4.transportType === Q3.relay && await this.confirmOnlineStateOrThrow();
      const n6 = this.getAppLinkIfEnabled(r4.peer.metadata, r4.transportType);
      isJsonRpcResult(s4) ? await this.sendResult({ id: i6, topic: e3, result: s4.result, throwOnFailedPublish: true, appLink: n6 }) : isJsonRpcError(s4) && await this.sendError({ id: i6, topic: e3, error: s4.error, appLink: n6 }), this.cleanupAfterResponse(t2);
    }), c6(this, "ping", async (t2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidPing(t2);
      } catch (s4) {
        throw this.client.logger.error("ping() -> isValidPing() failed"), s4;
      }
      const { topic: e3 } = t2;
      if (this.client.session.keys.includes(e3)) {
        const s4 = payloadId(), i6 = getBigIntRpcId().toString(), { done: r4, resolve: n6, reject: a4 } = ti();
        this.events.once(fi("session_ping", s4), ({ error: l9 }) => {
          l9 ? a4(l9) : n6();
        }), await Promise.all([this.sendRequest({ topic: e3, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s4, relayRpcId: i6 }), r4()]);
      } else this.client.core.pairing.pairings.keys.includes(e3) && (this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."), await this.client.core.pairing.ping({ topic: e3 }));
    }), c6(this, "emit", async (t2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(t2);
      const { topic: e3, event: s4, chainId: i6 } = t2, r4 = getBigIntRpcId().toString(), n6 = payloadId();
      await this.sendRequest({ topic: e3, method: "wc_sessionEvent", params: { event: s4, chainId: i6 }, throwOnFailedPublish: true, relayRpcId: r4, clientRpcId: n6 });
    }), c6(this, "disconnect", async (t2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(t2);
      const { topic: e3 } = t2;
      if (this.client.session.keys.includes(e3)) await this.sendRequest({ topic: e3, method: "wc_sessionDelete", params: Kt2("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: e3, emitEvent: false });
      else if (this.client.core.pairing.pairings.keys.includes(e3)) await this.client.core.pairing.disconnect({ topic: e3 });
      else {
        const { message: s4 } = Et2("MISMATCHED_TOPIC", `Session or pairing topic not found: ${e3}`);
        throw new Error(s4);
      }
    }), c6(this, "find", (t2) => (this.isInitialized(), this.client.session.getAll().filter((e3) => ga(e3, t2)))), c6(this, "getPendingSessionRequests", () => this.client.pendingRequest.getAll()), c6(this, "authenticate", async (t2, e3) => {
      var s4;
      this.isInitialized(), this.isValidAuthenticate(t2);
      const i6 = e3 && this.client.core.linkModeSupportedApps.includes(e3) && ((s4 = this.client.metadata.redirect) == null ? void 0 : s4.linkMode), r4 = i6 ? Q3.link_mode : Q3.relay;
      r4 === Q3.relay && await this.confirmOnlineStateOrThrow();
      const { chains: n6, statement: a4 = "", uri: l9, domain: p6, nonce: h7, type: u5, exp: d6, nbf: w6, methods: m4 = [], expiry: y7 } = t2, E6 = [...t2.resources || []], { topic: _3, uri: V4 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r4 });
      this.client.logger.info({ message: "Generated new pairing", pairing: { topic: _3, uri: V4 } });
      const C5 = await this.client.core.crypto.generateKeyPair(), v6 = qc(C5);
      if (await Promise.all([this.client.auth.authKeys.set(ce2, { responseTopic: v6, publicKey: C5 }), this.client.auth.pairingTopics.set(v6, { topic: v6, pairingTopic: _3 })]), await this.client.core.relayer.subscribe(v6, { transportType: r4 }), this.client.logger.info(`sending request to new pairing topic: ${_3}`), m4.length > 0) {
        const { namespace: O7 } = Fe(n6[0]);
        let k7 = xf(O7, "request", m4);
        Oe2(E6) && (k7 = vf(k7, E6.pop())), E6.push(k7);
      }
      const T4 = y7 && y7 > N11.wc_sessionAuthenticate.req.ttl ? y7 : N11.wc_sessionAuthenticate.req.ttl, K4 = { authPayload: { type: u5 ?? "caip122", chains: n6, statement: a4, aud: l9, domain: p6, version: "1", nonce: h7, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: d6, nbf: w6, resources: E6 }, requester: { publicKey: C5, metadata: this.client.metadata }, expiryTimestamp: si(T4) }, fe5 = { eip155: { chains: n6, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...m4])], events: ["chainChanged", "accountsChanged"] } }, q2 = { requiredNamespaces: {}, optionalNamespaces: fe5, relays: [{ protocol: "irn" }], pairingTopic: _3, proposer: { publicKey: C5, metadata: this.client.metadata }, expiryTimestamp: si(N11.wc_sessionPropose.req.ttl), id: payloadId() }, { done: Tt5, resolve: Ge4, reject: Se5 } = ti(T4, "Request expired"), te4 = payloadId(), le5 = fi("session_connect", q2.id), Re4 = fi("session_request", te4), pe5 = async ({ error: O7, session: k7 }) => {
        this.events.off(Re4, ve4), O7 ? Se5(O7) : k7 && Ge4({ session: k7 });
      }, ve4 = async (O7) => {
        var k7, je5, Fe4;
        if (await this.deletePendingAuthRequest(te4, { message: "fulfilled", code: 0 }), O7.error) {
          const ie4 = Kt2("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
          return O7.error.code === ie4.code ? void 0 : (this.events.off(le5, pe5), Se5(O7.error.message));
        }
        await this.deleteProposal(q2.id), this.events.off(le5, pe5);
        const { cacaos: Qe5, responder: Q5 } = O7.result, Te5 = [], He5 = [];
        for (const ie4 of Qe5) {
          await gf({ cacao: ie4, projectId: this.client.core.projectId }) || (this.client.logger.error(ie4, "Signature verification failed"), Se5(Kt2("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
          const { p: qe5 } = ie4, Pe5 = Oe2(qe5.resources), ze4 = [Mr2(qe5.iss)], qt5 = ln(qe5.iss);
          if (Pe5) {
            const Ne4 = Ef(Pe5), Pt5 = Bf(Pe5);
            Te5.push(...Ne4), ze4.push(...Pt5);
          }
          for (const Ne4 of ze4) He5.push(`${Ne4}:${qt5}`);
        }
        const se4 = await this.client.core.crypto.generateSharedKey(C5, Q5.publicKey);
        let he5;
        Te5.length > 0 && (he5 = { topic: se4, acknowledged: true, self: { publicKey: C5, metadata: this.client.metadata }, peer: Q5, controller: Q5.publicKey, expiry: si(J4), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: _3, namespaces: ha([...new Set(Te5)], [...new Set(He5)]), transportType: r4 }, await this.client.core.relayer.subscribe(se4, { transportType: r4 }), await this.client.session.set(se4, he5), _3 && await this.client.core.pairing.updateMetadata({ topic: _3, metadata: Q5.metadata }), he5 = this.client.session.get(se4)), (k7 = this.client.metadata.redirect) != null && k7.linkMode && (je5 = Q5.metadata.redirect) != null && je5.linkMode && (Fe4 = Q5.metadata.redirect) != null && Fe4.universal && e3 && (this.client.core.addLinkModeSupportedApp(Q5.metadata.redirect.universal), this.client.session.update(se4, { transportType: Q3.link_mode })), Ge4({ auths: Qe5, session: he5 });
      };
      this.events.once(le5, pe5), this.events.once(Re4, ve4);
      let Ie5;
      try {
        if (i6) {
          const O7 = formatJsonRpcRequest("wc_sessionAuthenticate", K4, te4);
          this.client.core.history.set(_3, O7);
          const k7 = await this.client.core.crypto.encode("", O7, { type: ge2, encoding: De2 });
          Ie5 = ra(e3, _3, k7);
        } else await Promise.all([this.sendRequest({ topic: _3, method: "wc_sessionAuthenticate", params: K4, expiry: t2.expiry, throwOnFailedPublish: true, clientRpcId: te4 }), this.sendRequest({ topic: _3, method: "wc_sessionPropose", params: q2, expiry: N11.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: q2.id })]);
      } catch (O7) {
        throw this.events.off(le5, pe5), this.events.off(Re4, ve4), O7;
      }
      return await this.setProposal(q2.id, q2), await this.setAuthRequest(te4, { request: x4(I3({}, K4), { verifyContext: {} }), pairingTopic: _3, transportType: r4 }), { uri: Ie5 ?? V4, response: Tt5 };
    }), c6(this, "approveSessionAuthenticate", async (t2) => {
      const { id: e3, auths: s4 } = t2, i6 = this.client.core.eventClient.createEvent({ properties: { topic: e3.toString(), trace: [sr3.authenticated_session_approve_started] } });
      try {
        this.isInitialized();
      } catch (y7) {
        throw i6.setError(rr3.no_internet_connection), y7;
      }
      const r4 = this.getPendingAuthRequest(e3);
      if (!r4) throw i6.setError(rr3.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${e3}`);
      const n6 = r4.transportType || Q3.relay;
      n6 === Q3.relay && await this.confirmOnlineStateOrThrow();
      const a4 = r4.requester.publicKey, l9 = await this.client.core.crypto.generateKeyPair(), p6 = qc(a4), h7 = { type: ee, receiverPublicKey: a4, senderPublicKey: l9 }, u5 = [], d6 = [];
      for (const y7 of s4) {
        if (!await gf({ cacao: y7, projectId: this.client.core.projectId })) {
          i6.setError(rr3.invalid_cacao);
          const v6 = Kt2("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
          throw await this.sendError({ id: e3, topic: p6, error: v6, encodeOpts: h7 }), new Error(v6.message);
        }
        i6.addTrace(sr3.cacaos_verified);
        const { p: E6 } = y7, _3 = Oe2(E6.resources), V4 = [Mr2(E6.iss)], C5 = ln(E6.iss);
        if (_3) {
          const v6 = Ef(_3), T4 = Bf(_3);
          u5.push(...v6), V4.push(...T4);
        }
        for (const v6 of V4) d6.push(`${v6}:${C5}`);
      }
      const w6 = await this.client.core.crypto.generateSharedKey(l9, a4);
      i6.addTrace(sr3.create_authenticated_session_topic);
      let m4;
      if ((u5 == null ? void 0 : u5.length) > 0) {
        m4 = { topic: w6, acknowledged: true, self: { publicKey: l9, metadata: this.client.metadata }, peer: { publicKey: a4, metadata: r4.requester.metadata }, controller: a4, expiry: si(J4), authentication: s4, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r4.pairingTopic, namespaces: ha([...new Set(u5)], [...new Set(d6)]), transportType: n6 }, i6.addTrace(sr3.subscribing_authenticated_session_topic);
        try {
          await this.client.core.relayer.subscribe(w6, { transportType: n6 });
        } catch (y7) {
          throw i6.setError(rr3.subscribe_authenticated_session_topic_failure), y7;
        }
        i6.addTrace(sr3.subscribe_authenticated_session_topic_success), await this.client.session.set(w6, m4), i6.addTrace(sr3.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r4.pairingTopic, metadata: r4.requester.metadata });
      }
      i6.addTrace(sr3.publishing_authenticated_session_approve);
      try {
        await this.sendResult({ topic: p6, id: e3, result: { cacaos: s4, responder: { publicKey: l9, metadata: this.client.metadata } }, encodeOpts: h7, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r4.requester.metadata, n6) });
      } catch (y7) {
        throw i6.setError(rr3.authenticated_session_approve_publish_failure), y7;
      }
      return await this.client.auth.requests.delete(e3, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r4.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i6.eventId }), { session: m4 };
    }), c6(this, "rejectSessionAuthenticate", async (t2) => {
      this.isInitialized();
      const { id: e3, reason: s4 } = t2, i6 = this.getPendingAuthRequest(e3);
      if (!i6) throw new Error(`Could not find pending auth request with id ${e3}`);
      i6.transportType === Q3.relay && await this.confirmOnlineStateOrThrow();
      const r4 = i6.requester.publicKey, n6 = await this.client.core.crypto.generateKeyPair(), a4 = qc(r4), l9 = { type: ee, receiverPublicKey: r4, senderPublicKey: n6 };
      await this.sendError({ id: e3, topic: a4, error: s4, encodeOpts: l9, rpcOpts: N11.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i6.requester.metadata, i6.transportType) }), await this.client.auth.requests.delete(e3, { message: "rejected", code: 0 }), await this.deleteProposal(e3);
    }), c6(this, "formatAuthMessage", (t2) => {
      this.isInitialized();
      const { request: e3, iss: s4 } = t2;
      return Vr2(e3, s4);
    }), c6(this, "processRelayMessageCache", () => {
      setTimeout(async () => {
        if (this.relayMessageCache.length !== 0) for (; this.relayMessageCache.length > 0; ) try {
          const t2 = this.relayMessageCache.shift();
          t2 && await this.onRelayMessage(t2);
        } catch (t2) {
          this.client.logger.error(t2);
        }
      }, 50);
    }), c6(this, "cleanupDuplicatePairings", async (t2) => {
      if (t2.pairingTopic) try {
        const e3 = this.client.core.pairing.pairings.get(t2.pairingTopic), s4 = this.client.core.pairing.pairings.getAll().filter((i6) => {
          var r4, n6;
          return ((r4 = i6.peerMetadata) == null ? void 0 : r4.url) && ((n6 = i6.peerMetadata) == null ? void 0 : n6.url) === t2.peer.metadata.url && i6.topic && i6.topic !== e3.topic;
        });
        if (s4.length === 0) return;
        this.client.logger.info(`Cleaning up ${s4.length} duplicate pairing(s)`), await Promise.all(s4.map((i6) => this.client.core.pairing.disconnect({ topic: i6.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
      } catch (e3) {
        this.client.logger.error(e3);
      }
    }), c6(this, "deleteSession", async (t2) => {
      var e3;
      const { topic: s4, expirerHasDeleted: i6 = false, emitEvent: r4 = true, id: n6 = 0 } = t2, { self: a4 } = this.client.session.get(s4);
      await this.client.core.relayer.unsubscribe(s4), await this.client.session.delete(s4, Kt2("USER_DISCONNECTED")), this.addToRecentlyDeleted(s4, "session"), this.client.core.crypto.keychain.has(a4.publicKey) && await this.client.core.crypto.deleteKeyPair(a4.publicKey), this.client.core.crypto.keychain.has(s4) && await this.client.core.crypto.deleteSymKey(s4), i6 || this.client.core.expirer.del(s4), this.client.core.storage.removeItem(Me4).catch((l9) => this.client.logger.warn(l9)), this.getPendingSessionRequests().forEach((l9) => {
        l9.topic === s4 && this.deletePendingSessionRequest(l9.id, Kt2("USER_DISCONNECTED"));
      }), s4 === ((e3 = this.sessionRequestQueue.queue[0]) == null ? void 0 : e3.topic) && (this.sessionRequestQueue.state = $2.idle), r4 && this.client.events.emit("session_delete", { id: n6, topic: s4 });
    }), c6(this, "deleteProposal", async (t2, e3) => {
      if (e3) try {
        const s4 = this.client.proposal.get(t2), i6 = this.client.core.eventClient.getEvent({ topic: s4.pairingTopic });
        i6 == null ? void 0 : i6.setError(ir3.proposal_expired);
      } catch {
      }
      await Promise.all([this.client.proposal.delete(t2, Kt2("USER_DISCONNECTED")), e3 ? Promise.resolve() : this.client.core.expirer.del(t2)]), this.addToRecentlyDeleted(t2, "proposal");
    }), c6(this, "deletePendingSessionRequest", async (t2, e3, s4 = false) => {
      await Promise.all([this.client.pendingRequest.delete(t2, e3), s4 ? Promise.resolve() : this.client.core.expirer.del(t2)]), this.addToRecentlyDeleted(t2, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i6) => i6.id !== t2), s4 && (this.sessionRequestQueue.state = $2.idle, this.client.events.emit("session_request_expire", { id: t2 }));
    }), c6(this, "deletePendingAuthRequest", async (t2, e3, s4 = false) => {
      await Promise.all([this.client.auth.requests.delete(t2, e3), s4 ? Promise.resolve() : this.client.core.expirer.del(t2)]);
    }), c6(this, "setExpiry", async (t2, e3) => {
      this.client.session.keys.includes(t2) && (this.client.core.expirer.set(t2, e3), await this.client.session.update(t2, { expiry: e3 }));
    }), c6(this, "setProposal", async (t2, e3) => {
      this.client.core.expirer.set(t2, si(N11.wc_sessionPropose.req.ttl)), await this.client.proposal.set(t2, e3);
    }), c6(this, "setAuthRequest", async (t2, e3) => {
      const { request: s4, pairingTopic: i6, transportType: r4 = Q3.relay } = e3;
      this.client.core.expirer.set(t2, s4.expiryTimestamp), await this.client.auth.requests.set(t2, { authPayload: s4.authPayload, requester: s4.requester, expiryTimestamp: s4.expiryTimestamp, id: t2, pairingTopic: i6, verifyContext: s4.verifyContext, transportType: r4 });
    }), c6(this, "setPendingSessionRequest", async (t2) => {
      const { id: e3, topic: s4, params: i6, verifyContext: r4 } = t2, n6 = i6.request.expiryTimestamp || si(N11.wc_sessionRequest.req.ttl);
      this.client.core.expirer.set(e3, n6), await this.client.pendingRequest.set(e3, { id: e3, topic: s4, params: i6, verifyContext: r4 });
    }), c6(this, "sendRequest", async (t2) => {
      const { topic: e3, method: s4, params: i6, expiry: r4, relayRpcId: n6, clientRpcId: a4, throwOnFailedPublish: l9, appLink: p6, tvf: h7 } = t2, u5 = formatJsonRpcRequest(s4, i6, a4);
      let d6;
      const w6 = !!p6;
      try {
        const E6 = w6 ? De2 : Qt2;
        d6 = await this.client.core.crypto.encode(e3, u5, { encoding: E6 });
      } catch (E6) {
        throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${e3} failed`), E6;
      }
      let m4;
      if (wt3.includes(s4)) {
        const E6 = Kc(JSON.stringify(u5)), _3 = Kc(d6);
        m4 = await this.client.core.verify.register({ id: _3, decryptedId: E6 });
      }
      const y7 = N11[s4].req;
      if (y7.attestation = m4, r4 && (y7.ttl = r4), n6 && (y7.id = n6), this.client.core.history.set(e3, u5), w6) {
        const E6 = ra(p6, e3, d6);
        await global.Linking.openURL(E6, this.client.name);
      } else {
        const E6 = N11[s4].req;
        r4 && (E6.ttl = r4), n6 && (E6.id = n6), E6.tvf = x4(I3({}, h7), { correlationId: u5.id }), l9 ? (E6.internal = x4(I3({}, E6.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(e3, d6, E6)) : this.client.core.relayer.publish(e3, d6, E6).catch((_3) => this.client.logger.error(_3));
      }
      return u5.id;
    }), c6(this, "sendResult", async (t2) => {
      const { id: e3, topic: s4, result: i6, throwOnFailedPublish: r4, encodeOpts: n6, appLink: a4 } = t2, l9 = formatJsonRpcResult(e3, i6);
      let p6;
      const h7 = a4 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const w6 = h7 ? De2 : Qt2;
        p6 = await this.client.core.crypto.encode(s4, l9, x4(I3({}, n6 || {}), { encoding: w6 }));
      } catch (w6) {
        throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s4} failed`), w6;
      }
      let u5, d6;
      try {
        u5 = await this.client.core.history.get(s4, e3);
        const w6 = u5.request;
        try {
          d6 = this.getTVFParams(e3, w6.params, i6);
        } catch (m4) {
          this.client.logger.warn(`sendResult() -> getTVFParams() failed: ${m4 == null ? void 0 : m4.message}`);
        }
      } catch (w6) {
        throw this.client.logger.error(`sendResult() -> history.get(${s4}, ${e3}) failed`), w6;
      }
      if (h7) {
        const w6 = ra(a4, s4, p6);
        await global.Linking.openURL(w6, this.client.name);
      } else {
        const w6 = u5.request.method, m4 = N11[w6].res;
        m4.tvf = x4(I3({}, d6), { correlationId: e3 }), r4 ? (m4.internal = x4(I3({}, m4.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s4, p6, m4)) : this.client.core.relayer.publish(s4, p6, m4).catch((y7) => this.client.logger.error(y7));
      }
      await this.client.core.history.resolve(l9);
    }), c6(this, "sendError", async (t2) => {
      const { id: e3, topic: s4, error: i6, encodeOpts: r4, rpcOpts: n6, appLink: a4 } = t2, l9 = formatJsonRpcError(e3, i6);
      let p6;
      const h7 = a4 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const d6 = h7 ? De2 : Qt2;
        p6 = await this.client.core.crypto.encode(s4, l9, x4(I3({}, r4 || {}), { encoding: d6 }));
      } catch (d6) {
        throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s4} failed`), d6;
      }
      let u5;
      try {
        u5 = await this.client.core.history.get(s4, e3);
      } catch (d6) {
        throw this.client.logger.error(`sendError() -> history.get(${s4}, ${e3}) failed`), d6;
      }
      if (h7) {
        const d6 = ra(a4, s4, p6);
        await global.Linking.openURL(d6, this.client.name);
      } else {
        const d6 = u5.request.method, w6 = n6 || N11[d6].res;
        this.client.core.relayer.publish(s4, p6, w6);
      }
      await this.client.core.history.resolve(l9);
    }), c6(this, "cleanup", async () => {
      const t2 = [], e3 = [];
      this.client.session.getAll().forEach((s4) => {
        let i6 = false;
        ii(s4.expiry) && (i6 = true), this.client.core.crypto.keychain.has(s4.topic) || (i6 = true), i6 && t2.push(s4.topic);
      }), this.client.proposal.getAll().forEach((s4) => {
        ii(s4.expiryTimestamp) && e3.push(s4.id);
      }), await Promise.all([...t2.map((s4) => this.deleteSession({ topic: s4 })), ...e3.map((s4) => this.deleteProposal(s4))]);
    }), c6(this, "onProviderMessageEvent", async (t2) => {
      !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(t2) : await this.onRelayMessage(t2);
    }), c6(this, "onRelayEventRequest", async (t2) => {
      this.requestQueue.queue.push(t2), await this.processRequestsQueue();
    }), c6(this, "processRequestsQueue", async () => {
      if (this.requestQueue.state === $2.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = $2.active;
        const t2 = this.requestQueue.queue.shift();
        if (t2) try {
          await this.processRequest(t2);
        } catch (e3) {
          this.client.logger.warn(e3);
        }
      }
      this.requestQueue.state = $2.idle;
    }), c6(this, "processRequest", async (t2) => {
      const { topic: e3, payload: s4, attestation: i6, transportType: r4, encryptedId: n6 } = t2, a4 = s4.method;
      if (!this.shouldIgnorePairingRequest({ topic: e3, requestMethod: a4 })) switch (a4) {
        case "wc_sessionPropose":
          return await this.onSessionProposeRequest({ topic: e3, payload: s4, attestation: i6, encryptedId: n6 });
        case "wc_sessionSettle":
          return await this.onSessionSettleRequest(e3, s4);
        case "wc_sessionUpdate":
          return await this.onSessionUpdateRequest(e3, s4);
        case "wc_sessionExtend":
          return await this.onSessionExtendRequest(e3, s4);
        case "wc_sessionPing":
          return await this.onSessionPingRequest(e3, s4);
        case "wc_sessionDelete":
          return await this.onSessionDeleteRequest(e3, s4);
        case "wc_sessionRequest":
          return await this.onSessionRequest({ topic: e3, payload: s4, attestation: i6, encryptedId: n6, transportType: r4 });
        case "wc_sessionEvent":
          return await this.onSessionEventRequest(e3, s4);
        case "wc_sessionAuthenticate":
          return await this.onSessionAuthenticateRequest({ topic: e3, payload: s4, attestation: i6, encryptedId: n6, transportType: r4 });
        default:
          return this.client.logger.info(`Unsupported request method ${a4}`);
      }
    }), c6(this, "onRelayEventResponse", async (t2) => {
      const { topic: e3, payload: s4, transportType: i6 } = t2, r4 = (await this.client.core.history.get(e3, s4.id)).request.method;
      switch (r4) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(e3, s4, i6);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(e3, s4);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(e3, s4);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(e3, s4);
        case "wc_sessionPing":
          return this.onSessionPingResponse(e3, s4);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(e3, s4);
        case "wc_sessionAuthenticate":
          return this.onSessionAuthenticateResponse(e3, s4);
        default:
          return this.client.logger.info(`Unsupported response method ${r4}`);
      }
    }), c6(this, "onRelayEventUnknownPayload", (t2) => {
      const { topic: e3 } = t2, { message: s4 } = Et2("MISSING_OR_INVALID", `Decoded payload on topic ${e3} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(s4);
    }), c6(this, "shouldIgnorePairingRequest", (t2) => {
      const { topic: e3, requestMethod: s4 } = t2, i6 = this.expectedPairingMethodMap.get(e3);
      return !i6 || i6.includes(s4) ? false : !!(i6.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
    }), c6(this, "onSessionProposeRequest", async (t2) => {
      const { topic: e3, payload: s4, attestation: i6, encryptedId: r4 } = t2, { params: n6, id: a4 } = s4;
      try {
        const l9 = this.client.core.eventClient.getEvent({ topic: e3 });
        this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), l9 == null ? void 0 : l9.setError(Y2.proposal_listener_not_found)), this.isValidConnect(I3({}, s4.params));
        const p6 = n6.expiryTimestamp || si(N11.wc_sessionPropose.req.ttl), h7 = I3({ id: a4, pairingTopic: e3, expiryTimestamp: p6, attestation: i6, encryptedId: r4 }, n6);
        await this.setProposal(a4, h7);
        const u5 = await this.getVerifyContext({ attestationId: i6, hash: Kc(JSON.stringify(s4)), encryptedId: r4, metadata: h7.proposer.metadata });
        l9 == null ? void 0 : l9.addTrace(G3.emit_session_proposal), this.client.events.emit("session_proposal", { id: a4, params: h7, verifyContext: u5 });
      } catch (l9) {
        await this.sendError({ id: a4, topic: e3, error: l9, rpcOpts: N11.wc_sessionPropose.autoReject }), this.client.logger.error(l9);
      }
    }), c6(this, "onSessionProposeResponse", async (t2, e3, s4) => {
      const { id: i6 } = e3;
      if (isJsonRpcResult(e3)) {
        const { result: r4 } = e3;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r4 });
        const n6 = this.client.proposal.get(i6);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: n6 });
        const a4 = n6.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a4 });
        const l9 = r4.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: l9 });
        const p6 = await this.client.core.crypto.generateSharedKey(a4, l9);
        this.pendingSessions.set(i6, { sessionTopic: p6, pairingTopic: t2, proposalId: i6, publicKey: a4 });
        const h7 = await this.client.core.relayer.subscribe(p6, { transportType: s4 });
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: h7 }), await this.client.core.pairing.activate({ topic: t2 });
      } else if (isJsonRpcError(e3)) {
        await this.deleteProposal(i6);
        const r4 = fi("session_connect", i6);
        if (this.events.listenerCount(r4) === 0) throw new Error(`emitting ${r4} without any listeners, 954`);
        this.events.emit(r4, { error: e3.error });
      }
    }), c6(this, "onSessionSettleRequest", async (t2, e3) => {
      const { id: s4, params: i6 } = e3;
      try {
        this.isValidSessionSettleRequest(i6);
        const { relay: r4, controller: n6, expiry: a4, namespaces: l9, sessionProperties: p6, scopedProperties: h7, sessionConfig: u5 } = e3.params, d6 = [...this.pendingSessions.values()].find((y7) => y7.sessionTopic === t2);
        if (!d6) return this.client.logger.error(`Pending session not found for topic ${t2}`);
        const w6 = this.client.proposal.get(d6.proposalId), m4 = x4(I3(I3(I3({ topic: t2, relay: r4, expiry: a4, namespaces: l9, acknowledged: true, pairingTopic: d6.pairingTopic, requiredNamespaces: w6.requiredNamespaces, optionalNamespaces: w6.optionalNamespaces, controller: n6.publicKey, self: { publicKey: d6.publicKey, metadata: this.client.metadata }, peer: { publicKey: n6.publicKey, metadata: n6.metadata } }, p6 && { sessionProperties: p6 }), h7 && { scopedProperties: h7 }), u5 && { sessionConfig: u5 }), { transportType: Q3.relay });
        await this.client.session.set(m4.topic, m4), await this.setExpiry(m4.topic, m4.expiry), await this.client.core.pairing.updateMetadata({ topic: d6.pairingTopic, metadata: m4.peer.metadata }), this.client.events.emit("session_connect", { session: m4 }), this.events.emit(fi("session_connect", d6.proposalId), { session: m4 }), this.pendingSessions.delete(d6.proposalId), this.deleteProposal(d6.proposalId, false), this.cleanupDuplicatePairings(m4), await this.sendResult({ id: e3.id, topic: t2, result: true });
      } catch (r4) {
        await this.sendError({ id: s4, topic: t2, error: r4 }), this.client.logger.error(r4);
      }
    }), c6(this, "onSessionSettleResponse", async (t2, e3) => {
      const { id: s4 } = e3;
      isJsonRpcResult(e3) ? (await this.client.session.update(t2, { acknowledged: true }), this.events.emit(fi("session_approve", s4), {})) : isJsonRpcError(e3) && (await this.client.session.delete(t2, Kt2("USER_DISCONNECTED")), this.events.emit(fi("session_approve", s4), { error: e3.error }));
    }), c6(this, "onSessionUpdateRequest", async (t2, e3) => {
      const { params: s4, id: i6 } = e3;
      try {
        const r4 = `${t2}_session_update`, n6 = ka.get(r4);
        if (n6 && this.isRequestOutOfSync(n6, i6)) {
          this.client.logger.warn(`Discarding out of sync request - ${i6}`), this.sendError({ id: i6, topic: t2, error: Kt2("INVALID_UPDATE_REQUEST") });
          return;
        }
        this.isValidUpdate(I3({ topic: t2 }, s4));
        try {
          ka.set(r4, i6), await this.client.session.update(t2, { namespaces: s4.namespaces }), await this.sendResult({ id: i6, topic: t2, result: true });
        } catch (a4) {
          throw ka.delete(r4), a4;
        }
        this.client.events.emit("session_update", { id: i6, topic: t2, params: s4 });
      } catch (r4) {
        await this.sendError({ id: i6, topic: t2, error: r4 }), this.client.logger.error(r4);
      }
    }), c6(this, "isRequestOutOfSync", (t2, e3) => e3.toString().slice(0, -3) < t2.toString().slice(0, -3)), c6(this, "onSessionUpdateResponse", (t2, e3) => {
      const { id: s4 } = e3, i6 = fi("session_update", s4);
      if (this.events.listenerCount(i6) === 0) throw new Error(`emitting ${i6} without any listeners`);
      isJsonRpcResult(e3) ? this.events.emit(fi("session_update", s4), {}) : isJsonRpcError(e3) && this.events.emit(fi("session_update", s4), { error: e3.error });
    }), c6(this, "onSessionExtendRequest", async (t2, e3) => {
      const { id: s4 } = e3;
      try {
        this.isValidExtend({ topic: t2 }), await this.setExpiry(t2, si(J4)), await this.sendResult({ id: s4, topic: t2, result: true }), this.client.events.emit("session_extend", { id: s4, topic: t2 });
      } catch (i6) {
        await this.sendError({ id: s4, topic: t2, error: i6 }), this.client.logger.error(i6);
      }
    }), c6(this, "onSessionExtendResponse", (t2, e3) => {
      const { id: s4 } = e3, i6 = fi("session_extend", s4);
      if (this.events.listenerCount(i6) === 0) throw new Error(`emitting ${i6} without any listeners`);
      isJsonRpcResult(e3) ? this.events.emit(fi("session_extend", s4), {}) : isJsonRpcError(e3) && this.events.emit(fi("session_extend", s4), { error: e3.error });
    }), c6(this, "onSessionPingRequest", async (t2, e3) => {
      const { id: s4 } = e3;
      try {
        this.isValidPing({ topic: t2 }), await this.sendResult({ id: s4, topic: t2, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s4, topic: t2 });
      } catch (i6) {
        await this.sendError({ id: s4, topic: t2, error: i6 }), this.client.logger.error(i6);
      }
    }), c6(this, "onSessionPingResponse", (t2, e3) => {
      const { id: s4 } = e3, i6 = fi("session_ping", s4);
      setTimeout(() => {
        if (this.events.listenerCount(i6) === 0) throw new Error(`emitting ${i6} without any listeners 2176`);
        isJsonRpcResult(e3) ? this.events.emit(fi("session_ping", s4), {}) : isJsonRpcError(e3) && this.events.emit(fi("session_ping", s4), { error: e3.error });
      }, 500);
    }), c6(this, "onSessionDeleteRequest", async (t2, e3) => {
      const { id: s4 } = e3;
      try {
        this.isValidDisconnect({ topic: t2, reason: e3.params }), Promise.all([new Promise((i6) => {
          this.client.core.relayer.once(C3.publish, async () => {
            i6(await this.deleteSession({ topic: t2, id: s4 }));
          });
        }), this.sendResult({ id: s4, topic: t2, result: true }), this.cleanupPendingSentRequestsForTopic({ topic: t2, error: Kt2("USER_DISCONNECTED") })]).catch((i6) => this.client.logger.error(i6));
      } catch (i6) {
        this.client.logger.error(i6);
      }
    }), c6(this, "onSessionRequest", async (t2) => {
      var e3, s4, i6;
      const { topic: r4, payload: n6, attestation: a4, encryptedId: l9, transportType: p6 } = t2, { id: h7, params: u5 } = n6;
      try {
        await this.isValidRequest(I3({ topic: r4 }, u5));
        const d6 = this.client.session.get(r4), w6 = await this.getVerifyContext({ attestationId: a4, hash: Kc(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", u5, h7))), encryptedId: l9, metadata: d6.peer.metadata, transportType: p6 }), m4 = { id: h7, topic: r4, params: u5, verifyContext: w6 };
        await this.setPendingSessionRequest(m4), p6 === Q3.link_mode && (e3 = d6.peer.metadata.redirect) != null && e3.universal && this.client.core.addLinkModeSupportedApp((s4 = d6.peer.metadata.redirect) == null ? void 0 : s4.universal), (i6 = this.client.signConfig) != null && i6.disableRequestQueue ? this.emitSessionRequest(m4) : (this.addSessionRequestToSessionRequestQueue(m4), this.processSessionRequestQueue());
      } catch (d6) {
        await this.sendError({ id: h7, topic: r4, error: d6 }), this.client.logger.error(d6);
      }
    }), c6(this, "onSessionRequestResponse", (t2, e3) => {
      const { id: s4 } = e3, i6 = fi("session_request", s4);
      if (this.events.listenerCount(i6) === 0) throw new Error(`emitting ${i6} without any listeners`);
      isJsonRpcResult(e3) ? this.events.emit(fi("session_request", s4), { result: e3.result }) : isJsonRpcError(e3) && this.events.emit(fi("session_request", s4), { error: e3.error });
    }), c6(this, "onSessionEventRequest", async (t2, e3) => {
      const { id: s4, params: i6 } = e3;
      try {
        const r4 = `${t2}_session_event_${i6.event.name}`, n6 = ka.get(r4);
        if (n6 && this.isRequestOutOfSync(n6, s4)) {
          this.client.logger.info(`Discarding out of sync request - ${s4}`);
          return;
        }
        this.isValidEmit(I3({ topic: t2 }, i6)), this.client.events.emit("session_event", { id: s4, topic: t2, params: i6 }), ka.set(r4, s4);
      } catch (r4) {
        await this.sendError({ id: s4, topic: t2, error: r4 }), this.client.logger.error(r4);
      }
    }), c6(this, "onSessionAuthenticateResponse", (t2, e3) => {
      const { id: s4 } = e3;
      this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: t2, payload: e3 }), isJsonRpcResult(e3) ? this.events.emit(fi("session_request", s4), { result: e3.result }) : isJsonRpcError(e3) && this.events.emit(fi("session_request", s4), { error: e3.error });
    }), c6(this, "onSessionAuthenticateRequest", async (t2) => {
      var e3;
      const { topic: s4, payload: i6, attestation: r4, encryptedId: n6, transportType: a4 } = t2;
      try {
        const { requester: l9, authPayload: p6, expiryTimestamp: h7 } = i6.params, u5 = await this.getVerifyContext({ attestationId: r4, hash: Kc(JSON.stringify(i6)), encryptedId: n6, metadata: l9.metadata, transportType: a4 }), d6 = { requester: l9, pairingTopic: s4, id: i6.id, authPayload: p6, verifyContext: u5, expiryTimestamp: h7 };
        await this.setAuthRequest(i6.id, { request: d6, pairingTopic: s4, transportType: a4 }), a4 === Q3.link_mode && (e3 = l9.metadata.redirect) != null && e3.universal && this.client.core.addLinkModeSupportedApp(l9.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s4, params: i6.params, id: i6.id, verifyContext: u5 });
      } catch (l9) {
        this.client.logger.error(l9);
        const p6 = i6.params.requester.publicKey, h7 = await this.client.core.crypto.generateKeyPair(), u5 = this.getAppLinkIfEnabled(i6.params.requester.metadata, a4), d6 = { type: ee, receiverPublicKey: p6, senderPublicKey: h7 };
        await this.sendError({ id: i6.id, topic: s4, error: l9, encodeOpts: d6, rpcOpts: N11.wc_sessionAuthenticate.autoReject, appLink: u5 });
      }
    }), c6(this, "addSessionRequestToSessionRequestQueue", (t2) => {
      this.sessionRequestQueue.queue.push(t2);
    }), c6(this, "cleanupAfterResponse", (t2) => {
      this.deletePendingSessionRequest(t2.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = $2.idle, this.processSessionRequestQueue();
      }, (0, import_time5.toMiliseconds)(this.requestQueueDelay));
    }), c6(this, "cleanupPendingSentRequestsForTopic", ({ topic: t2, error: e3 }) => {
      const s4 = this.client.core.history.pending;
      s4.length > 0 && s4.filter((i6) => i6.topic === t2 && i6.request.method === "wc_sessionRequest").forEach((i6) => {
        const r4 = i6.request.id, n6 = fi("session_request", r4);
        if (this.events.listenerCount(n6) === 0) throw new Error(`emitting ${n6} without any listeners`);
        this.events.emit(fi("session_request", i6.request.id), { error: e3 });
      });
    }), c6(this, "processSessionRequestQueue", () => {
      if (this.sessionRequestQueue.state === $2.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const t2 = this.sessionRequestQueue.queue[0];
      if (!t2) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.sessionRequestQueue.state = $2.active, this.emitSessionRequest(t2);
      } catch (e3) {
        this.client.logger.error(e3);
      }
    }), c6(this, "emitSessionRequest", (t2) => {
      this.client.events.emit("session_request", t2);
    }), c6(this, "onPairingCreated", (t2) => {
      if (t2.methods && this.expectedPairingMethodMap.set(t2.topic, t2.methods), t2.active) return;
      const e3 = this.client.proposal.getAll().find((s4) => s4.pairingTopic === t2.topic);
      e3 && this.onSessionProposeRequest({ topic: t2.topic, payload: formatJsonRpcRequest("wc_sessionPropose", x4(I3({}, e3), { requiredNamespaces: e3.requiredNamespaces, optionalNamespaces: e3.optionalNamespaces, relays: e3.relays, proposer: e3.proposer, sessionProperties: e3.sessionProperties, scopedProperties: e3.scopedProperties }), e3.id), attestation: e3.attestation, encryptedId: e3.encryptedId });
    }), c6(this, "isValidConnect", async (t2) => {
      if (!Ba(t2)) {
        const { message: l9 } = Et2("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(t2)}`);
        throw new Error(l9);
      }
      const { pairingTopic: e3, requiredNamespaces: s4, optionalNamespaces: i6, sessionProperties: r4, scopedProperties: n6, relays: a4 } = t2;
      if (kt2(e3) || await this.isValidPairingTopic(e3), !va(a4, true)) {
        const { message: l9 } = Et2("MISSING_OR_INVALID", `connect() relays: ${a4}`);
        throw new Error(l9);
      }
      if (!kt2(s4) && Ve2(s4) !== 0) {
        const l9 = "requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces";
        ["fatal", "error", "silent"].includes(this.client.logger.level) ? console.warn(l9) : this.client.logger.warn(l9), this.validateNamespaces(s4, "requiredNamespaces");
      }
      if (!kt2(i6) && Ve2(i6) !== 0 && this.validateNamespaces(i6, "optionalNamespaces"), kt2(r4) || this.validateSessionProps(r4, "sessionProperties"), !kt2(n6)) {
        this.validateSessionProps(n6, "scopedProperties");
        const l9 = Object.keys(s4 || {}).concat(Object.keys(i6 || {}));
        if (!Object.keys(n6).every((p6) => l9.includes(p6))) throw new Error(`Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(n6)}, required/optional namespaces: ${JSON.stringify(l9)}`);
      }
    }), c6(this, "validateNamespaces", (t2, e3) => {
      const s4 = xa(t2, "connect()", e3);
      if (s4) throw new Error(s4.message);
    }), c6(this, "isValidApprove", async (t2) => {
      if (!Ba(t2)) throw new Error(Et2("MISSING_OR_INVALID", `approve() params: ${t2}`).message);
      const { id: e3, namespaces: s4, relayProtocol: i6, sessionProperties: r4, scopedProperties: n6 } = t2;
      this.checkRecentlyDeleted(e3), await this.isValidProposalId(e3);
      const a4 = this.client.proposal.get(e3), l9 = ss(s4, "approve()");
      if (l9) throw new Error(l9.message);
      const p6 = fs(a4.requiredNamespaces, s4, "approve()");
      if (p6) throw new Error(p6.message);
      if (!it2(i6, true)) {
        const { message: h7 } = Et2("MISSING_OR_INVALID", `approve() relayProtocol: ${i6}`);
        throw new Error(h7);
      }
      if (kt2(r4) || this.validateSessionProps(r4, "sessionProperties"), !kt2(n6)) {
        this.validateSessionProps(n6, "scopedProperties");
        const h7 = new Set(Object.keys(s4));
        if (!Object.keys(n6).every((u5) => h7.has(u5))) throw new Error(`Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(n6)}, approved namespaces: ${Array.from(h7).join(", ")}`);
      }
    }), c6(this, "isValidReject", async (t2) => {
      if (!Ba(t2)) {
        const { message: i6 } = Et2("MISSING_OR_INVALID", `reject() params: ${t2}`);
        throw new Error(i6);
      }
      const { id: e3, reason: s4 } = t2;
      if (this.checkRecentlyDeleted(e3), await this.isValidProposalId(e3), !Ia(s4)) {
        const { message: i6 } = Et2("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s4)}`);
        throw new Error(i6);
      }
    }), c6(this, "isValidSessionSettleRequest", (t2) => {
      if (!Ba(t2)) {
        const { message: l9 } = Et2("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${t2}`);
        throw new Error(l9);
      }
      const { relay: e3, controller: s4, namespaces: i6, expiry: r4 } = t2;
      if (!is(e3)) {
        const { message: l9 } = Et2("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(l9);
      }
      const n6 = wa(s4, "onSessionSettleRequest()");
      if (n6) throw new Error(n6.message);
      const a4 = ss(i6, "onSessionSettleRequest()");
      if (a4) throw new Error(a4.message);
      if (ii(r4)) {
        const { message: l9 } = Et2("EXPIRED", "onSessionSettleRequest()");
        throw new Error(l9);
      }
    }), c6(this, "isValidUpdate", async (t2) => {
      if (!Ba(t2)) {
        const { message: a4 } = Et2("MISSING_OR_INVALID", `update() params: ${t2}`);
        throw new Error(a4);
      }
      const { topic: e3, namespaces: s4 } = t2;
      this.checkRecentlyDeleted(e3), await this.isValidSessionTopic(e3);
      const i6 = this.client.session.get(e3), r4 = ss(s4, "update()");
      if (r4) throw new Error(r4.message);
      const n6 = fs(i6.requiredNamespaces, s4, "update()");
      if (n6) throw new Error(n6.message);
    }), c6(this, "isValidExtend", async (t2) => {
      if (!Ba(t2)) {
        const { message: s4 } = Et2("MISSING_OR_INVALID", `extend() params: ${t2}`);
        throw new Error(s4);
      }
      const { topic: e3 } = t2;
      this.checkRecentlyDeleted(e3), await this.isValidSessionTopic(e3);
    }), c6(this, "isValidRequest", async (t2) => {
      if (!Ba(t2)) {
        const { message: a4 } = Et2("MISSING_OR_INVALID", `request() params: ${t2}`);
        throw new Error(a4);
      }
      const { topic: e3, request: s4, chainId: i6, expiry: r4 } = t2;
      this.checkRecentlyDeleted(e3), await this.isValidSessionTopic(e3);
      const { namespaces: n6 } = this.client.session.get(e3);
      if (!Oa(n6, i6)) {
        const { message: a4 } = Et2("MISSING_OR_INVALID", `request() chainId: ${i6}`);
        throw new Error(a4);
      }
      if (!Aa(s4)) {
        const { message: a4 } = Et2("MISSING_OR_INVALID", `request() ${JSON.stringify(s4)}`);
        throw new Error(a4);
      }
      if (!Ua(n6, i6, s4.method)) {
        const { message: a4 } = Et2("MISSING_OR_INVALID", `request() method: ${s4.method}`);
        throw new Error(a4);
      }
      if (r4 && !$a(r4, _e4)) {
        const { message: a4 } = Et2("MISSING_OR_INVALID", `request() expiry: ${r4}. Expiry must be a number (in seconds) between ${_e4.min} and ${_e4.max}`);
        throw new Error(a4);
      }
    }), c6(this, "isValidRespond", async (t2) => {
      var e3;
      if (!Ba(t2)) {
        const { message: r4 } = Et2("MISSING_OR_INVALID", `respond() params: ${t2}`);
        throw new Error(r4);
      }
      const { topic: s4, response: i6 } = t2;
      try {
        await this.isValidSessionTopic(s4);
      } catch (r4) {
        throw (e3 = t2 == null ? void 0 : t2.response) != null && e3.id && this.cleanupAfterResponse(t2), r4;
      }
      if (!Sa(i6)) {
        const { message: r4 } = Et2("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i6)}`);
        throw new Error(r4);
      }
    }), c6(this, "isValidPing", async (t2) => {
      if (!Ba(t2)) {
        const { message: s4 } = Et2("MISSING_OR_INVALID", `ping() params: ${t2}`);
        throw new Error(s4);
      }
      const { topic: e3 } = t2;
      await this.isValidSessionOrPairingTopic(e3);
    }), c6(this, "isValidEmit", async (t2) => {
      if (!Ba(t2)) {
        const { message: n6 } = Et2("MISSING_OR_INVALID", `emit() params: ${t2}`);
        throw new Error(n6);
      }
      const { topic: e3, event: s4, chainId: i6 } = t2;
      await this.isValidSessionTopic(e3);
      const { namespaces: r4 } = this.client.session.get(e3);
      if (!Oa(r4, i6)) {
        const { message: n6 } = Et2("MISSING_OR_INVALID", `emit() chainId: ${i6}`);
        throw new Error(n6);
      }
      if (!Na(s4)) {
        const { message: n6 } = Et2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s4)}`);
        throw new Error(n6);
      }
      if (!_a(r4, i6, s4.name)) {
        const { message: n6 } = Et2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s4)}`);
        throw new Error(n6);
      }
    }), c6(this, "isValidDisconnect", async (t2) => {
      if (!Ba(t2)) {
        const { message: s4 } = Et2("MISSING_OR_INVALID", `disconnect() params: ${t2}`);
        throw new Error(s4);
      }
      const { topic: e3 } = t2;
      await this.isValidSessionOrPairingTopic(e3);
    }), c6(this, "isValidAuthenticate", (t2) => {
      const { chains: e3, uri: s4, domain: i6, nonce: r4 } = t2;
      if (!Array.isArray(e3) || e3.length === 0) throw new Error("chains is required and must be a non-empty array");
      if (!it2(s4, false)) throw new Error("uri is required parameter");
      if (!it2(i6, false)) throw new Error("domain is required parameter");
      if (!it2(r4, false)) throw new Error("nonce is required parameter");
      if ([...new Set(e3.map((a4) => Fe(a4).namespace))].length > 1) throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
      const { namespace: n6 } = Fe(e3[0]);
      if (n6 !== "eip155") throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
    }), c6(this, "getVerifyContext", async (t2) => {
      const { attestationId: e3, hash: s4, encryptedId: i6, metadata: r4, transportType: n6 } = t2, a4 = { verified: { verifyUrl: r4.verifyUrl || ue2, validation: "UNKNOWN", origin: r4.url || "" } };
      try {
        if (n6 === Q3.link_mode) {
          const p6 = this.getAppLinkIfEnabled(r4, n6);
          return a4.verified.validation = p6 && new URL(p6).origin === new URL(r4.url).origin ? "VALID" : "INVALID", a4;
        }
        const l9 = await this.client.core.verify.resolve({ attestationId: e3, hash: s4, encryptedId: i6, verifyUrl: r4.verifyUrl });
        l9 && (a4.verified.origin = l9.origin, a4.verified.isScam = l9.isScam, a4.verified.validation = l9.origin === new URL(r4.url).origin ? "VALID" : "INVALID");
      } catch (l9) {
        this.client.logger.warn(l9);
      }
      return this.client.logger.debug(`Verify context: ${JSON.stringify(a4)}`), a4;
    }), c6(this, "validateSessionProps", (t2, e3) => {
      Object.values(t2).forEach((s4, i6) => {
        if (s4 == null) {
          const { message: r4 } = Et2("MISSING_OR_INVALID", `${e3} must contain an existing value for each key. Received: ${s4} for key ${Object.keys(t2)[i6]}`);
          throw new Error(r4);
        }
      });
    }), c6(this, "getPendingAuthRequest", (t2) => {
      const e3 = this.client.auth.requests.get(t2);
      return typeof e3 == "object" ? e3 : void 0;
    }), c6(this, "addToRecentlyDeleted", (t2, e3) => {
      if (this.recentlyDeletedMap.set(t2, e3), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
        let s4 = 0;
        const i6 = this.recentlyDeletedLimit / 2;
        for (const r4 of this.recentlyDeletedMap.keys()) {
          if (s4++ >= i6) break;
          this.recentlyDeletedMap.delete(r4);
        }
      }
    }), c6(this, "checkRecentlyDeleted", (t2) => {
      const e3 = this.recentlyDeletedMap.get(t2);
      if (e3) {
        const { message: s4 } = Et2("MISSING_OR_INVALID", `Record was recently deleted - ${e3}: ${t2}`);
        throw new Error(s4);
      }
    }), c6(this, "isLinkModeEnabled", (t2, e3) => {
      var s4, i6, r4, n6, a4, l9, p6, h7, u5;
      return !t2 || e3 !== Q3.link_mode ? false : ((i6 = (s4 = this.client.metadata) == null ? void 0 : s4.redirect) == null ? void 0 : i6.linkMode) === true && ((n6 = (r4 = this.client.metadata) == null ? void 0 : r4.redirect) == null ? void 0 : n6.universal) !== void 0 && ((l9 = (a4 = this.client.metadata) == null ? void 0 : a4.redirect) == null ? void 0 : l9.universal) !== "" && ((p6 = t2 == null ? void 0 : t2.redirect) == null ? void 0 : p6.universal) !== void 0 && ((h7 = t2 == null ? void 0 : t2.redirect) == null ? void 0 : h7.universal) !== "" && ((u5 = t2 == null ? void 0 : t2.redirect) == null ? void 0 : u5.linkMode) === true && this.client.core.linkModeSupportedApps.includes(t2.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < "u";
    }), c6(this, "getAppLinkIfEnabled", (t2, e3) => {
      var s4;
      return this.isLinkModeEnabled(t2, e3) ? (s4 = t2 == null ? void 0 : t2.redirect) == null ? void 0 : s4.universal : void 0;
    }), c6(this, "handleLinkModeMessage", ({ url: t2 }) => {
      if (!t2 || !t2.includes("wc_ev") || !t2.includes("topic")) return;
      const e3 = ui(t2, "topic") || "", s4 = decodeURIComponent(ui(t2, "wc_ev") || ""), i6 = this.client.session.keys.includes(e3);
      i6 && this.client.session.update(e3, { transportType: Q3.link_mode }), this.client.core.dispatchEnvelope({ topic: e3, message: s4, sessionExists: i6 });
    }), c6(this, "registerLinkModeListeners", async () => {
      var t2;
      if (di() || Bt2() && (t2 = this.client.metadata.redirect) != null && t2.linkMode) {
        const e3 = global == null ? void 0 : global.Linking;
        if (typeof e3 < "u") {
          e3.addEventListener("url", this.handleLinkModeMessage, this.client.name);
          const s4 = await e3.getInitialURL();
          s4 && setTimeout(() => {
            this.handleLinkModeMessage({ url: s4 });
          }, 50);
        }
      }
    }), c6(this, "getTVFParams", (t2, e3, s4) => {
      var i6, r4, n6;
      if (!((i6 = e3.request) != null && i6.method)) return {};
      const a4 = { correlationId: t2, rpcMethods: [e3.request.method], chainId: e3.chainId };
      try {
        const l9 = this.extractTxHashesFromResult(e3.request, s4);
        a4.txHashes = l9, a4.contractAddresses = this.isValidContractData(e3.request.params) ? [(n6 = (r4 = e3.request.params) == null ? void 0 : r4[0]) == null ? void 0 : n6.to] : [];
      } catch (l9) {
        this.client.logger.warn("Error getting TVF params", l9);
      }
      return a4;
    }), c6(this, "isValidContractData", (t2) => {
      var e3;
      if (!t2) return false;
      try {
        const s4 = (t2 == null ? void 0 : t2.data) || ((e3 = t2 == null ? void 0 : t2[0]) == null ? void 0 : e3.data);
        if (!s4.startsWith("0x")) return false;
        const i6 = s4.slice(2);
        return /^[0-9a-fA-F]*$/.test(i6) ? i6.length % 2 === 0 : false;
      } catch {
      }
      return false;
    }), c6(this, "extractTxHashesFromResult", (t2, e3) => {
      var s4;
      try {
        if (!e3) return [];
        const i6 = t2.method, r4 = yt2[i6];
        if (i6 === "sui_signTransaction") return [of(e3.transactionBytes)];
        if (i6 === "near_signTransaction") return [sf(e3)];
        if (i6 === "near_signTransactions") return e3.map((a4) => sf(a4));
        if (i6 === "xrpl_signTransactionFor" || i6 === "xrpl_signTransaction") return [(s4 = e3.tx_json) == null ? void 0 : s4.hash];
        if (i6 === "polkadot_signTransaction") return [Va({ transaction: t2.params.transactionPayload, signature: e3.signature })];
        if (i6 === "algo_signTxn") return me2(e3) ? e3.map((a4) => ff(a4)) : [ff(e3)];
        if (i6 === "cosmos_signDirect") return [cf(e3)];
        if (typeof e3 == "string") return [e3];
        const n6 = e3[r4.key];
        if (me2(n6)) return i6 === "solana_signAllTransactions" ? n6.map((a4) => rf(a4)) : n6;
        if (typeof n6 == "string") return [n6];
      } catch (i6) {
        this.client.logger.warn("Error extracting tx hashes from result", i6);
      }
      return [];
    });
  }
  async processPendingMessageEvents() {
    try {
      const o6 = this.client.session.keys, t2 = this.client.core.relayer.messages.getWithoutAck(o6);
      for (const [e3, s4] of Object.entries(t2)) for (const i6 of s4) try {
        await this.onProviderMessageEvent({ topic: e3, message: i6, publishedAt: Date.now() });
      } catch {
        this.client.logger.warn(`Error processing pending message event for topic: ${e3}, message: ${i6}`);
      }
    } catch (o6) {
      this.client.logger.warn("processPendingMessageEvents failed", o6);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: o6 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(o6);
    }
  }
  async confirmOnlineStateOrThrow() {
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(C3.message, (o6) => {
      this.onProviderMessageEvent(o6);
    });
  }
  async onRelayMessage(o6) {
    const { topic: t2, message: e3, attestation: s4, transportType: i6 } = o6, { publicKey: r4 } = this.client.auth.authKeys.keys.includes(ce2) ? this.client.auth.authKeys.get(ce2) : { responseTopic: void 0, publicKey: void 0 };
    try {
      const n6 = await this.client.core.crypto.decode(t2, e3, { receiverPublicKey: r4, encoding: i6 === Q3.link_mode ? De2 : Qt2 });
      isJsonRpcRequest(n6) ? (this.client.core.history.set(t2, n6), await this.onRelayEventRequest({ topic: t2, payload: n6, attestation: s4, transportType: i6, encryptedId: Kc(e3) })) : isJsonRpcResponse(n6) ? (await this.client.core.history.resolve(n6), await this.onRelayEventResponse({ topic: t2, payload: n6, transportType: i6 }), this.client.core.history.delete(t2, n6.id)) : await this.onRelayEventUnknownPayload({ topic: t2, payload: n6, transportType: i6 }), await this.client.core.relayer.messages.ack(t2, e3);
    } catch (n6) {
      this.client.logger.error(n6);
    }
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(M4.expired, async (o6) => {
      const { topic: t2, id: e3 } = oi(o6.target);
      if (e3 && this.client.pendingRequest.keys.includes(e3)) return await this.deletePendingSessionRequest(e3, Et2("EXPIRED"), true);
      if (e3 && this.client.auth.requests.keys.includes(e3)) return await this.deletePendingAuthRequest(e3, Et2("EXPIRED"), true);
      t2 ? this.client.session.keys.includes(t2) && (await this.deleteSession({ topic: t2, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: t2 })) : e3 && (await this.deleteProposal(e3, true), this.client.events.emit("proposal_expire", { id: e3 }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(re.create, (o6) => this.onPairingCreated(o6)), this.client.core.pairing.events.on(re.delete, (o6) => {
      this.addToRecentlyDeleted(o6.topic, "pairing");
    });
  }
  isValidPairingTopic(o6) {
    if (!it2(o6, false)) {
      const { message: t2 } = Et2("MISSING_OR_INVALID", `pairing topic should be a string: ${o6}`);
      throw new Error(t2);
    }
    if (!this.client.core.pairing.pairings.keys.includes(o6)) {
      const { message: t2 } = Et2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${o6}`);
      throw new Error(t2);
    }
    if (ii(this.client.core.pairing.pairings.get(o6).expiry)) {
      const { message: t2 } = Et2("EXPIRED", `pairing topic: ${o6}`);
      throw new Error(t2);
    }
  }
  async isValidSessionTopic(o6) {
    if (!it2(o6, false)) {
      const { message: t2 } = Et2("MISSING_OR_INVALID", `session topic should be a string: ${o6}`);
      throw new Error(t2);
    }
    if (this.checkRecentlyDeleted(o6), !this.client.session.keys.includes(o6)) {
      const { message: t2 } = Et2("NO_MATCHING_KEY", `session topic doesn't exist: ${o6}`);
      throw new Error(t2);
    }
    if (ii(this.client.session.get(o6).expiry)) {
      await this.deleteSession({ topic: o6 });
      const { message: t2 } = Et2("EXPIRED", `session topic: ${o6}`);
      throw new Error(t2);
    }
    if (!this.client.core.crypto.keychain.has(o6)) {
      const { message: t2 } = Et2("MISSING_OR_INVALID", `session topic does not exist in keychain: ${o6}`);
      throw await this.deleteSession({ topic: o6 }), new Error(t2);
    }
  }
  async isValidSessionOrPairingTopic(o6) {
    if (this.checkRecentlyDeleted(o6), this.client.session.keys.includes(o6)) await this.isValidSessionTopic(o6);
    else if (this.client.core.pairing.pairings.keys.includes(o6)) this.isValidPairingTopic(o6);
    else if (it2(o6, false)) {
      const { message: t2 } = Et2("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${o6}`);
      throw new Error(t2);
    } else {
      const { message: t2 } = Et2("MISSING_OR_INVALID", `session or pairing topic should be a string: ${o6}`);
      throw new Error(t2);
    }
  }
  async isValidProposalId(o6) {
    if (!Ea(o6)) {
      const { message: t2 } = Et2("MISSING_OR_INVALID", `proposal id should be a number: ${o6}`);
      throw new Error(t2);
    }
    if (!this.client.proposal.keys.includes(o6)) {
      const { message: t2 } = Et2("NO_MATCHING_KEY", `proposal id doesn't exist: ${o6}`);
      throw new Error(t2);
    }
    if (ii(this.client.proposal.get(o6).expiryTimestamp)) {
      await this.deleteProposal(o6);
      const { message: t2 } = Et2("EXPIRED", `proposal id: ${o6}`);
      throw new Error(t2);
    }
  }
};
var Cs2 = class extends Li2 {
  constructor(o6, t2) {
    super(o6, t2, dt3, me3), this.core = o6, this.logger = t2;
  }
};
var It4 = class extends Li2 {
  constructor(o6, t2) {
    super(o6, t2, ut3, me3), this.core = o6, this.logger = t2;
  }
};
var ks2 = class extends Li2 {
  constructor(o6, t2) {
    super(o6, t2, mt2, me3, (e3) => e3.id), this.core = o6, this.logger = t2;
  }
};
var Ds2 = class extends Li2 {
  constructor(o6, t2) {
    super(o6, t2, ft2, ae2, () => ce2), this.core = o6, this.logger = t2;
  }
};
var Ls2 = class extends Li2 {
  constructor(o6, t2) {
    super(o6, t2, St4, ae2), this.core = o6, this.logger = t2;
  }
};
var Ms2 = class extends Li2 {
  constructor(o6, t2) {
    super(o6, t2, Rt4, ae2, (e3) => e3.id), this.core = o6, this.logger = t2;
  }
};
var $s2 = Object.defineProperty;
var Ks = (S5, o6, t2) => o6 in S5 ? $s2(S5, o6, { enumerable: true, configurable: true, writable: true, value: t2 }) : S5[o6] = t2;
var Ue4 = (S5, o6, t2) => Ks(S5, typeof o6 != "symbol" ? o6 + "" : o6, t2);
var Us = class {
  constructor(o6, t2) {
    this.core = o6, this.logger = t2, Ue4(this, "authKeys"), Ue4(this, "pairingTopics"), Ue4(this, "requests"), this.authKeys = new Ds2(this.core, this.logger), this.pairingTopics = new Ls2(this.core, this.logger), this.requests = new Ms2(this.core, this.logger);
  }
  async init() {
    await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
  }
};
var Gs2 = Object.defineProperty;
var js2 = (S5, o6, t2) => o6 in S5 ? Gs2(S5, o6, { enumerable: true, configurable: true, writable: true, value: t2 }) : S5[o6] = t2;
var f7 = (S5, o6, t2) => js2(S5, typeof o6 != "symbol" ? o6 + "" : o6, t2);
var Ee3 = class _Ee extends J {
  constructor(o6) {
    super(o6), f7(this, "protocol", ke4), f7(this, "version", De3), f7(this, "name", we3.name), f7(this, "metadata"), f7(this, "core"), f7(this, "logger"), f7(this, "events", new import_events8.EventEmitter()), f7(this, "engine"), f7(this, "session"), f7(this, "proposal"), f7(this, "pendingRequest"), f7(this, "auth"), f7(this, "signConfig"), f7(this, "on", (e3, s4) => this.events.on(e3, s4)), f7(this, "once", (e3, s4) => this.events.once(e3, s4)), f7(this, "off", (e3, s4) => this.events.off(e3, s4)), f7(this, "removeListener", (e3, s4) => this.events.removeListener(e3, s4)), f7(this, "removeAllListeners", (e3) => this.events.removeAllListeners(e3)), f7(this, "connect", async (e3) => {
      try {
        return await this.engine.connect(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f7(this, "pair", async (e3) => {
      try {
        return await this.engine.pair(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f7(this, "approve", async (e3) => {
      try {
        return await this.engine.approve(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f7(this, "reject", async (e3) => {
      try {
        return await this.engine.reject(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f7(this, "update", async (e3) => {
      try {
        return await this.engine.update(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f7(this, "extend", async (e3) => {
      try {
        return await this.engine.extend(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f7(this, "request", async (e3) => {
      try {
        return await this.engine.request(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f7(this, "respond", async (e3) => {
      try {
        return await this.engine.respond(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f7(this, "ping", async (e3) => {
      try {
        return await this.engine.ping(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f7(this, "emit", async (e3) => {
      try {
        return await this.engine.emit(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f7(this, "disconnect", async (e3) => {
      try {
        return await this.engine.disconnect(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f7(this, "find", (e3) => {
      try {
        return this.engine.find(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f7(this, "getPendingSessionRequests", () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (e3) {
        throw this.logger.error(e3.message), e3;
      }
    }), f7(this, "authenticate", async (e3, s4) => {
      try {
        return await this.engine.authenticate(e3, s4);
      } catch (i6) {
        throw this.logger.error(i6.message), i6;
      }
    }), f7(this, "formatAuthMessage", (e3) => {
      try {
        return this.engine.formatAuthMessage(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f7(this, "approveSessionAuthenticate", async (e3) => {
      try {
        return await this.engine.approveSessionAuthenticate(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f7(this, "rejectSessionAuthenticate", async (e3) => {
      try {
        return await this.engine.rejectSessionAuthenticate(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), this.name = (o6 == null ? void 0 : o6.name) || we3.name, this.metadata = qs(o6 == null ? void 0 : o6.metadata), this.signConfig = o6 == null ? void 0 : o6.signConfig;
    const t2 = typeof (o6 == null ? void 0 : o6.logger) < "u" && typeof (o6 == null ? void 0 : o6.logger) != "string" ? o6.logger : (0, import_pino2.default)(k2({ level: (o6 == null ? void 0 : o6.logger) || we3.logger }));
    this.core = (o6 == null ? void 0 : o6.core) || new Zo3(o6), this.logger = E2(t2, this.name), this.session = new It4(this.core, this.logger), this.proposal = new Cs2(this.core, this.logger), this.pendingRequest = new ks2(this.core, this.logger), this.engine = new Vs2(this), this.auth = new Us(this.core, this.logger);
  }
  static async init(o6) {
    const t2 = new _Ee(o6);
    return await t2.initialize(), t2;
  }
  get context() {
    return y3(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success"), setTimeout(() => {
        this.engine.processRelayMessageCache();
      }, (0, import_time5.toMiliseconds)(import_time5.ONE_SECOND));
    } catch (o6) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(o6.message), o6;
    }
  }
};

// node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js
var import_events9 = __toESM(require_events());
var import_cross_fetch = __toESM(require_browser_ponyfill());
var P5 = Object.defineProperty;
var w5 = Object.defineProperties;
var E4 = Object.getOwnPropertyDescriptors;
var c7 = Object.getOwnPropertySymbols;
var L3 = Object.prototype.hasOwnProperty;
var O5 = Object.prototype.propertyIsEnumerable;
var l7 = (r4, t2, e3) => t2 in r4 ? P5(r4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : r4[t2] = e3;
var p5 = (r4, t2) => {
  for (var e3 in t2 || (t2 = {})) L3.call(t2, e3) && l7(r4, e3, t2[e3]);
  if (c7) for (var e3 of c7(t2)) O5.call(t2, e3) && l7(r4, e3, t2[e3]);
  return r4;
};
var v5 = (r4, t2) => w5(r4, E4(t2));
var j3 = { Accept: "application/json", "Content-Type": "application/json" };
var T3 = "POST";
var d4 = { headers: j3, method: T3 };
var g3 = 10;
var f8 = class {
  constructor(t2, e3 = false) {
    if (this.url = t2, this.disableProviderPing = e3, this.events = new import_events9.EventEmitter(), this.isAvailable = false, this.registering = false, !isHttpUrl(t2)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t2}`);
    this.url = t2, this.disableProviderPing = e3;
  }
  get connected() {
    return this.isAvailable;
  }
  get connecting() {
    return this.registering;
  }
  on(t2, e3) {
    this.events.on(t2, e3);
  }
  once(t2, e3) {
    this.events.once(t2, e3);
  }
  off(t2, e3) {
    this.events.off(t2, e3);
  }
  removeListener(t2, e3) {
    this.events.removeListener(t2, e3);
  }
  async open(t2 = this.url) {
    await this.register(t2);
  }
  async close() {
    if (!this.isAvailable) throw new Error("Connection already closed");
    this.onClose();
  }
  async send(t2) {
    this.isAvailable || await this.register();
    try {
      const e3 = safeJsonStringify(t2), s4 = await (await (0, import_cross_fetch.default)(this.url, v5(p5({}, d4), { body: e3 }))).json();
      this.onPayload({ data: s4 });
    } catch (e3) {
      this.onError(t2.id, e3);
    }
  }
  async register(t2 = this.url) {
    if (!isHttpUrl(t2)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t2}`);
    if (this.registering) {
      const e3 = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= e3 || this.events.listenerCount("open") >= e3) && this.events.setMaxListeners(e3 + 1), new Promise((s4, i6) => {
        this.events.once("register_error", (n6) => {
          this.resetMaxListeners(), i6(n6);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.isAvailable > "u") return i6(new Error("HTTP connection is missing or invalid"));
          s4();
        });
      });
    }
    this.url = t2, this.registering = true;
    try {
      if (!this.disableProviderPing) {
        const e3 = safeJsonStringify({ id: 1, jsonrpc: "2.0", method: "test", params: [] });
        await (0, import_cross_fetch.default)(t2, v5(p5({}, d4), { body: e3 }));
      }
      this.onOpen();
    } catch (e3) {
      const s4 = this.parseError(e3);
      throw this.events.emit("register_error", s4), this.onClose(), s4;
    }
  }
  onOpen() {
    this.isAvailable = true, this.registering = false, this.events.emit("open");
  }
  onClose() {
    this.isAvailable = false, this.registering = false, this.events.emit("close");
  }
  onPayload(t2) {
    if (typeof t2.data > "u") return;
    const e3 = typeof t2.data == "string" ? safeJsonParse(t2.data) : t2.data;
    this.events.emit("payload", e3);
  }
  onError(t2, e3) {
    const s4 = this.parseError(e3), i6 = s4.message || s4.toString(), n6 = formatJsonRpcError(t2, i6);
    this.events.emit("payload", n6);
  }
  parseError(t2, e3 = this.url) {
    return parseConnectionError(t2, e3, "HTTP");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > g3 && this.events.setMaxListeners(g3);
  }
};

// node_modules/@walletconnect/universal-provider/dist/index.es.js
var import_events10 = __toESM(require_events());
var et = "error";
var St5 = "wss://relay.walletconnect.org";
var Dt3 = "wc";
var qt4 = "universal_provider";
var U3 = `${Dt3}@2:${qt4}:`;
var st = "https://rpc.walletconnect.org/v1/";
var I4 = "generic";
var jt4 = `${st}bundler`;
var u4 = { DEFAULT_CHAIN_CHANGED: "default_chain_changed" };
function k6(s4) {
  return s4 == null || typeof s4 != "object" && typeof s4 != "function";
}
function it4(s4) {
  return Object.getOwnPropertySymbols(s4).filter((t2) => Object.prototype.propertyIsEnumerable.call(s4, t2));
}
function rt3(s4) {
  return s4 == null ? s4 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(s4);
}
var Rt5 = "[object RegExp]";
var nt3 = "[object String]";
var at2 = "[object Number]";
var ct3 = "[object Boolean]";
var ot2 = "[object Arguments]";
var _t4 = "[object Symbol]";
var Ut4 = "[object Date]";
var Ft3 = "[object Map]";
var Lt4 = "[object Set]";
var Mt4 = "[object Array]";
var xt4 = "[object ArrayBuffer]";
var Bt4 = "[object Object]";
var Gt4 = "[object DataView]";
var Jt4 = "[object Uint8Array]";
var zt4 = "[object Uint8ClampedArray]";
var kt4 = "[object Uint16Array]";
var Wt4 = "[object Uint32Array]";
var Kt5 = "[object Int8Array]";
var Vt4 = "[object Int16Array]";
var Xt4 = "[object Int32Array]";
var Yt4 = "[object Float32Array]";
var Qt4 = "[object Float64Array]";
function W4(s4) {
  return ArrayBuffer.isView(s4) && !(s4 instanceof DataView);
}
function Zt4(s4, t2) {
  return $3(s4, void 0, s4, /* @__PURE__ */ new Map(), t2);
}
function $3(s4, t2, e3, i6 = /* @__PURE__ */ new Map(), n6 = void 0) {
  const a4 = n6 == null ? void 0 : n6(s4, t2, e3, i6);
  if (a4 != null) return a4;
  if (k6(s4)) return s4;
  if (i6.has(s4)) return i6.get(s4);
  if (Array.isArray(s4)) {
    const r4 = new Array(s4.length);
    i6.set(s4, r4);
    for (let c8 = 0; c8 < s4.length; c8++) r4[c8] = $3(s4[c8], c8, e3, i6, n6);
    return Object.hasOwn(s4, "index") && (r4.index = s4.index), Object.hasOwn(s4, "input") && (r4.input = s4.input), r4;
  }
  if (s4 instanceof Date) return new Date(s4.getTime());
  if (s4 instanceof RegExp) {
    const r4 = new RegExp(s4.source, s4.flags);
    return r4.lastIndex = s4.lastIndex, r4;
  }
  if (s4 instanceof Map) {
    const r4 = /* @__PURE__ */ new Map();
    i6.set(s4, r4);
    for (const [c8, o6] of s4) r4.set(c8, $3(o6, c8, e3, i6, n6));
    return r4;
  }
  if (s4 instanceof Set) {
    const r4 = /* @__PURE__ */ new Set();
    i6.set(s4, r4);
    for (const c8 of s4) r4.add($3(c8, void 0, e3, i6, n6));
    return r4;
  }
  if (typeof Buffer < "u" && Buffer.isBuffer(s4)) return s4.subarray();
  if (W4(s4)) {
    const r4 = new (Object.getPrototypeOf(s4)).constructor(s4.length);
    i6.set(s4, r4);
    for (let c8 = 0; c8 < s4.length; c8++) r4[c8] = $3(s4[c8], c8, e3, i6, n6);
    return r4;
  }
  if (s4 instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && s4 instanceof SharedArrayBuffer) return s4.slice(0);
  if (s4 instanceof DataView) {
    const r4 = new DataView(s4.buffer.slice(0), s4.byteOffset, s4.byteLength);
    return i6.set(s4, r4), y6(r4, s4, e3, i6, n6), r4;
  }
  if (typeof File < "u" && s4 instanceof File) {
    const r4 = new File([s4], s4.name, { type: s4.type });
    return i6.set(s4, r4), y6(r4, s4, e3, i6, n6), r4;
  }
  if (s4 instanceof Blob) {
    const r4 = new Blob([s4], { type: s4.type });
    return i6.set(s4, r4), y6(r4, s4, e3, i6, n6), r4;
  }
  if (s4 instanceof Error) {
    const r4 = new s4.constructor();
    return i6.set(s4, r4), r4.message = s4.message, r4.name = s4.name, r4.stack = s4.stack, r4.cause = s4.cause, y6(r4, s4, e3, i6, n6), r4;
  }
  if (typeof s4 == "object" && Tt4(s4)) {
    const r4 = Object.create(Object.getPrototypeOf(s4));
    return i6.set(s4, r4), y6(r4, s4, e3, i6, n6), r4;
  }
  return s4;
}
function y6(s4, t2, e3 = s4, i6, n6) {
  const a4 = [...Object.keys(t2), ...it4(t2)];
  for (let r4 = 0; r4 < a4.length; r4++) {
    const c8 = a4[r4], o6 = Object.getOwnPropertyDescriptor(s4, c8);
    (o6 == null || o6.writable) && (s4[c8] = $3(t2[c8], c8, e3, i6, n6));
  }
}
function Tt4(s4) {
  switch (rt3(s4)) {
    case ot2:
    case Mt4:
    case xt4:
    case Gt4:
    case ct3:
    case Ut4:
    case Yt4:
    case Qt4:
    case Kt5:
    case Vt4:
    case Xt4:
    case Ft3:
    case at2:
    case Bt4:
    case Rt5:
    case Lt4:
    case nt3:
    case _t4:
    case Jt4:
    case zt4:
    case kt4:
    case Wt4:
      return true;
    default:
      return false;
  }
}
function te3(s4, t2) {
  return Zt4(s4, (e3, i6, n6, a4) => {
    const r4 = t2 == null ? void 0 : t2(e3, i6, n6, a4);
    if (r4 != null) return r4;
    if (typeof s4 == "object") switch (Object.prototype.toString.call(s4)) {
      case at2:
      case nt3:
      case ct3: {
        const c8 = new s4.constructor(s4 == null ? void 0 : s4.valueOf());
        return y6(c8, s4), c8;
      }
      case ot2: {
        const c8 = {};
        return y6(c8, s4), c8.length = s4.length, c8[Symbol.iterator] = s4[Symbol.iterator], c8;
      }
      default:
        return;
    }
  });
}
function ht3(s4) {
  return te3(s4);
}
function pt2(s4) {
  return s4 !== null && typeof s4 == "object" && rt3(s4) === "[object Arguments]";
}
function dt4(s4) {
  return typeof s4 == "object" && s4 !== null;
}
function ee3() {
}
function se3(s4) {
  return W4(s4);
}
function ie3(s4) {
  var _a2;
  if (typeof s4 != "object" || s4 == null) return false;
  if (Object.getPrototypeOf(s4) === null) return true;
  if (Object.prototype.toString.call(s4) !== "[object Object]") {
    const e3 = s4[Symbol.toStringTag];
    return e3 == null || !((_a2 = Object.getOwnPropertyDescriptor(s4, Symbol.toStringTag)) == null ? void 0 : _a2.writable) ? false : s4.toString() === `[object ${e3}]`;
  }
  let t2 = s4;
  for (; Object.getPrototypeOf(t2) !== null; ) t2 = Object.getPrototypeOf(t2);
  return Object.getPrototypeOf(s4) === t2;
}
function re2(s4) {
  if (k6(s4)) return s4;
  if (Array.isArray(s4) || W4(s4) || s4 instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && s4 instanceof SharedArrayBuffer) return s4.slice(0);
  const t2 = Object.getPrototypeOf(s4), e3 = t2.constructor;
  if (s4 instanceof Date || s4 instanceof Map || s4 instanceof Set) return new e3(s4);
  if (s4 instanceof RegExp) {
    const i6 = new e3(s4);
    return i6.lastIndex = s4.lastIndex, i6;
  }
  if (s4 instanceof DataView) return new e3(s4.buffer.slice(0));
  if (s4 instanceof Error) {
    const i6 = new e3(s4.message);
    return i6.stack = s4.stack, i6.name = s4.name, i6.cause = s4.cause, i6;
  }
  if (typeof File < "u" && s4 instanceof File) return new e3([s4], s4.name, { type: s4.type, lastModified: s4.lastModified });
  if (typeof s4 == "object") {
    const i6 = Object.create(t2);
    return Object.assign(i6, s4);
  }
  return s4;
}
function ne3(s4, ...t2) {
  const e3 = t2.slice(0, -1), i6 = t2[t2.length - 1];
  let n6 = s4;
  for (let a4 = 0; a4 < e3.length; a4++) {
    const r4 = e3[a4];
    n6 = F3(n6, r4, i6, /* @__PURE__ */ new Map());
  }
  return n6;
}
function F3(s4, t2, e3, i6) {
  if (k6(s4) && (s4 = Object(s4)), t2 == null || typeof t2 != "object") return s4;
  if (i6.has(t2)) return re2(i6.get(t2));
  if (i6.set(t2, s4), Array.isArray(t2)) {
    t2 = t2.slice();
    for (let a4 = 0; a4 < t2.length; a4++) t2[a4] = t2[a4] ?? void 0;
  }
  const n6 = [...Object.keys(t2), ...it4(t2)];
  for (let a4 = 0; a4 < n6.length; a4++) {
    const r4 = n6[a4];
    let c8 = t2[r4], o6 = s4[r4];
    if (pt2(c8) && (c8 = { ...c8 }), pt2(o6) && (o6 = { ...o6 }), typeof Buffer < "u" && Buffer.isBuffer(c8) && (c8 = ht3(c8)), Array.isArray(c8)) if (typeof o6 == "object" && o6 != null) {
      const w6 = [], v6 = Reflect.ownKeys(o6);
      for (let P6 = 0; P6 < v6.length; P6++) {
        const p6 = v6[P6];
        w6[p6] = o6[p6];
      }
      o6 = w6;
    } else o6 = [];
    const m4 = e3(o6, c8, r4, s4, t2, i6);
    m4 != null ? s4[r4] = m4 : Array.isArray(c8) || dt4(o6) && dt4(c8) ? s4[r4] = F3(o6, c8, e3, i6) : o6 == null && ie3(c8) ? s4[r4] = F3({}, c8, e3, i6) : o6 == null && se3(c8) ? s4[r4] = ht3(c8) : (o6 === void 0 || c8 !== void 0) && (s4[r4] = c8);
  }
  return s4;
}
function ae3(s4, ...t2) {
  return ne3(s4, ...t2, ee3);
}
var ce3 = Object.defineProperty;
var oe = Object.defineProperties;
var he4 = Object.getOwnPropertyDescriptors;
var ut4 = Object.getOwnPropertySymbols;
var pe4 = Object.prototype.hasOwnProperty;
var de4 = Object.prototype.propertyIsEnumerable;
var lt3 = (s4, t2, e3) => t2 in s4 ? ce3(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var L4 = (s4, t2) => {
  for (var e3 in t2 || (t2 = {})) pe4.call(t2, e3) && lt3(s4, e3, t2[e3]);
  if (ut4) for (var e3 of ut4(t2)) de4.call(t2, e3) && lt3(s4, e3, t2[e3]);
  return s4;
};
var ue3 = (s4, t2) => oe(s4, he4(t2));
function d5(s4, t2, e3) {
  var i6;
  const n6 = Fe(s4);
  return ((i6 = t2.rpcMap) == null ? void 0 : i6[n6.reference]) || `${st}?chainId=${n6.namespace}:${n6.reference}&projectId=${e3}`;
}
function b5(s4) {
  return s4.includes(":") ? s4.split(":")[1] : s4;
}
function ft3(s4) {
  return s4.map((t2) => `${t2.split(":")[0]}:${t2.split(":")[1]}`);
}
function le4(s4, t2) {
  const e3 = Object.keys(t2.namespaces).filter((n6) => n6.includes(s4));
  if (!e3.length) return [];
  const i6 = [];
  return e3.forEach((n6) => {
    const a4 = t2.namespaces[n6].accounts;
    i6.push(...a4);
  }), i6;
}
function M5(s4 = {}, t2 = {}) {
  const e3 = mt3(s4), i6 = mt3(t2);
  return ae3(e3, i6);
}
function mt3(s4) {
  var t2, e3, i6, n6, a4;
  const r4 = {};
  if (!Ve2(s4)) return r4;
  for (const [c8, o6] of Object.entries(s4)) {
    const m4 = kn2(c8) ? [c8] : o6.chains, w6 = o6.methods || [], v6 = o6.events || [], P6 = o6.rpcMap || {}, p6 = Wo2(c8);
    r4[p6] = ue3(L4(L4({}, r4[p6]), o6), { chains: ct2(m4, (t2 = r4[p6]) == null ? void 0 : t2.chains), methods: ct2(w6, (e3 = r4[p6]) == null ? void 0 : e3.methods), events: ct2(v6, (i6 = r4[p6]) == null ? void 0 : i6.events) }), (Ve2(P6) || Ve2(((n6 = r4[p6]) == null ? void 0 : n6.rpcMap) || {})) && (r4[p6].rpcMap = L4(L4({}, P6), (a4 = r4[p6]) == null ? void 0 : a4.rpcMap));
  }
  return r4;
}
function vt4(s4) {
  return s4.includes(":") ? s4.split(":")[2] : s4;
}
function gt4(s4) {
  const t2 = {};
  for (const [e3, i6] of Object.entries(s4)) {
    const n6 = i6.methods || [], a4 = i6.events || [], r4 = i6.accounts || [], c8 = kn2(e3) ? [e3] : i6.chains ? i6.chains : ft3(i6.accounts);
    t2[e3] = { chains: c8, methods: n6, events: a4, accounts: r4 };
  }
  return t2;
}
function K3(s4) {
  return typeof s4 == "number" ? s4 : s4.includes("0x") ? parseInt(s4, 16) : (s4 = s4.includes(":") ? s4.split(":")[1] : s4, isNaN(Number(s4)) ? s4 : Number(s4));
}
var Pt4 = {};
var h6 = (s4) => Pt4[s4];
var V3 = (s4, t2) => {
  Pt4[s4] = t2;
};
var fe4 = Object.defineProperty;
var me4 = (s4, t2, e3) => t2 in s4 ? fe4(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var O6 = (s4, t2, e3) => me4(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var ve3 = class {
  constructor(t2) {
    O6(this, "name", "polkadot"), O6(this, "client"), O6(this, "httpProviders"), O6(this, "events"), O6(this, "namespace"), O6(this, "chainId"), this.namespace = t2.namespace, this.events = h6("events"), this.client = h6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(u4.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i6;
      const n6 = b5(e3);
      t2[n6] = this.createHttpProvider(n6, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || d5(t2, this.namespace, this.client.core.projectId);
    if (!i6) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o4(new f8(i6, h6("disableProviderPing")));
  }
};
var ge4 = Object.defineProperty;
var Pe4 = Object.defineProperties;
var we4 = Object.getOwnPropertyDescriptors;
var wt4 = Object.getOwnPropertySymbols;
var ye4 = Object.prototype.hasOwnProperty;
var be4 = Object.prototype.propertyIsEnumerable;
var X2 = (s4, t2, e3) => t2 in s4 ? ge4(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var yt3 = (s4, t2) => {
  for (var e3 in t2 || (t2 = {})) ye4.call(t2, e3) && X2(s4, e3, t2[e3]);
  if (wt4) for (var e3 of wt4(t2)) be4.call(t2, e3) && X2(s4, e3, t2[e3]);
  return s4;
};
var bt3 = (s4, t2) => Pe4(s4, we4(t2));
var A3 = (s4, t2, e3) => X2(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Ie4 = class {
  constructor(t2) {
    A3(this, "name", "eip155"), A3(this, "client"), A3(this, "chainId"), A3(this, "namespace"), A3(this, "httpProviders"), A3(this, "events"), this.namespace = t2.namespace, this.events = h6("events"), this.client = h6("client"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());
  }
  async request(t2) {
    switch (t2.request.method) {
      case "eth_requestAccounts":
        return this.getAccounts();
      case "eth_accounts":
        return this.getAccounts();
      case "wallet_switchEthereumChain":
        return await this.handleSwitchChain(t2);
      case "eth_chainId":
        return parseInt(this.getDefaultChain());
      case "wallet_getCapabilities":
        return await this.getCapabilities(t2);
      case "wallet_getCallsStatus":
        return await this.getCallStatus(t2);
    }
    return this.namespace.methods.includes(t2.request.method) ? await this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(parseInt(t2), e3), this.chainId = parseInt(t2), this.events.emit(u4.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId.toString();
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || d5(`${this.name}:${t2}`, this.namespace, this.client.core.projectId);
    if (!i6) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o4(new f8(i6, h6("disableProviderPing")));
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i6;
      const n6 = parseInt(b5(e3));
      t2[n6] = this.createHttpProvider(n6, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[e3]);
    }), t2;
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  getHttpProvider() {
    const t2 = this.chainId, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  async handleSwitchChain(t2) {
    var e3, i6;
    let n6 = t2.request.params ? (e3 = t2.request.params[0]) == null ? void 0 : e3.chainId : "0x0";
    n6 = n6.startsWith("0x") ? n6 : `0x${n6}`;
    const a4 = parseInt(n6, 16);
    if (this.isChainApproved(a4)) this.setDefaultChain(`${a4}`);
    else if (this.namespace.methods.includes("wallet_switchEthereumChain")) await this.client.request({ topic: t2.topic, request: { method: t2.request.method, params: [{ chainId: n6 }] }, chainId: (i6 = this.namespace.chains) == null ? void 0 : i6[0] }), this.setDefaultChain(`${a4}`);
    else throw new Error(`Failed to switch to chain 'eip155:${a4}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);
    return null;
  }
  isChainApproved(t2) {
    return this.namespace.chains.includes(`${this.name}:${t2}`);
  }
  async getCapabilities(t2) {
    var e3, i6, n6, a4, r4;
    const c8 = (i6 = (e3 = t2.request) == null ? void 0 : e3.params) == null ? void 0 : i6[0], o6 = ((a4 = (n6 = t2.request) == null ? void 0 : n6.params) == null ? void 0 : a4[1]) || [], m4 = `${c8}${o6.join(",")}`;
    if (!c8) throw new Error("Missing address parameter in `wallet_getCapabilities` request");
    const w6 = this.client.session.get(t2.topic), v6 = ((r4 = w6 == null ? void 0 : w6.sessionProperties) == null ? void 0 : r4.capabilities) || {};
    if (v6 != null && v6[m4]) return v6 == null ? void 0 : v6[m4];
    const P6 = await this.client.request(t2);
    try {
      await this.client.session.update(t2.topic, { sessionProperties: bt3(yt3({}, w6.sessionProperties || {}), { capabilities: bt3(yt3({}, v6 || {}), { [m4]: P6 }) }) });
    } catch (p6) {
      console.warn("Failed to update session with capabilities", p6);
    }
    return P6;
  }
  async getCallStatus(t2) {
    var e3, i6;
    const n6 = this.client.session.get(t2.topic), a4 = (e3 = n6.sessionProperties) == null ? void 0 : e3.bundler_name;
    if (a4) {
      const c8 = this.getBundlerUrl(t2.chainId, a4);
      try {
        return await this.getUserOperationReceipt(c8, t2);
      } catch (o6) {
        console.warn("Failed to fetch call status from bundler", o6, c8);
      }
    }
    const r4 = (i6 = n6.sessionProperties) == null ? void 0 : i6.bundler_url;
    if (r4) try {
      return await this.getUserOperationReceipt(r4, t2);
    } catch (c8) {
      console.warn("Failed to fetch call status from custom bundler", c8, r4);
    }
    if (this.namespace.methods.includes(t2.request.method)) return await this.client.request(t2);
    throw new Error("Fetching call status not approved by the wallet.");
  }
  async getUserOperationReceipt(t2, e3) {
    var i6;
    const n6 = new URL(t2), a4 = await fetch(n6, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(formatJsonRpcRequest("eth_getUserOperationReceipt", [(i6 = e3.request.params) == null ? void 0 : i6[0]])) });
    if (!a4.ok) throw new Error(`Failed to fetch user operation receipt - ${a4.status}`);
    return await a4.json();
  }
  getBundlerUrl(t2, e3) {
    return `${jt4}?projectId=${this.client.core.projectId}&chainId=${t2}&bundler=${e3}`;
  }
};
var $e4 = Object.defineProperty;
var Oe4 = (s4, t2, e3) => t2 in s4 ? $e4(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var C4 = (s4, t2, e3) => Oe4(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Ae3 = class {
  constructor(t2) {
    C4(this, "name", "solana"), C4(this, "client"), C4(this, "httpProviders"), C4(this, "events"), C4(this, "namespace"), C4(this, "chainId"), this.namespace = t2.namespace, this.events = h6("events"), this.client = h6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(u4.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i6;
      const n6 = b5(e3);
      t2[n6] = this.createHttpProvider(n6, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || d5(t2, this.namespace, this.client.core.projectId);
    if (!i6) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o4(new f8(i6, h6("disableProviderPing")));
  }
};
var Ce4 = Object.defineProperty;
var He4 = (s4, t2, e3) => t2 in s4 ? Ce4(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var H2 = (s4, t2, e3) => He4(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Ee4 = class {
  constructor(t2) {
    H2(this, "name", "cosmos"), H2(this, "client"), H2(this, "httpProviders"), H2(this, "events"), H2(this, "namespace"), H2(this, "chainId"), this.namespace = t2.namespace, this.events = h6("events"), this.client = h6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(u4.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i6;
      const n6 = b5(e3);
      t2[n6] = this.createHttpProvider(n6, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || d5(t2, this.namespace, this.client.core.projectId);
    if (!i6) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o4(new f8(i6, h6("disableProviderPing")));
  }
};
var Ne3 = Object.defineProperty;
var Se4 = (s4, t2, e3) => t2 in s4 ? Ne3(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var E5 = (s4, t2, e3) => Se4(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var De4 = class {
  constructor(t2) {
    E5(this, "name", "algorand"), E5(this, "client"), E5(this, "httpProviders"), E5(this, "events"), E5(this, "namespace"), E5(this, "chainId"), this.namespace = t2.namespace, this.events = h6("events"), this.client = h6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    if (!this.httpProviders[t2]) {
      const i6 = e3 || d5(`${this.name}:${t2}`, this.namespace, this.client.core.projectId);
      if (!i6) throw new Error(`No RPC url provided for chainId: ${t2}`);
      this.setHttpProvider(t2, i6);
    }
    this.chainId = t2, this.events.emit(u4.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i6;
      t2[e3] = this.createHttpProvider(e3, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || d5(t2, this.namespace, this.client.core.projectId);
    return typeof i6 > "u" ? void 0 : new o4(new f8(i6, h6("disableProviderPing")));
  }
};
var qe4 = Object.defineProperty;
var je4 = (s4, t2, e3) => t2 in s4 ? qe4(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var N12 = (s4, t2, e3) => je4(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Re3 = class {
  constructor(t2) {
    N12(this, "name", "cip34"), N12(this, "client"), N12(this, "httpProviders"), N12(this, "events"), N12(this, "namespace"), N12(this, "chainId"), this.namespace = t2.namespace, this.events = h6("events"), this.client = h6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(u4.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      const i6 = this.getCardanoRPCUrl(e3), n6 = b5(e3);
      t2[n6] = this.createHttpProvider(n6, i6);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  getCardanoRPCUrl(t2) {
    const e3 = this.namespace.rpcMap;
    if (e3) return e3[t2];
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || this.getCardanoRPCUrl(t2);
    if (!i6) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o4(new f8(i6, h6("disableProviderPing")));
  }
};
var _e5 = Object.defineProperty;
var Ue5 = (s4, t2, e3) => t2 in s4 ? _e5(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var S4 = (s4, t2, e3) => Ue5(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Fe3 = class {
  constructor(t2) {
    S4(this, "name", "elrond"), S4(this, "client"), S4(this, "httpProviders"), S4(this, "events"), S4(this, "namespace"), S4(this, "chainId"), this.namespace = t2.namespace, this.events = h6("events"), this.client = h6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(u4.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i6;
      const n6 = b5(e3);
      t2[n6] = this.createHttpProvider(n6, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || d5(t2, this.namespace, this.client.core.projectId);
    if (!i6) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o4(new f8(i6, h6("disableProviderPing")));
  }
};
var Le5 = Object.defineProperty;
var Me5 = (s4, t2, e3) => t2 in s4 ? Le5(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var D2 = (s4, t2, e3) => Me5(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var xe3 = class {
  constructor(t2) {
    D2(this, "name", "multiversx"), D2(this, "client"), D2(this, "httpProviders"), D2(this, "events"), D2(this, "namespace"), D2(this, "chainId"), this.namespace = t2.namespace, this.events = h6("events"), this.client = h6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(u4.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i6;
      const n6 = b5(e3);
      t2[n6] = this.createHttpProvider(n6, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || d5(t2, this.namespace, this.client.core.projectId);
    if (!i6) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o4(new f8(i6, h6("disableProviderPing")));
  }
};
var Be5 = Object.defineProperty;
var Ge3 = (s4, t2, e3) => t2 in s4 ? Be5(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var q = (s4, t2, e3) => Ge3(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Je5 = class {
  constructor(t2) {
    q(this, "name", "near"), q(this, "client"), q(this, "httpProviders"), q(this, "events"), q(this, "namespace"), q(this, "chainId"), this.namespace = t2.namespace, this.events = h6("events"), this.client = h6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    if (this.chainId = t2, !this.httpProviders[t2]) {
      const i6 = e3 || d5(`${this.name}:${t2}`, this.namespace);
      if (!i6) throw new Error(`No RPC url provided for chainId: ${t2}`);
      this.setHttpProvider(t2, i6);
    }
    this.events.emit(u4.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i6;
      t2[e3] = this.createHttpProvider(e3, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || d5(t2, this.namespace);
    return typeof i6 > "u" ? void 0 : new o4(new f8(i6, h6("disableProviderPing")));
  }
};
var ze3 = Object.defineProperty;
var ke5 = (s4, t2, e3) => t2 in s4 ? ze3(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var j4 = (s4, t2, e3) => ke5(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var We5 = class {
  constructor(t2) {
    j4(this, "name", "tezos"), j4(this, "client"), j4(this, "httpProviders"), j4(this, "events"), j4(this, "namespace"), j4(this, "chainId"), this.namespace = t2.namespace, this.events = h6("events"), this.client = h6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    if (this.chainId = t2, !this.httpProviders[t2]) {
      const i6 = e3 || d5(`${this.name}:${t2}`, this.namespace);
      if (!i6) throw new Error(`No RPC url provided for chainId: ${t2}`);
      this.setHttpProvider(t2, i6);
    }
    this.events.emit(u4.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      t2[e3] = this.createHttpProvider(e3);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || d5(t2, this.namespace);
    return typeof i6 > "u" ? void 0 : new o4(new f8(i6));
  }
};
var Ke5 = Object.defineProperty;
var Ve4 = (s4, t2, e3) => t2 in s4 ? Ke5(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var R3 = (s4, t2, e3) => Ve4(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Xe3 = class {
  constructor(t2) {
    R3(this, "name", I4), R3(this, "client"), R3(this, "httpProviders"), R3(this, "events"), R3(this, "namespace"), R3(this, "chainId"), this.namespace = t2.namespace, this.events = h6("events"), this.client = h6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace.chains = [...new Set((this.namespace.chains || []).concat(t2.chains || []))], this.namespace.accounts = [...new Set((this.namespace.accounts || []).concat(t2.accounts || []))], this.namespace.methods = [...new Set((this.namespace.methods || []).concat(t2.methods || []))], this.namespace.events = [...new Set((this.namespace.events || []).concat(t2.events || []))], this.httpProviders = this.createHttpProviders();
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider(t2.chainId).request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(u4.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    var t2, e3;
    const i6 = {};
    return (e3 = (t2 = this.namespace) == null ? void 0 : t2.accounts) == null || e3.forEach((n6) => {
      const a4 = Fe(n6);
      i6[`${a4.namespace}:${a4.reference}`] = this.createHttpProvider(n6);
    }), i6;
  }
  getHttpProvider(t2) {
    const e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || d5(t2, this.namespace, this.client.core.projectId);
    if (!i6) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o4(new f8(i6, h6("disableProviderPing")));
  }
};
var Ye4 = Object.defineProperty;
var Qe4 = Object.defineProperties;
var Ze3 = Object.getOwnPropertyDescriptors;
var It5 = Object.getOwnPropertySymbols;
var Te4 = Object.prototype.hasOwnProperty;
var ts2 = Object.prototype.propertyIsEnumerable;
var Y3 = (s4, t2, e3) => t2 in s4 ? Ye4(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var x5 = (s4, t2) => {
  for (var e3 in t2 || (t2 = {})) Te4.call(t2, e3) && Y3(s4, e3, t2[e3]);
  if (It5) for (var e3 of It5(t2)) ts2.call(t2, e3) && Y3(s4, e3, t2[e3]);
  return s4;
};
var Q4 = (s4, t2) => Qe4(s4, Ze3(t2));
var l8 = (s4, t2, e3) => Y3(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var B3 = class _B {
  constructor(t2) {
    l8(this, "client"), l8(this, "namespaces"), l8(this, "optionalNamespaces"), l8(this, "sessionProperties"), l8(this, "scopedProperties"), l8(this, "events", new import_events10.default()), l8(this, "rpcProviders", {}), l8(this, "session"), l8(this, "providerOpts"), l8(this, "logger"), l8(this, "uri"), l8(this, "disableProviderPing", false), this.providerOpts = t2, this.logger = typeof (t2 == null ? void 0 : t2.logger) < "u" && typeof (t2 == null ? void 0 : t2.logger) != "string" ? t2.logger : (0, import_pino2.default)(k2({ level: (t2 == null ? void 0 : t2.logger) || et })), this.disableProviderPing = (t2 == null ? void 0 : t2.disableProviderPing) || false;
  }
  static async init(t2) {
    const e3 = new _B(t2);
    return await e3.initialize(), e3;
  }
  async request(t2, e3, i6) {
    const [n6, a4] = this.validateChain(e3);
    if (!this.session) throw new Error("Please call connect() before request()");
    return await this.getProvider(n6).request({ request: x5({}, t2), chainId: `${n6}:${a4}`, topic: this.session.topic, expiry: i6 });
  }
  sendAsync(t2, e3, i6, n6) {
    const a4 = (/* @__PURE__ */ new Date()).getTime();
    this.request(t2, i6, n6).then((r4) => e3(null, formatJsonRpcResult(a4, r4))).catch((r4) => e3(r4, void 0));
  }
  async enable() {
    if (!this.client) throw new Error("Sign Client not initialized");
    return this.session || await this.connect({ namespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties }), await this.requestAccounts();
  }
  async disconnect() {
    var t2;
    if (!this.session) throw new Error("Please call connect() before enable()");
    await this.client.disconnect({ topic: (t2 = this.session) == null ? void 0 : t2.topic, reason: Kt2("USER_DISCONNECTED") }), await this.cleanup();
  }
  async connect(t2) {
    if (!this.client) throw new Error("Sign Client not initialized");
    if (this.setNamespaces(t2), await this.cleanupPendingPairings(), !t2.skipPairing) return await this.pair(t2.pairingTopic);
  }
  async authenticate(t2, e3) {
    if (!this.client) throw new Error("Sign Client not initialized");
    this.setNamespaces(t2), await this.cleanupPendingPairings();
    const { uri: i6, response: n6 } = await this.client.authenticate(t2, e3);
    i6 && (this.uri = i6, this.events.emit("display_uri", i6));
    const a4 = await n6();
    if (this.session = a4.session, this.session) {
      const r4 = gt4(this.session.namespaces);
      this.namespaces = M5(this.namespaces, r4), await this.persist("namespaces", this.namespaces), this.onConnect();
    }
    return a4;
  }
  on(t2, e3) {
    this.events.on(t2, e3);
  }
  once(t2, e3) {
    this.events.once(t2, e3);
  }
  removeListener(t2, e3) {
    this.events.removeListener(t2, e3);
  }
  off(t2, e3) {
    this.events.off(t2, e3);
  }
  get isWalletConnect() {
    return true;
  }
  async pair(t2) {
    const { uri: e3, approval: i6 } = await this.client.connect({ pairingTopic: t2, requiredNamespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties });
    e3 && (this.uri = e3, this.events.emit("display_uri", e3));
    const n6 = await i6();
    this.session = n6;
    const a4 = gt4(n6.namespaces);
    return this.namespaces = M5(this.namespaces, a4), await this.persist("namespaces", this.namespaces), await this.persist("optionalNamespaces", this.optionalNamespaces), this.onConnect(), this.session;
  }
  setDefaultChain(t2, e3) {
    try {
      if (!this.session) return;
      const [i6, n6] = this.validateChain(t2), a4 = this.getProvider(i6);
      a4.name === I4 ? a4.setDefaultChain(`${i6}:${n6}`, e3) : a4.setDefaultChain(n6, e3);
    } catch (i6) {
      if (!/Please call connect/.test(i6.message)) throw i6;
    }
  }
  async cleanupPendingPairings(t2 = {}) {
    this.logger.info("Cleaning up inactive pairings...");
    const e3 = this.client.pairing.getAll();
    if (me2(e3)) {
      for (const i6 of e3) t2.deletePairings ? this.client.core.expirer.set(i6.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(i6.topic);
      this.logger.info(`Inactive pairings cleared: ${e3.length}`);
    }
  }
  abortPairingAttempt() {
    this.logger.warn("abortPairingAttempt is deprecated. This is now a no-op.");
  }
  async checkStorage() {
    this.namespaces = await this.getFromStore("namespaces") || {}, this.optionalNamespaces = await this.getFromStore("optionalNamespaces") || {}, this.session && this.createProviders();
  }
  async initialize() {
    this.logger.trace("Initialized"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();
  }
  async createClient() {
    var t2, e3;
    if (this.client = this.providerOpts.client || await Ee3.init({ core: this.providerOpts.core, logger: this.providerOpts.logger || et, relayUrl: this.providerOpts.relayUrl || St5, projectId: this.providerOpts.projectId, metadata: this.providerOpts.metadata, storageOptions: this.providerOpts.storageOptions, storage: this.providerOpts.storage, name: this.providerOpts.name, customStoragePrefix: this.providerOpts.customStoragePrefix, telemetryEnabled: this.providerOpts.telemetryEnabled }), this.providerOpts.session) try {
      this.session = this.client.session.get(this.providerOpts.session.topic);
    } catch (i6) {
      throw this.logger.error("Failed to get session", i6), new Error(`The provided session: ${(e3 = (t2 = this.providerOpts) == null ? void 0 : t2.session) == null ? void 0 : e3.topic} doesn't exist in the Sign client`);
    }
    else {
      const i6 = this.client.session.getAll();
      this.session = i6[0];
    }
    this.logger.trace("SignClient Initialized");
  }
  createProviders() {
    if (!this.client) throw new Error("Sign Client not initialized");
    if (!this.session) throw new Error("Session not initialized. Please call connect() before enable()");
    const t2 = [...new Set(Object.keys(this.session.namespaces).map((e3) => Wo2(e3)))];
    V3("client", this.client), V3("events", this.events), V3("disableProviderPing", this.disableProviderPing), t2.forEach((e3) => {
      if (!this.session) return;
      const i6 = le4(e3, this.session), n6 = ft3(i6), a4 = M5(this.namespaces, this.optionalNamespaces), r4 = Q4(x5({}, a4[e3]), { accounts: i6, chains: n6 });
      switch (e3) {
        case "eip155":
          this.rpcProviders[e3] = new Ie4({ namespace: r4 });
          break;
        case "algorand":
          this.rpcProviders[e3] = new De4({ namespace: r4 });
          break;
        case "solana":
          this.rpcProviders[e3] = new Ae3({ namespace: r4 });
          break;
        case "cosmos":
          this.rpcProviders[e3] = new Ee4({ namespace: r4 });
          break;
        case "polkadot":
          this.rpcProviders[e3] = new ve3({ namespace: r4 });
          break;
        case "cip34":
          this.rpcProviders[e3] = new Re3({ namespace: r4 });
          break;
        case "elrond":
          this.rpcProviders[e3] = new Fe3({ namespace: r4 });
          break;
        case "multiversx":
          this.rpcProviders[e3] = new xe3({ namespace: r4 });
          break;
        case "near":
          this.rpcProviders[e3] = new Je5({ namespace: r4 });
          break;
        case "tezos":
          this.rpcProviders[e3] = new We5({ namespace: r4 });
          break;
        default:
          this.rpcProviders[I4] ? this.rpcProviders[I4].updateNamespace(r4) : this.rpcProviders[I4] = new Xe3({ namespace: r4 });
      }
    });
  }
  registerEventListeners() {
    if (typeof this.client > "u") throw new Error("Sign Client is not initialized");
    this.client.on("session_ping", (t2) => {
      var e3;
      const { topic: i6 } = t2;
      i6 === ((e3 = this.session) == null ? void 0 : e3.topic) && this.events.emit("session_ping", t2);
    }), this.client.on("session_event", (t2) => {
      var e3;
      const { params: i6, topic: n6 } = t2;
      if (n6 !== ((e3 = this.session) == null ? void 0 : e3.topic)) return;
      const { event: a4 } = i6;
      if (a4.name === "accountsChanged") {
        const r4 = a4.data;
        r4 && me2(r4) && this.events.emit("accountsChanged", r4.map(vt4));
      } else if (a4.name === "chainChanged") {
        const r4 = i6.chainId, c8 = i6.event.data, o6 = Wo2(r4), m4 = K3(r4) !== K3(c8) ? `${o6}:${K3(c8)}` : r4;
        this.onChainChanged(m4);
      } else this.events.emit(a4.name, a4.data);
      this.events.emit("session_event", t2);
    }), this.client.on("session_update", ({ topic: t2, params: e3 }) => {
      var i6, n6;
      if (t2 !== ((i6 = this.session) == null ? void 0 : i6.topic)) return;
      const { namespaces: a4 } = e3, r4 = (n6 = this.client) == null ? void 0 : n6.session.get(t2);
      this.session = Q4(x5({}, r4), { namespaces: a4 }), this.onSessionUpdate(), this.events.emit("session_update", { topic: t2, params: e3 });
    }), this.client.on("session_delete", async (t2) => {
      var e3;
      t2.topic === ((e3 = this.session) == null ? void 0 : e3.topic) && (await this.cleanup(), this.events.emit("session_delete", t2), this.events.emit("disconnect", Q4(x5({}, Kt2("USER_DISCONNECTED")), { data: t2.topic })));
    }), this.on(u4.DEFAULT_CHAIN_CHANGED, (t2) => {
      this.onChainChanged(t2, true);
    });
  }
  getProvider(t2) {
    return this.rpcProviders[t2] || this.rpcProviders[I4];
  }
  onSessionUpdate() {
    Object.keys(this.rpcProviders).forEach((t2) => {
      var e3;
      this.getProvider(t2).updateNamespace((e3 = this.session) == null ? void 0 : e3.namespaces[t2]);
    });
  }
  setNamespaces(t2) {
    const { namespaces: e3 = {}, optionalNamespaces: i6 = {}, sessionProperties: n6, scopedProperties: a4 } = t2;
    this.optionalNamespaces = M5(e3, i6), this.sessionProperties = n6, this.scopedProperties = a4;
  }
  validateChain(t2) {
    const [e3, i6] = (t2 == null ? void 0 : t2.split(":")) || ["", ""];
    if (!this.namespaces || !Object.keys(this.namespaces).length) return [e3, i6];
    if (e3 && !Object.keys(this.namespaces || {}).map((r4) => Wo2(r4)).includes(e3)) throw new Error(`Namespace '${e3}' is not configured. Please call connect() first with namespace config.`);
    if (e3 && i6) return [e3, i6];
    const n6 = Wo2(Object.keys(this.namespaces)[0]), a4 = this.rpcProviders[n6].getDefaultChain();
    return [n6, a4];
  }
  async requestAccounts() {
    const [t2] = this.validateChain();
    return await this.getProvider(t2).requestAccounts();
  }
  async onChainChanged(t2, e3 = false) {
    if (!this.namespaces) return;
    const [i6, n6] = this.validateChain(t2);
    if (!n6) return;
    this.updateNamespaceChain(i6, n6), this.events.emit("chainChanged", n6);
    const a4 = this.getProvider(i6).getDefaultChain();
    e3 || this.getProvider(i6).setDefaultChain(n6), this.emitAccountsChangedOnChainChange({ namespace: i6, previousChainId: a4, newChainId: t2 }), await this.persist("namespaces", this.namespaces);
  }
  emitAccountsChangedOnChainChange({ namespace: t2, previousChainId: e3, newChainId: i6 }) {
    var n6, a4;
    try {
      if (e3 === i6) return;
      const r4 = (a4 = (n6 = this.session) == null ? void 0 : n6.namespaces[t2]) == null ? void 0 : a4.accounts;
      if (!r4) return;
      const c8 = r4.filter((o6) => o6.includes(`${i6}:`)).map(vt4);
      if (!me2(c8)) return;
      this.events.emit("accountsChanged", c8);
    } catch (r4) {
      this.logger.warn("Failed to emit accountsChanged on chain change", r4);
    }
  }
  updateNamespaceChain(t2, e3) {
    if (!this.namespaces) return;
    const i6 = this.namespaces[t2] ? t2 : `${t2}:${e3}`, n6 = { chains: [], methods: [], events: [], defaultChain: e3 };
    this.namespaces[i6] ? this.namespaces[i6] && (this.namespaces[i6].defaultChain = e3) : this.namespaces[i6] = n6;
  }
  onConnect() {
    this.createProviders(), this.events.emit("connect", { session: this.session });
  }
  async cleanup() {
    this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, await this.deleteFromStore("namespaces"), await this.deleteFromStore("optionalNamespaces"), await this.deleteFromStore("sessionProperties"), this.session = void 0, await this.cleanupPendingPairings({ deletePairings: true }), await this.cleanupStorage();
  }
  async persist(t2, e3) {
    var i6;
    const n6 = ((i6 = this.session) == null ? void 0 : i6.topic) || "";
    await this.client.core.storage.setItem(`${U3}/${t2}${n6}`, e3);
  }
  async getFromStore(t2) {
    var e3;
    const i6 = ((e3 = this.session) == null ? void 0 : e3.topic) || "";
    return await this.client.core.storage.getItem(`${U3}/${t2}${i6}`);
  }
  async deleteFromStore(t2) {
    var e3;
    const i6 = ((e3 = this.session) == null ? void 0 : e3.topic) || "";
    await this.client.core.storage.removeItem(`${U3}/${t2}${i6}`);
  }
  async cleanupStorage() {
    var t2;
    try {
      if (((t2 = this.client) == null ? void 0 : t2.session.length) > 0) return;
      const e3 = await this.client.core.storage.getKeys();
      for (const i6 of e3) i6.startsWith(U3) && await this.client.core.storage.removeItem(i6);
    } catch (e3) {
      this.logger.warn("Failed to cleanup storage", e3);
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/SIWXUtil.js
var addEmbeddedWalletSessionPromise = null;
var SIWXUtil = {
  getSIWX() {
    return OptionsController.state.siwx;
  },
  async initializeIfEnabled() {
    var _a2;
    const siwx = OptionsController.state.siwx;
    const caipAddress = ChainController.getActiveCaipAddress();
    if (!(siwx && caipAddress)) {
      return;
    }
    const [namespace, chainId, address] = caipAddress.split(":");
    if (!ChainController.checkIfSupportedNetwork(namespace)) {
      return;
    }
    try {
      if (addEmbeddedWalletSessionPromise) {
        await addEmbeddedWalletSessionPromise;
      }
      const sessions = await siwx.getSessions(`${namespace}:${chainId}`, address);
      if (sessions.length) {
        return;
      }
      await ModalController.open({
        view: "SIWXSignMessage"
      });
    } catch (error) {
      console.error("SIWXUtil:initializeIfEnabled", error);
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_ERROR",
        properties: this.getSIWXEventProperties()
      });
      await ((_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.disconnect().catch(console.error));
      RouterController.reset("Connect");
      SnackController.showError("A problem occurred while trying initialize authentication");
    }
  },
  async requestSignMessage() {
    const siwx = OptionsController.state.siwx;
    const address = CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress());
    const network = ChainController.getActiveCaipNetwork();
    const client = ConnectionController._getClient();
    if (!siwx) {
      throw new Error("SIWX is not enabled");
    }
    if (!address) {
      throw new Error("No ActiveCaipAddress found");
    }
    if (!network) {
      throw new Error("No ActiveCaipNetwork or client found");
    }
    if (!client) {
      throw new Error("No ConnectionController client found");
    }
    try {
      const siwxMessage = await siwx.createMessage({
        chainId: network.caipNetworkId,
        accountAddress: address
      });
      const message = siwxMessage.toString();
      const connectorId = ConnectorController.getConnectorId(network.chainNamespace);
      if (connectorId === ConstantsUtil.CONNECTOR_ID.AUTH) {
        RouterController.pushTransactionStack({});
      }
      const signature = await client.signMessage(message);
      await siwx.addSession({
        data: siwxMessage,
        message,
        signature
      });
      ChainController.setLastConnectedSIWECaipNetwork(network);
      ModalController.close();
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_SUCCESS",
        properties: this.getSIWXEventProperties()
      });
    } catch (error) {
      const properties = this.getSIWXEventProperties();
      if (!ModalController.state.open || RouterController.state.view === "ApproveTransaction") {
        await ModalController.open({
          view: "SIWXSignMessage"
        });
      }
      SnackController.showError("Error signing message");
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_ERROR",
        properties
      });
      console.error("SWIXUtil:requestSignMessage", error);
    }
  },
  async cancelSignMessage() {
    var _a2;
    try {
      const siwx = this.getSIWX();
      const isRequired = (_a2 = siwx == null ? void 0 : siwx.getRequired) == null ? void 0 : _a2.call(siwx);
      if (isRequired) {
        const lastNetwork = ChainController.getLastConnectedSIWECaipNetwork();
        if (lastNetwork) {
          const sessions = await (siwx == null ? void 0 : siwx.getSessions(lastNetwork == null ? void 0 : lastNetwork.caipNetworkId, CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress()) || ""));
          if (sessions && sessions.length > 0) {
            await ChainController.switchActiveNetwork(lastNetwork);
          } else {
            await ConnectionController.disconnect();
          }
        } else {
          await ConnectionController.disconnect();
        }
      } else {
        ModalController.close();
      }
      ModalController.close();
      EventsController.sendEvent({
        event: "CLICK_CANCEL_SIWX",
        type: "track",
        properties: this.getSIWXEventProperties()
      });
    } catch (error) {
      console.error("SIWXUtil:cancelSignMessage", error);
    }
  },
  async getAllSessions() {
    const siwx = this.getSIWX();
    const allRequestedCaipNetworks = ChainController.getAllRequestedCaipNetworks();
    const sessions = [];
    await Promise.all(allRequestedCaipNetworks.map(async (caipNetwork) => {
      const session = await (siwx == null ? void 0 : siwx.getSessions(caipNetwork.caipNetworkId, CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress()) || ""));
      if (session) {
        sessions.push(...session);
      }
    }));
    return sessions;
  },
  async getSessions() {
    const siwx = OptionsController.state.siwx;
    const address = CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress());
    const network = ChainController.getActiveCaipNetwork();
    if (!(siwx && address && network)) {
      return [];
    }
    return siwx.getSessions(network.caipNetworkId, address);
  },
  async isSIWXCloseDisabled() {
    var _a2;
    const siwx = this.getSIWX();
    if (siwx) {
      const isApproveSignScreen = RouterController.state.view === "ApproveTransaction";
      const isSiwxSignMessage = RouterController.state.view === "SIWXSignMessage";
      if (isApproveSignScreen || isSiwxSignMessage) {
        return ((_a2 = siwx.getRequired) == null ? void 0 : _a2.call(siwx)) && (await this.getSessions()).length === 0;
      }
    }
    return false;
  },
  async authConnectorAuthenticate({ authConnector, chainId, socialUri, preferredAccountType, chainNamespace }) {
    var _a2;
    const siwx = SIWXUtil.getSIWX();
    if (!siwx || !chainNamespace.includes(ConstantsUtil.CHAIN.EVM)) {
      const result2 = await authConnector.connect({
        chainId,
        socialUri,
        preferredAccountType
      });
      return {
        address: result2.address,
        chainId: result2.chainId,
        accounts: result2.accounts
      };
    }
    const siwxMessage = await siwx.createMessage({
      chainId: ((_a2 = ChainController.getActiveCaipNetwork()) == null ? void 0 : _a2.caipNetworkId) || "",
      accountAddress: "<<AccountAddress>>"
    });
    const siwxMessageData = {
      accountAddress: siwxMessage.accountAddress,
      chainId: siwxMessage.chainId,
      domain: siwxMessage.domain,
      uri: siwxMessage.uri,
      version: siwxMessage.version,
      nonce: siwxMessage.nonce,
      notBefore: siwxMessage.notBefore,
      statement: siwxMessage.statement,
      resources: siwxMessage.resources,
      requestId: siwxMessage.requestId,
      issuedAt: siwxMessage.issuedAt,
      expirationTime: siwxMessage.expirationTime,
      serializedMessage: siwxMessage.toString()
    };
    const result = await authConnector.connect({
      chainId,
      socialUri,
      siwxMessage: siwxMessageData,
      preferredAccountType
    });
    siwxMessageData.accountAddress = result.address;
    siwxMessageData.serializedMessage = result.message || "";
    if (result.signature && result.message) {
      const promise = SIWXUtil.addEmbeddedWalletSession(siwxMessageData, result.message, result.signature);
      await promise;
    }
    return {
      address: result.address,
      chainId: result.chainId,
      accounts: result.accounts
    };
  },
  async addEmbeddedWalletSession(siwxMessageData, message, signature) {
    if (addEmbeddedWalletSessionPromise) {
      return addEmbeddedWalletSessionPromise;
    }
    const siwx = SIWXUtil.getSIWX();
    if (!siwx) {
      return Promise.resolve();
    }
    addEmbeddedWalletSessionPromise = siwx.addSession({
      data: siwxMessageData,
      message,
      signature
    }).finally(() => {
      addEmbeddedWalletSessionPromise = null;
    });
    return addEmbeddedWalletSessionPromise;
  },
  async universalProviderAuthenticate({ universalProvider, chains, methods }) {
    var _a2, _b, _c2;
    const siwx = SIWXUtil.getSIWX();
    const namespaces = new Set(chains.map((chain2) => chain2.split(":")[0]));
    if (!siwx || namespaces.size !== 1 || !namespaces.has("eip155")) {
      return false;
    }
    const siwxMessage = await siwx.createMessage({
      chainId: ((_a2 = ChainController.getActiveCaipNetwork()) == null ? void 0 : _a2.caipNetworkId) || "",
      accountAddress: ""
    });
    const result = await universalProvider.authenticate({
      nonce: siwxMessage.nonce,
      domain: siwxMessage.domain,
      uri: siwxMessage.uri,
      exp: siwxMessage.expirationTime,
      iat: siwxMessage.issuedAt,
      nbf: siwxMessage.notBefore,
      requestId: siwxMessage.requestId,
      version: siwxMessage.version,
      resources: siwxMessage.resources,
      statement: siwxMessage.statement,
      chainId: siwxMessage.chainId,
      methods,
      // The first chainId is what is used for universal provider to build the message
      chains: [siwxMessage.chainId, ...chains.filter((chain2) => chain2 !== siwxMessage.chainId)]
    });
    SnackController.showLoading("Authenticating...", { autoClose: false });
    AccountController.setConnectedWalletInfo({
      ...result.session.peer.metadata,
      name: result.session.peer.metadata.name,
      icon: (_b = result.session.peer.metadata.icons) == null ? void 0 : _b[0],
      type: "WALLET_CONNECT"
    }, Array.from(namespaces)[0]);
    if ((_c2 = result == null ? void 0 : result.auths) == null ? void 0 : _c2.length) {
      const sessions = result.auths.map((cacao) => {
        const message = universalProvider.client.formatAuthMessage({
          request: cacao.p,
          iss: cacao.p.iss
        });
        return {
          data: {
            ...cacao.p,
            accountAddress: cacao.p.iss.split(":").slice(-1).join(""),
            chainId: cacao.p.iss.split(":").slice(2, 4).join(":"),
            uri: cacao.p.aud,
            version: cacao.p.version || siwxMessage.version,
            expirationTime: cacao.p.exp,
            issuedAt: cacao.p.iat,
            notBefore: cacao.p.nbf
          },
          message,
          signature: cacao.s.s,
          cacao
        };
      });
      try {
        await siwx.setSessions(sessions);
        EventsController.sendEvent({
          type: "track",
          event: "SIWX_AUTH_SUCCESS",
          properties: SIWXUtil.getSIWXEventProperties()
        });
      } catch (error) {
        console.error("SIWX:universalProviderAuth - failed to set sessions", error);
        EventsController.sendEvent({
          type: "track",
          event: "SIWX_AUTH_ERROR",
          properties: SIWXUtil.getSIWXEventProperties()
        });
        await universalProvider.disconnect().catch(console.error);
        throw error;
      } finally {
        SnackController.hide();
      }
    }
    return true;
  },
  getSIWXEventProperties() {
    var _a2;
    const activeChainNamespace = ChainController.state.activeChain;
    return {
      network: ((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId) || "",
      isSmartAccount: getPreferredAccountType(activeChainNamespace) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
    };
  },
  async clearSessions() {
    const siwx = this.getSIWX();
    if (siwx) {
      await siwx.setSessions([]);
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ModalUtil.js
var ModalUtil = {
  isUnsupportedChainView() {
    return RouterController.state.view === "UnsupportedChain" || RouterController.state.view === "SwitchNetwork" && RouterController.state.history.includes("UnsupportedChain");
  },
  async safeClose() {
    if (this.isUnsupportedChainView()) {
      ModalController.shake();
      return;
    }
    const isSIWXCloseDisabled = await SIWXUtil.isSIWXCloseDisabled();
    if (isSIWXCloseDisabled) {
      ModalController.shake();
      return;
    }
    ModalController.close();
  }
};

// node_modules/@reown/appkit-ui/dist/esm/src/utils/MathUtil.js
var MathUtil = {
  interpolate(inputRange, outputRange, value) {
    if (inputRange.length !== 2 || outputRange.length !== 2) {
      throw new Error("inputRange and outputRange must be an array of length 2");
    }
    const originalRangeMin = inputRange[0] || 0;
    const originalRangeMax = inputRange[1] || 0;
    const newRangeMin = outputRange[0] || 0;
    const newRangeMax = outputRange[1] || 0;
    if (value < originalRangeMin) {
      return newRangeMin;
    }
    if (value > originalRangeMax) {
      return newRangeMax;
    }
    return (newRangeMax - newRangeMin) / (originalRangeMax - originalRangeMin) * (value - originalRangeMin) + newRangeMin;
  }
};

// node_modules/@reown/appkit-ui/dist/esm/src/utils/ThemeUtil.js
var themeTag = void 0;
var darkModeTag = void 0;
var lightModeTag = void 0;
function initializeTheming(themeVariables, themeMode) {
  themeTag = document.createElement("style");
  darkModeTag = document.createElement("style");
  lightModeTag = document.createElement("style");
  themeTag.textContent = createRootStyles(themeVariables).core.cssText;
  darkModeTag.textContent = createRootStyles(themeVariables).dark.cssText;
  lightModeTag.textContent = createRootStyles(themeVariables).light.cssText;
  document.head.appendChild(themeTag);
  document.head.appendChild(darkModeTag);
  document.head.appendChild(lightModeTag);
  setColorTheme(themeMode);
}
function setColorTheme(themeMode) {
  if (darkModeTag && lightModeTag) {
    if (themeMode === "light") {
      darkModeTag.removeAttribute("media");
      lightModeTag.media = "enabled";
    } else {
      lightModeTag.removeAttribute("media");
      darkModeTag.media = "enabled";
    }
  }
}
function setThemeVariables(themeVariables) {
  if (themeTag && darkModeTag && lightModeTag) {
    themeTag.textContent = createRootStyles(themeVariables).core.cssText;
    darkModeTag.textContent = createRootStyles(themeVariables).dark.cssText;
    lightModeTag.textContent = createRootStyles(themeVariables).light.cssText;
  }
}
function createRootStyles(themeVariables) {
  return {
    core: css`
      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
      @keyframes w3m-shake {
        0% {
          transform: scale(1) rotate(0deg);
        }
        20% {
          transform: scale(1) rotate(-1deg);
        }
        40% {
          transform: scale(1) rotate(1.5deg);
        }
        60% {
          transform: scale(1) rotate(-1.5deg);
        }
        80% {
          transform: scale(1) rotate(1deg);
        }
        100% {
          transform: scale(1) rotate(0deg);
        }
      }
      @keyframes w3m-iframe-fade-out {
        0% {
          opacity: 1;
        }
        100% {
          opacity: 0;
        }
      }
      @keyframes w3m-iframe-zoom-in {
        0% {
          transform: translateY(50px);
          opacity: 0;
        }
        100% {
          transform: translateY(0px);
          opacity: 1;
        }
      }
      @keyframes w3m-iframe-zoom-in-mobile {
        0% {
          transform: scale(0.95);
          opacity: 0;
        }
        100% {
          transform: scale(1);
          opacity: 1;
        }
      }
      :root {
        --w3m-modal-width: 360px;
        --w3m-color-mix-strength: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-color-mix-strength"]) ? `${themeVariables["--w3m-color-mix-strength"]}%` : "0%")};
        --w3m-font-family: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-font-family"]) || "Inter, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;")};
        --w3m-font-size-master: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-font-size-master"]) || "10px")};
        --w3m-border-radius-master: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-border-radius-master"]) || "4px")};
        --w3m-z-index: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-z-index"]) || 999)};

        --wui-font-family: var(--w3m-font-family);

        --wui-font-size-mini: calc(var(--w3m-font-size-master) * 0.8);
        --wui-font-size-micro: var(--w3m-font-size-master);
        --wui-font-size-tiny: calc(var(--w3m-font-size-master) * 1.2);
        --wui-font-size-small: calc(var(--w3m-font-size-master) * 1.4);
        --wui-font-size-paragraph: calc(var(--w3m-font-size-master) * 1.6);
        --wui-font-size-medium: calc(var(--w3m-font-size-master) * 1.8);
        --wui-font-size-large: calc(var(--w3m-font-size-master) * 2);
        --wui-font-size-title-6: calc(var(--w3m-font-size-master) * 2.2);
        --wui-font-size-medium-title: calc(var(--w3m-font-size-master) * 2.4);
        --wui-font-size-2xl: calc(var(--w3m-font-size-master) * 4);

        --wui-border-radius-5xs: var(--w3m-border-radius-master);
        --wui-border-radius-4xs: calc(var(--w3m-border-radius-master) * 1.5);
        --wui-border-radius-3xs: calc(var(--w3m-border-radius-master) * 2);
        --wui-border-radius-xxs: calc(var(--w3m-border-radius-master) * 3);
        --wui-border-radius-xs: calc(var(--w3m-border-radius-master) * 4);
        --wui-border-radius-s: calc(var(--w3m-border-radius-master) * 5);
        --wui-border-radius-m: calc(var(--w3m-border-radius-master) * 7);
        --wui-border-radius-l: calc(var(--w3m-border-radius-master) * 9);
        --wui-border-radius-3xl: calc(var(--w3m-border-radius-master) * 20);

        --wui-font-weight-light: 400;
        --wui-font-weight-regular: 500;
        --wui-font-weight-medium: 600;
        --wui-font-weight-bold: 700;

        --wui-letter-spacing-2xl: -1.6px;
        --wui-letter-spacing-medium-title: -0.96px;
        --wui-letter-spacing-title-6: -0.88px;
        --wui-letter-spacing-large: -0.8px;
        --wui-letter-spacing-medium: -0.72px;
        --wui-letter-spacing-paragraph: -0.64px;
        --wui-letter-spacing-small: -0.56px;
        --wui-letter-spacing-tiny: -0.48px;
        --wui-letter-spacing-micro: -0.2px;
        --wui-letter-spacing-mini: -0.16px;

        --wui-spacing-0: 0px;
        --wui-spacing-4xs: 2px;
        --wui-spacing-3xs: 4px;
        --wui-spacing-xxs: 6px;
        --wui-spacing-2xs: 7px;
        --wui-spacing-xs: 8px;
        --wui-spacing-1xs: 10px;
        --wui-spacing-s: 12px;
        --wui-spacing-m: 14px;
        --wui-spacing-l: 16px;
        --wui-spacing-2l: 18px;
        --wui-spacing-xl: 20px;
        --wui-spacing-xxl: 24px;
        --wui-spacing-2xl: 32px;
        --wui-spacing-3xl: 40px;
        --wui-spacing-4xl: 90px;
        --wui-spacing-5xl: 95px;

        --wui-icon-box-size-xxs: 14px;
        --wui-icon-box-size-xs: 20px;
        --wui-icon-box-size-sm: 24px;
        --wui-icon-box-size-md: 32px;
        --wui-icon-box-size-mdl: 36px;
        --wui-icon-box-size-lg: 40px;
        --wui-icon-box-size-2lg: 48px;
        --wui-icon-box-size-xl: 64px;

        --wui-icon-size-inherit: inherit;
        --wui-icon-size-xxs: 10px;
        --wui-icon-size-xs: 12px;
        --wui-icon-size-sm: 14px;
        --wui-icon-size-md: 16px;
        --wui-icon-size-mdl: 18px;
        --wui-icon-size-lg: 20px;
        --wui-icon-size-xl: 24px;
        --wui-icon-size-xxl: 28px;

        --wui-wallet-image-size-inherit: inherit;
        --wui-wallet-image-size-sm: 40px;
        --wui-wallet-image-size-md: 56px;
        --wui-wallet-image-size-lg: 80px;

        --wui-visual-size-size-inherit: inherit;
        --wui-visual-size-sm: 40px;
        --wui-visual-size-md: 55px;
        --wui-visual-size-lg: 80px;

        --wui-box-size-md: 100px;
        --wui-box-size-lg: 120px;

        --wui-ease-out-power-2: cubic-bezier(0, 0, 0.22, 1);
        --wui-ease-out-power-1: cubic-bezier(0, 0, 0.55, 1);

        --wui-ease-in-power-3: cubic-bezier(0.66, 0, 1, 1);
        --wui-ease-in-power-2: cubic-bezier(0.45, 0, 1, 1);
        --wui-ease-in-power-1: cubic-bezier(0.3, 0, 1, 1);

        --wui-ease-inout-power-1: cubic-bezier(0.45, 0, 0.55, 1);

        --wui-duration-lg: 200ms;
        --wui-duration-md: 125ms;
        --wui-duration-sm: 75ms;

        --wui-path-network-sm: path(
          'M15.4 2.1a5.21 5.21 0 0 1 5.2 0l11.61 6.7a5.21 5.21 0 0 1 2.61 4.52v13.4c0 1.87-1 3.59-2.6 4.52l-11.61 6.7c-1.62.93-3.6.93-5.22 0l-11.6-6.7a5.21 5.21 0 0 1-2.61-4.51v-13.4c0-1.87 1-3.6 2.6-4.52L15.4 2.1Z'
        );

        --wui-path-network-md: path(
          'M43.4605 10.7248L28.0485 1.61089C25.5438 0.129705 22.4562 0.129705 19.9515 1.61088L4.53951 10.7248C2.03626 12.2051 0.5 14.9365 0.5 17.886V36.1139C0.5 39.0635 2.03626 41.7949 4.53951 43.2752L19.9515 52.3891C22.4562 53.8703 25.5438 53.8703 28.0485 52.3891L43.4605 43.2752C45.9637 41.7949 47.5 39.0635 47.5 36.114V17.8861C47.5 14.9365 45.9637 12.2051 43.4605 10.7248Z'
        );

        --wui-path-network-lg: path(
          'M78.3244 18.926L50.1808 2.45078C45.7376 -0.150261 40.2624 -0.150262 35.8192 2.45078L7.6756 18.926C3.23322 21.5266 0.5 26.3301 0.5 31.5248V64.4752C0.5 69.6699 3.23322 74.4734 7.6756 77.074L35.8192 93.5492C40.2624 96.1503 45.7376 96.1503 50.1808 93.5492L78.3244 77.074C82.7668 74.4734 85.5 69.6699 85.5 64.4752V31.5248C85.5 26.3301 82.7668 21.5266 78.3244 18.926Z'
        );

        --wui-width-network-sm: 36px;
        --wui-width-network-md: 48px;
        --wui-width-network-lg: 86px;

        --wui-height-network-sm: 40px;
        --wui-height-network-md: 54px;
        --wui-height-network-lg: 96px;

        --wui-icon-size-network-xs: 12px;
        --wui-icon-size-network-sm: 16px;
        --wui-icon-size-network-md: 24px;
        --wui-icon-size-network-lg: 42px;

        --wui-color-inherit: inherit;

        --wui-color-inverse-100: #fff;
        --wui-color-inverse-000: #000;

        --wui-cover: rgba(20, 20, 20, 0.8);

        --wui-color-modal-bg: var(--wui-color-modal-bg-base);

        --wui-color-accent-100: var(--wui-color-accent-base-100);
        --wui-color-accent-090: var(--wui-color-accent-base-090);
        --wui-color-accent-080: var(--wui-color-accent-base-080);

        --wui-color-success-100: var(--wui-color-success-base-100);
        --wui-color-success-125: var(--wui-color-success-base-125);

        --wui-color-warning-100: var(--wui-color-warning-base-100);

        --wui-color-error-100: var(--wui-color-error-base-100);
        --wui-color-error-125: var(--wui-color-error-base-125);

        --wui-color-blue-100: var(--wui-color-blue-base-100);
        --wui-color-blue-90: var(--wui-color-blue-base-90);

        --wui-icon-box-bg-error-100: var(--wui-icon-box-bg-error-base-100);
        --wui-icon-box-bg-blue-100: var(--wui-icon-box-bg-blue-base-100);
        --wui-icon-box-bg-success-100: var(--wui-icon-box-bg-success-base-100);
        --wui-icon-box-bg-inverse-100: var(--wui-icon-box-bg-inverse-base-100);

        --wui-all-wallets-bg-100: var(--wui-all-wallets-bg-100);

        --wui-avatar-border: var(--wui-avatar-border-base);

        --wui-thumbnail-border: var(--wui-thumbnail-border-base);

        --wui-wallet-button-bg: var(--wui-wallet-button-bg-base);

        --wui-box-shadow-blue: var(--wui-color-accent-glass-020);
      }

      @supports (background: color-mix(in srgb, white 50%, black)) {
        :root {
          --wui-color-modal-bg: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-modal-bg-base)
          );

          --wui-box-shadow-blue: color-mix(in srgb, var(--wui-color-accent-100) 20%, transparent);

          --wui-color-accent-100: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 100%,
            transparent
          );
          --wui-color-accent-090: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 90%,
            transparent
          );
          --wui-color-accent-080: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 80%,
            transparent
          );
          --wui-color-accent-glass-090: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 90%,
            transparent
          );
          --wui-color-accent-glass-080: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 80%,
            transparent
          );
          --wui-color-accent-glass-020: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 20%,
            transparent
          );
          --wui-color-accent-glass-015: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 15%,
            transparent
          );
          --wui-color-accent-glass-010: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 10%,
            transparent
          );
          --wui-color-accent-glass-005: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 5%,
            transparent
          );
          --wui-color-accent-002: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 2%,
            transparent
          );

          --wui-color-fg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-100)
          );
          --wui-color-fg-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-125)
          );
          --wui-color-fg-150: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-150)
          );
          --wui-color-fg-175: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-175)
          );
          --wui-color-fg-200: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-200)
          );
          --wui-color-fg-225: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-225)
          );
          --wui-color-fg-250: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-250)
          );
          --wui-color-fg-275: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-275)
          );
          --wui-color-fg-300: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-300)
          );
          --wui-color-fg-325: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-325)
          );
          --wui-color-fg-350: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-350)
          );

          --wui-color-bg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-100)
          );
          --wui-color-bg-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-125)
          );
          --wui-color-bg-150: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-150)
          );
          --wui-color-bg-175: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-175)
          );
          --wui-color-bg-200: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-200)
          );
          --wui-color-bg-225: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-225)
          );
          --wui-color-bg-250: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-250)
          );
          --wui-color-bg-275: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-275)
          );
          --wui-color-bg-300: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-300)
          );
          --wui-color-bg-325: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-325)
          );
          --wui-color-bg-350: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-350)
          );

          --wui-color-success-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-success-base-100)
          );
          --wui-color-success-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-success-base-125)
          );

          --wui-color-warning-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-warning-base-100)
          );

          --wui-color-error-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-error-base-100)
          );
          --wui-color-blue-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-blue-base-100)
          );
          --wui-color-blue-90: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-blue-base-90)
          );
          --wui-color-error-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-error-base-125)
          );

          --wui-icon-box-bg-error-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-error-base-100)
          );
          --wui-icon-box-bg-accent-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-blue-base-100)
          );
          --wui-icon-box-bg-success-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-success-base-100)
          );
          --wui-icon-box-bg-inverse-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-inverse-base-100)
          );

          --wui-all-wallets-bg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-all-wallets-bg-100)
          );

          --wui-avatar-border: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-avatar-border-base)
          );

          --wui-thumbnail-border: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-thumbnail-border-base)
          );

          --wui-wallet-button-bg: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-wallet-button-bg-base)
          );
        }
      }
    `,
    light: css`
      :root {
        --w3m-color-mix: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-color-mix"]) || "#fff")};
        --w3m-accent: ${unsafeCSS(getW3mThemeVariables(themeVariables, "dark")["--w3m-accent"])};
        --w3m-default: #fff;

        --wui-color-modal-bg-base: ${unsafeCSS(getW3mThemeVariables(themeVariables, "dark")["--w3m-background"])};
        --wui-color-accent-base-100: var(--w3m-accent);

        --wui-color-blueberry-100: hsla(230, 100%, 67%, 1);
        --wui-color-blueberry-090: hsla(231, 76%, 61%, 1);
        --wui-color-blueberry-080: hsla(230, 59%, 55%, 1);
        --wui-color-blueberry-050: hsla(231, 100%, 70%, 0.1);

        --wui-color-fg-100: #e4e7e7;
        --wui-color-fg-125: #d0d5d5;
        --wui-color-fg-150: #a8b1b1;
        --wui-color-fg-175: #a8b0b0;
        --wui-color-fg-200: #949e9e;
        --wui-color-fg-225: #868f8f;
        --wui-color-fg-250: #788080;
        --wui-color-fg-275: #788181;
        --wui-color-fg-300: #6e7777;
        --wui-color-fg-325: #9a9a9a;
        --wui-color-fg-350: #363636;

        --wui-color-bg-100: #141414;
        --wui-color-bg-125: #191a1a;
        --wui-color-bg-150: #1e1f1f;
        --wui-color-bg-175: #222525;
        --wui-color-bg-200: #272a2a;
        --wui-color-bg-225: #2c3030;
        --wui-color-bg-250: #313535;
        --wui-color-bg-275: #363b3b;
        --wui-color-bg-300: #3b4040;
        --wui-color-bg-325: #252525;
        --wui-color-bg-350: #ffffff;

        --wui-color-success-base-100: #26d962;
        --wui-color-success-base-125: #30a46b;

        --wui-color-warning-base-100: #f3a13f;

        --wui-color-error-base-100: #f25a67;
        --wui-color-error-base-125: #df4a34;

        --wui-color-blue-base-100: rgba(102, 125, 255, 1);
        --wui-color-blue-base-90: rgba(102, 125, 255, 0.9);

        --wui-color-success-glass-001: rgba(38, 217, 98, 0.01);
        --wui-color-success-glass-002: rgba(38, 217, 98, 0.02);
        --wui-color-success-glass-005: rgba(38, 217, 98, 0.05);
        --wui-color-success-glass-010: rgba(38, 217, 98, 0.1);
        --wui-color-success-glass-015: rgba(38, 217, 98, 0.15);
        --wui-color-success-glass-020: rgba(38, 217, 98, 0.2);
        --wui-color-success-glass-025: rgba(38, 217, 98, 0.25);
        --wui-color-success-glass-030: rgba(38, 217, 98, 0.3);
        --wui-color-success-glass-060: rgba(38, 217, 98, 0.6);
        --wui-color-success-glass-080: rgba(38, 217, 98, 0.8);

        --wui-color-success-glass-reown-020: rgba(48, 164, 107, 0.2);

        --wui-color-warning-glass-reown-020: rgba(243, 161, 63, 0.2);

        --wui-color-error-glass-001: rgba(242, 90, 103, 0.01);
        --wui-color-error-glass-002: rgba(242, 90, 103, 0.02);
        --wui-color-error-glass-005: rgba(242, 90, 103, 0.05);
        --wui-color-error-glass-010: rgba(242, 90, 103, 0.1);
        --wui-color-error-glass-015: rgba(242, 90, 103, 0.15);
        --wui-color-error-glass-020: rgba(242, 90, 103, 0.2);
        --wui-color-error-glass-025: rgba(242, 90, 103, 0.25);
        --wui-color-error-glass-030: rgba(242, 90, 103, 0.3);
        --wui-color-error-glass-060: rgba(242, 90, 103, 0.6);
        --wui-color-error-glass-080: rgba(242, 90, 103, 0.8);

        --wui-color-error-glass-reown-020: rgba(223, 74, 52, 0.2);

        --wui-color-gray-glass-001: rgba(255, 255, 255, 0.01);
        --wui-color-gray-glass-002: rgba(255, 255, 255, 0.02);
        --wui-color-gray-glass-005: rgba(255, 255, 255, 0.05);
        --wui-color-gray-glass-010: rgba(255, 255, 255, 0.1);
        --wui-color-gray-glass-015: rgba(255, 255, 255, 0.15);
        --wui-color-gray-glass-020: rgba(255, 255, 255, 0.2);
        --wui-color-gray-glass-025: rgba(255, 255, 255, 0.25);
        --wui-color-gray-glass-030: rgba(255, 255, 255, 0.3);
        --wui-color-gray-glass-060: rgba(255, 255, 255, 0.6);
        --wui-color-gray-glass-080: rgba(255, 255, 255, 0.8);
        --wui-color-gray-glass-090: rgba(255, 255, 255, 0.9);

        --wui-color-dark-glass-100: rgba(42, 42, 42, 1);

        --wui-icon-box-bg-error-base-100: #3c2426;
        --wui-icon-box-bg-blue-base-100: #20303f;
        --wui-icon-box-bg-success-base-100: #1f3a28;
        --wui-icon-box-bg-inverse-base-100: #243240;

        --wui-all-wallets-bg-100: #222b35;

        --wui-avatar-border-base: #252525;

        --wui-thumbnail-border-base: #252525;

        --wui-wallet-button-bg-base: var(--wui-color-bg-125);

        --w3m-card-embedded-shadow-color: rgb(17 17 18 / 25%);
      }
    `,
    dark: css`
      :root {
        --w3m-color-mix: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-color-mix"]) || "#000")};
        --w3m-accent: ${unsafeCSS(getW3mThemeVariables(themeVariables, "light")["--w3m-accent"])};
        --w3m-default: #000;

        --wui-color-modal-bg-base: ${unsafeCSS(getW3mThemeVariables(themeVariables, "light")["--w3m-background"])};
        --wui-color-accent-base-100: var(--w3m-accent);

        --wui-color-blueberry-100: hsla(231, 100%, 70%, 1);
        --wui-color-blueberry-090: hsla(231, 97%, 72%, 1);
        --wui-color-blueberry-080: hsla(231, 92%, 74%, 1);

        --wui-color-fg-100: #141414;
        --wui-color-fg-125: #2d3131;
        --wui-color-fg-150: #474d4d;
        --wui-color-fg-175: #636d6d;
        --wui-color-fg-200: #798686;
        --wui-color-fg-225: #828f8f;
        --wui-color-fg-250: #8b9797;
        --wui-color-fg-275: #95a0a0;
        --wui-color-fg-300: #9ea9a9;
        --wui-color-fg-325: #9a9a9a;
        --wui-color-fg-350: #d0d0d0;

        --wui-color-bg-100: #ffffff;
        --wui-color-bg-125: #f5fafa;
        --wui-color-bg-150: #f3f8f8;
        --wui-color-bg-175: #eef4f4;
        --wui-color-bg-200: #eaf1f1;
        --wui-color-bg-225: #e5eded;
        --wui-color-bg-250: #e1e9e9;
        --wui-color-bg-275: #dce7e7;
        --wui-color-bg-300: #d8e3e3;
        --wui-color-bg-325: #f3f3f3;
        --wui-color-bg-350: #202020;

        --wui-color-success-base-100: #26b562;
        --wui-color-success-base-125: #30a46b;

        --wui-color-warning-base-100: #f3a13f;

        --wui-color-error-base-100: #f05142;
        --wui-color-error-base-125: #df4a34;

        --wui-color-blue-base-100: rgba(102, 125, 255, 1);
        --wui-color-blue-base-90: rgba(102, 125, 255, 0.9);

        --wui-color-success-glass-001: rgba(38, 181, 98, 0.01);
        --wui-color-success-glass-002: rgba(38, 181, 98, 0.02);
        --wui-color-success-glass-005: rgba(38, 181, 98, 0.05);
        --wui-color-success-glass-010: rgba(38, 181, 98, 0.1);
        --wui-color-success-glass-015: rgba(38, 181, 98, 0.15);
        --wui-color-success-glass-020: rgba(38, 181, 98, 0.2);
        --wui-color-success-glass-025: rgba(38, 181, 98, 0.25);
        --wui-color-success-glass-030: rgba(38, 181, 98, 0.3);
        --wui-color-success-glass-060: rgba(38, 181, 98, 0.6);
        --wui-color-success-glass-080: rgba(38, 181, 98, 0.8);

        --wui-color-success-glass-reown-020: rgba(48, 164, 107, 0.2);

        --wui-color-warning-glass-reown-020: rgba(243, 161, 63, 0.2);

        --wui-color-error-glass-001: rgba(240, 81, 66, 0.01);
        --wui-color-error-glass-002: rgba(240, 81, 66, 0.02);
        --wui-color-error-glass-005: rgba(240, 81, 66, 0.05);
        --wui-color-error-glass-010: rgba(240, 81, 66, 0.1);
        --wui-color-error-glass-015: rgba(240, 81, 66, 0.15);
        --wui-color-error-glass-020: rgba(240, 81, 66, 0.2);
        --wui-color-error-glass-025: rgba(240, 81, 66, 0.25);
        --wui-color-error-glass-030: rgba(240, 81, 66, 0.3);
        --wui-color-error-glass-060: rgba(240, 81, 66, 0.6);
        --wui-color-error-glass-080: rgba(240, 81, 66, 0.8);

        --wui-color-error-glass-reown-020: rgba(223, 74, 52, 0.2);

        --wui-icon-box-bg-error-base-100: #f4dfdd;
        --wui-icon-box-bg-blue-base-100: #d9ecfb;
        --wui-icon-box-bg-success-base-100: #daf0e4;
        --wui-icon-box-bg-inverse-base-100: #dcecfc;

        --wui-all-wallets-bg-100: #e8f1fa;

        --wui-avatar-border-base: #f3f4f4;

        --wui-thumbnail-border-base: #eaefef;

        --wui-wallet-button-bg-base: var(--wui-color-bg-125);

        --wui-color-gray-glass-001: rgba(0, 0, 0, 0.01);
        --wui-color-gray-glass-002: rgba(0, 0, 0, 0.02);
        --wui-color-gray-glass-005: rgba(0, 0, 0, 0.05);
        --wui-color-gray-glass-010: rgba(0, 0, 0, 0.1);
        --wui-color-gray-glass-015: rgba(0, 0, 0, 0.15);
        --wui-color-gray-glass-020: rgba(0, 0, 0, 0.2);
        --wui-color-gray-glass-025: rgba(0, 0, 0, 0.25);
        --wui-color-gray-glass-030: rgba(0, 0, 0, 0.3);
        --wui-color-gray-glass-060: rgba(0, 0, 0, 0.6);
        --wui-color-gray-glass-080: rgba(0, 0, 0, 0.8);
        --wui-color-gray-glass-090: rgba(0, 0, 0, 0.9);

        --wui-color-dark-glass-100: rgba(233, 233, 233, 1);

        --w3m-card-embedded-shadow-color: rgb(224 225 233 / 25%);
      }
    `
  };
}
var resetStyles = css`
  *,
  *::after,
  *::before,
  :host {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-style: normal;
    text-rendering: optimizeSpeed;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -webkit-tap-highlight-color: transparent;
    font-family: var(--wui-font-family);
    backface-visibility: hidden;
  }
`;
var elementStyles = css`
  button,
  a {
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    transition:
      color var(--wui-duration-lg) var(--wui-ease-out-power-1),
      background-color var(--wui-duration-lg) var(--wui-ease-out-power-1),
      border var(--wui-duration-lg) var(--wui-ease-out-power-1),
      border-radius var(--wui-duration-lg) var(--wui-ease-out-power-1),
      box-shadow var(--wui-duration-lg) var(--wui-ease-out-power-1);
    will-change: background-color, color, border, box-shadow, border-radius;
    outline: none;
    border: none;
    column-gap: var(--wui-spacing-3xs);
    background-color: transparent;
    text-decoration: none;
  }

  wui-flex {
    transition: border-radius var(--wui-duration-lg) var(--wui-ease-out-power-1);
    will-change: border-radius;
  }

  button:disabled > wui-wallet-image,
  button:disabled > wui-all-wallets-image,
  button:disabled > wui-network-image,
  button:disabled > wui-image,
  button:disabled > wui-transaction-visual,
  button:disabled > wui-logo {
    filter: grayscale(1);
  }

  @media (hover: hover) and (pointer: fine) {
    button:hover:enabled {
      background-color: var(--wui-color-gray-glass-005);
    }

    button:active:enabled {
      background-color: var(--wui-color-gray-glass-010);
    }
  }

  button:disabled > wui-icon-box {
    opacity: 0.5;
  }

  input {
    border: none;
    outline: none;
    appearance: none;
  }
`;
var colorStyles = css`
  .wui-color-inherit {
    color: var(--wui-color-inherit);
  }

  .wui-color-accent-100 {
    color: var(--wui-color-accent-100);
  }

  .wui-color-error-100 {
    color: var(--wui-color-error-100);
  }

  .wui-color-blue-100 {
    color: var(--wui-color-blue-100);
  }

  .wui-color-blue-90 {
    color: var(--wui-color-blue-90);
  }

  .wui-color-error-125 {
    color: var(--wui-color-error-125);
  }

  .wui-color-success-100 {
    color: var(--wui-color-success-100);
  }

  .wui-color-success-125 {
    color: var(--wui-color-success-125);
  }

  .wui-color-inverse-100 {
    color: var(--wui-color-inverse-100);
  }

  .wui-color-inverse-000 {
    color: var(--wui-color-inverse-000);
  }

  .wui-color-fg-100 {
    color: var(--wui-color-fg-100);
  }

  .wui-color-fg-200 {
    color: var(--wui-color-fg-200);
  }

  .wui-color-fg-300 {
    color: var(--wui-color-fg-300);
  }

  .wui-color-fg-325 {
    color: var(--wui-color-fg-325);
  }

  .wui-color-fg-350 {
    color: var(--wui-color-fg-350);
  }

  .wui-bg-color-inherit {
    background-color: var(--wui-color-inherit);
  }

  .wui-bg-color-blue-100 {
    background-color: var(--wui-color-accent-100);
  }

  .wui-bg-color-error-100 {
    background-color: var(--wui-color-error-100);
  }

  .wui-bg-color-error-125 {
    background-color: var(--wui-color-error-125);
  }

  .wui-bg-color-success-100 {
    background-color: var(--wui-color-success-100);
  }

  .wui-bg-color-success-125 {
    background-color: var(--wui-color-success-100);
  }

  .wui-bg-color-inverse-100 {
    background-color: var(--wui-color-inverse-100);
  }

  .wui-bg-color-inverse-000 {
    background-color: var(--wui-color-inverse-000);
  }

  .wui-bg-color-fg-100 {
    background-color: var(--wui-color-fg-100);
  }

  .wui-bg-color-fg-200 {
    background-color: var(--wui-color-fg-200);
  }

  .wui-bg-color-fg-300 {
    background-color: var(--wui-color-fg-300);
  }

  .wui-color-fg-325 {
    background-color: var(--wui-color-fg-325);
  }

  .wui-color-fg-350 {
    background-color: var(--wui-color-fg-350);
  }
`;

// node_modules/@reown/appkit-ui/dist/esm/src/utils/UiHelperUtil.js
var UiHelperUtil = {
  getSpacingStyles(spacing, index) {
    if (Array.isArray(spacing)) {
      return spacing[index] ? `var(--wui-spacing-${spacing[index]})` : void 0;
    } else if (typeof spacing === "string") {
      return `var(--wui-spacing-${spacing})`;
    }
    return void 0;
  },
  getFormattedDate(date) {
    return new Intl.DateTimeFormat("en-US", { month: "short", day: "numeric" }).format(date);
  },
  getHostName(url) {
    try {
      const newUrl = new URL(url);
      return newUrl.hostname;
    } catch (error) {
      return "";
    }
  },
  getTruncateString({ string: string2, charsStart, charsEnd, truncate }) {
    if (string2.length <= charsStart + charsEnd) {
      return string2;
    }
    if (truncate === "end") {
      return `${string2.substring(0, charsStart)}...`;
    } else if (truncate === "start") {
      return `...${string2.substring(string2.length - charsEnd)}`;
    }
    return `${string2.substring(0, Math.floor(charsStart))}...${string2.substring(string2.length - Math.floor(charsEnd))}`;
  },
  generateAvatarColors(address) {
    const hash = address.toLowerCase().replace(/^0x/iu, "").replace(/[^a-f0-9]/gu, "");
    const baseColor = hash.substring(0, 6).padEnd(6, "0");
    const rgbColor = this.hexToRgb(baseColor);
    const masterBorderRadius = getComputedStyle(document.documentElement).getPropertyValue("--w3m-border-radius-master");
    const radius = Number(masterBorderRadius == null ? void 0 : masterBorderRadius.replace("px", ""));
    const edge = 100 - 3 * radius;
    const gradientCircle = `${edge}% ${edge}% at 65% 40%`;
    const colors = [];
    for (let i6 = 0; i6 < 5; i6 += 1) {
      const tintedColor = this.tintColor(rgbColor, 0.15 * i6);
      colors.push(`rgb(${tintedColor[0]}, ${tintedColor[1]}, ${tintedColor[2]})`);
    }
    return `
    --local-color-1: ${colors[0]};
    --local-color-2: ${colors[1]};
    --local-color-3: ${colors[2]};
    --local-color-4: ${colors[3]};
    --local-color-5: ${colors[4]};
    --local-radial-circle: ${gradientCircle}
   `;
  },
  hexToRgb(hex2) {
    const bigint = parseInt(hex2, 16);
    const r4 = bigint >> 16 & 255;
    const g4 = bigint >> 8 & 255;
    const b6 = bigint & 255;
    return [r4, g4, b6];
  },
  tintColor(rgb, tint) {
    const [r4, g4, b6] = rgb;
    const tintedR = Math.round(r4 + (255 - r4) * tint);
    const tintedG = Math.round(g4 + (255 - g4) * tint);
    const tintedB = Math.round(b6 + (255 - b6) * tint);
    return [tintedR, tintedG, tintedB];
  },
  isNumber(character) {
    const regex = {
      number: /^[0-9]+$/u
    };
    return regex.number.test(character);
  },
  getColorTheme(theme) {
    var _a2;
    if (theme) {
      return theme;
    } else if (typeof window !== "undefined" && window.matchMedia && typeof window.matchMedia === "function") {
      if ((_a2 = window.matchMedia("(prefers-color-scheme: dark)")) == null ? void 0 : _a2.matches) {
        return "dark";
      }
      return "light";
    }
    return "dark";
  },
  splitBalance(input) {
    const parts = input.split(".");
    if (parts.length === 2) {
      return [parts[0], parts[1]];
    }
    return ["0", "00"];
  },
  roundNumber(number, threshold, fixed) {
    const roundedNumber = number.toString().length >= threshold ? Number(number).toFixed(fixed) : number;
    return roundedNumber;
  },
  formatNumberToLocalString(value, decimals = 2) {
    if (value === void 0) {
      return "0.00";
    }
    if (typeof value === "number") {
      return value.toLocaleString("en-US", {
        maximumFractionDigits: decimals,
        minimumFractionDigits: decimals
      });
    }
    return parseFloat(value).toLocaleString("en-US", {
      maximumFractionDigits: decimals,
      minimumFractionDigits: decimals
    });
  }
};

// node_modules/@reown/appkit-ui/dist/esm/src/utils/TransactionUtil.js
var FLOAT_FIXED_VALUE = 3;
var plusTypes = ["receive", "deposit", "borrow", "claim"];
var minusTypes = ["withdraw", "repay", "burn"];
var TransactionUtil = {
  getTransactionGroupTitle(year, month) {
    const currentYear = DateUtil.getYear();
    const monthName = DateUtil.getMonthNameByIndex(month);
    const isCurrentYear = year === currentYear;
    const groupTitle = isCurrentYear ? monthName : `${monthName} ${year}`;
    return groupTitle;
  },
  getTransactionImages(transfers) {
    const [transfer, secondTransfer] = transfers;
    const isAllNFT = Boolean(transfer) && (transfers == null ? void 0 : transfers.every((item) => Boolean(item.nft_info)));
    const haveMultipleTransfers = (transfers == null ? void 0 : transfers.length) > 1;
    const haveTwoTransfers = (transfers == null ? void 0 : transfers.length) === 2;
    if (haveTwoTransfers && !isAllNFT) {
      return [this.getTransactionImage(secondTransfer), this.getTransactionImage(transfer)];
    }
    if (haveMultipleTransfers) {
      return transfers.map((item) => this.getTransactionImage(item));
    }
    return [this.getTransactionImage(transfer)];
  },
  getTransactionImage(transfer) {
    return {
      type: TransactionUtil.getTransactionTransferTokenType(transfer),
      url: TransactionUtil.getTransactionImageURL(transfer)
    };
  },
  getTransactionImageURL(transfer) {
    var _a2, _b, _c2, _d, _e6;
    let imageURL = void 0;
    const isNFT = Boolean(transfer == null ? void 0 : transfer.nft_info);
    const isFungible = Boolean(transfer == null ? void 0 : transfer.fungible_info);
    if (transfer && isNFT) {
      imageURL = (_c2 = (_b = (_a2 = transfer == null ? void 0 : transfer.nft_info) == null ? void 0 : _a2.content) == null ? void 0 : _b.preview) == null ? void 0 : _c2.url;
    } else if (transfer && isFungible) {
      imageURL = (_e6 = (_d = transfer == null ? void 0 : transfer.fungible_info) == null ? void 0 : _d.icon) == null ? void 0 : _e6.url;
    }
    return imageURL;
  },
  getTransactionTransferTokenType(transfer) {
    if (transfer == null ? void 0 : transfer.fungible_info) {
      return "FUNGIBLE";
    } else if (transfer == null ? void 0 : transfer.nft_info) {
      return "NFT";
    }
    return void 0;
  },
  getTransactionDescriptions(transaction) {
    var _a2, _b, _c2;
    const type = (_a2 = transaction == null ? void 0 : transaction.metadata) == null ? void 0 : _a2.operationType;
    const transfers = transaction == null ? void 0 : transaction.transfers;
    const haveTransfer = ((_b = transaction == null ? void 0 : transaction.transfers) == null ? void 0 : _b.length) > 0;
    const haveMultipleTransfers = ((_c2 = transaction == null ? void 0 : transaction.transfers) == null ? void 0 : _c2.length) > 1;
    const isFungible = haveTransfer && (transfers == null ? void 0 : transfers.every((transfer) => Boolean(transfer == null ? void 0 : transfer.fungible_info)));
    const [firstTransfer, secondTransfer] = transfers;
    let firstDescription = this.getTransferDescription(firstTransfer);
    let secondDescription = this.getTransferDescription(secondTransfer);
    if (!haveTransfer) {
      const isSendOrReceive = type === "send" || type === "receive";
      if (isSendOrReceive && isFungible) {
        firstDescription = UiHelperUtil.getTruncateString({
          string: transaction == null ? void 0 : transaction.metadata.sentFrom,
          charsStart: 4,
          charsEnd: 6,
          truncate: "middle"
        });
        secondDescription = UiHelperUtil.getTruncateString({
          string: transaction == null ? void 0 : transaction.metadata.sentTo,
          charsStart: 4,
          charsEnd: 6,
          truncate: "middle"
        });
        return [firstDescription, secondDescription];
      }
      return [transaction.metadata.status];
    }
    if (haveMultipleTransfers) {
      return transfers.map((item) => this.getTransferDescription(item)).reverse();
    }
    let prefix = "";
    if (plusTypes.includes(type)) {
      prefix = "+";
    } else if (minusTypes.includes(type)) {
      prefix = "-";
    }
    firstDescription = prefix.concat(firstDescription);
    return [firstDescription];
  },
  getTransferDescription(transfer) {
    var _a2;
    let description = "";
    if (!transfer) {
      return description;
    }
    if (transfer == null ? void 0 : transfer.nft_info) {
      description = ((_a2 = transfer == null ? void 0 : transfer.nft_info) == null ? void 0 : _a2.name) || "-";
    } else if (transfer == null ? void 0 : transfer.fungible_info) {
      description = this.getFungibleTransferDescription(transfer) || "-";
    }
    return description;
  },
  getFungibleTransferDescription(transfer) {
    var _a2;
    if (!transfer) {
      return null;
    }
    const quantity = this.getQuantityFixedValue(transfer == null ? void 0 : transfer.quantity.numeric);
    const description = [quantity, (_a2 = transfer == null ? void 0 : transfer.fungible_info) == null ? void 0 : _a2.symbol].join(" ").trim();
    return description;
  },
  getQuantityFixedValue(value) {
    if (!value) {
      return null;
    }
    const parsedValue = parseFloat(value);
    return parsedValue.toFixed(FLOAT_FIXED_VALUE);
  }
};

// node_modules/@reown/appkit-ui/dist/esm/src/utils/WebComponentsUtil.js
function standardCustomElement(tagName, descriptor) {
  const { kind, elements } = descriptor;
  return {
    kind,
    elements,
    finisher(clazz) {
      if (!customElements.get(tagName)) {
        customElements.define(tagName, clazz);
      }
    }
  };
}
function legacyCustomElement(tagName, clazz) {
  if (!customElements.get(tagName)) {
    customElements.define(tagName, clazz);
  }
  return clazz;
}
function customElement(tagName) {
  return function create3(classOrDescriptor) {
    return typeof classOrDescriptor === "function" ? legacyCustomElement(tagName, classOrDescriptor) : standardCustomElement(tagName, classOrDescriptor);
  };
}

export {
  a,
  p,
  w,
  proxy,
  subscribe,
  snapshot,
  ref,
  subscribeKey,
  DateUtil,
  ConstantsUtil,
  NetworkUtil,
  NumberUtil,
  InputUtil,
  ContractUtil,
  NavigationUtil,
  ParseUtil,
  getW3mThemeVariables,
  ConstantsUtil2,
  StorageUtil,
  CoreHelperUtil,
  OptionsController,
  SECURE_SITE_SDK,
  DEFAULT_LOG_LEVEL,
  SECURE_SITE_SDK_VERSION,
  W3mFrameConstants,
  W3mFrameRpcConstants,
  AssetController,
  AssetUtil,
  AlertController,
  EventsController,
  ApiController,
  RouterController,
  ThemeController,
  ConnectorController,
  getPreferredAccountType,
  ConnectionControllerUtil,
  SnackController,
  TransactionsController,
  ConnectionController,
  PublicStateController,
  SendController,
  ChainController,
  BlockchainApiController,
  AccountController,
  NetworkUtil2,
  ModalController,
  OnRampController,
  SwapController,
  TooltipController,
  EnsController,
  OptionsStateController,
  k2 as k,
  E2 as E,
  A,
  esm_default2 as esm_default,
  B3 as B,
  SIWXUtil,
  ModalUtil,
  MathUtil,
  initializeTheming,
  setColorTheme,
  setThemeVariables,
  resetStyles,
  elementStyles,
  colorStyles,
  UiHelperUtil,
  TransactionUtil,
  customElement
};
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

@walletconnect/relay-auth/dist/index.es.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@walletconnect/utils/dist/index.es.js:
  (*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=chunk-RMWTWYKC.js.map
